pub const info = struct {
  pub const api = .gl;
  pub const version_major = 4;
  pub const version_minor = 6;
  pub const profile = .core;
};
pub const GL_DEPTH_BUFFER_BIT = 0x00000100;
pub const GL_STENCIL_BUFFER_BIT = 0x00000400;
pub const GL_COLOR_BUFFER_BIT = 0x00004000;
pub const GL_FALSE = 0;
pub const GL_TRUE = 1;
pub const GL_POINTS = 0x0000;
pub const GL_LINES = 0x0001;
pub const GL_LINE_LOOP = 0x0002;
pub const GL_LINE_STRIP = 0x0003;
pub const GL_TRIANGLES = 0x0004;
pub const GL_TRIANGLE_STRIP = 0x0005;
pub const GL_TRIANGLE_FAN = 0x0006;
pub const GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
pub const GL_NEVER = 0x0200;
pub const GL_LESS = 0x0201;
pub const GL_EQUAL = 0x0202;
pub const GL_LEQUAL = 0x0203;
pub const GL_GREATER = 0x0204;
pub const GL_NOTEQUAL = 0x0205;
pub const GL_GEQUAL = 0x0206;
pub const GL_ALWAYS = 0x0207;
pub const GL_ZERO = 0;
pub const GL_ONE = 1;
pub const GL_SRC_COLOR = 0x0300;
pub const GL_ONE_MINUS_SRC_COLOR = 0x0301;
pub const GL_SRC_ALPHA = 0x0302;
pub const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
pub const GL_DST_ALPHA = 0x0304;
pub const GL_ONE_MINUS_DST_ALPHA = 0x0305;
pub const GL_DST_COLOR = 0x0306;
pub const GL_ONE_MINUS_DST_COLOR = 0x0307;
pub const GL_SRC_ALPHA_SATURATE = 0x0308;
pub const GL_NONE = 0;
pub const GL_FRONT_LEFT = 0x0400;
pub const GL_FRONT_RIGHT = 0x0401;
pub const GL_BACK_LEFT = 0x0402;
pub const GL_BACK_RIGHT = 0x0403;
pub const GL_FRONT = 0x0404;
pub const GL_BACK = 0x0405;
pub const GL_LEFT = 0x0406;
pub const GL_RIGHT = 0x0407;
pub const GL_FRONT_AND_BACK = 0x0408;
pub const GL_NO_ERROR = 0;
pub const GL_INVALID_ENUM = 0x0500;
pub const GL_INVALID_VALUE = 0x0501;
pub const GL_INVALID_OPERATION = 0x0502;
pub const GL_OUT_OF_MEMORY = 0x0505;
pub const GL_CW = 0x0900;
pub const GL_CCW = 0x0901;
pub const GL_POINT_SIZE = 0x0B11;
pub const GL_POINT_SIZE_RANGE = 0x0B12;
pub const GL_POINT_SIZE_GRANULARITY = 0x0B13;
pub const GL_LINE_SMOOTH = 0x0B20;
pub const GL_LINE_WIDTH = 0x0B21;
pub const GL_LINE_WIDTH_RANGE = 0x0B22;
pub const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
pub const GL_POLYGON_MODE = 0x0B40;
pub const GL_POLYGON_SMOOTH = 0x0B41;
pub const GL_CULL_FACE = 0x0B44;
pub const GL_CULL_FACE_MODE = 0x0B45;
pub const GL_FRONT_FACE = 0x0B46;
pub const GL_DEPTH_RANGE = 0x0B70;
pub const GL_DEPTH_TEST = 0x0B71;
pub const GL_DEPTH_WRITEMASK = 0x0B72;
pub const GL_DEPTH_CLEAR_VALUE = 0x0B73;
pub const GL_DEPTH_FUNC = 0x0B74;
pub const GL_STENCIL_TEST = 0x0B90;
pub const GL_STENCIL_CLEAR_VALUE = 0x0B91;
pub const GL_STENCIL_FUNC = 0x0B92;
pub const GL_STENCIL_VALUE_MASK = 0x0B93;
pub const GL_STENCIL_FAIL = 0x0B94;
pub const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
pub const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
pub const GL_STENCIL_REF = 0x0B97;
pub const GL_STENCIL_WRITEMASK = 0x0B98;
pub const GL_VIEWPORT = 0x0BA2;
pub const GL_DITHER = 0x0BD0;
pub const GL_BLEND_DST = 0x0BE0;
pub const GL_BLEND_SRC = 0x0BE1;
pub const GL_BLEND = 0x0BE2;
pub const GL_LOGIC_OP_MODE = 0x0BF0;
pub const GL_DRAW_BUFFER = 0x0C01;
pub const GL_READ_BUFFER = 0x0C02;
pub const GL_SCISSOR_BOX = 0x0C10;
pub const GL_SCISSOR_TEST = 0x0C11;
pub const GL_COLOR_CLEAR_VALUE = 0x0C22;
pub const GL_COLOR_WRITEMASK = 0x0C23;
pub const GL_DOUBLEBUFFER = 0x0C32;
pub const GL_STEREO = 0x0C33;
pub const GL_LINE_SMOOTH_HINT = 0x0C52;
pub const GL_POLYGON_SMOOTH_HINT = 0x0C53;
pub const GL_UNPACK_SWAP_BYTES = 0x0CF0;
pub const GL_UNPACK_LSB_FIRST = 0x0CF1;
pub const GL_UNPACK_ROW_LENGTH = 0x0CF2;
pub const GL_UNPACK_SKIP_ROWS = 0x0CF3;
pub const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
pub const GL_UNPACK_ALIGNMENT = 0x0CF5;
pub const GL_PACK_SWAP_BYTES = 0x0D00;
pub const GL_PACK_LSB_FIRST = 0x0D01;
pub const GL_PACK_ROW_LENGTH = 0x0D02;
pub const GL_PACK_SKIP_ROWS = 0x0D03;
pub const GL_PACK_SKIP_PIXELS = 0x0D04;
pub const GL_PACK_ALIGNMENT = 0x0D05;
pub const GL_MAX_TEXTURE_SIZE = 0x0D33;
pub const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
pub const GL_SUBPIXEL_BITS = 0x0D50;
pub const GL_TEXTURE_1D = 0x0DE0;
pub const GL_TEXTURE_2D = 0x0DE1;
pub const GL_TEXTURE_WIDTH = 0x1000;
pub const GL_TEXTURE_HEIGHT = 0x1001;
pub const GL_TEXTURE_BORDER_COLOR = 0x1004;
pub const GL_DONT_CARE = 0x1100;
pub const GL_FASTEST = 0x1101;
pub const GL_NICEST = 0x1102;
pub const GL_BYTE = 0x1400;
pub const GL_UNSIGNED_BYTE = 0x1401;
pub const GL_SHORT = 0x1402;
pub const GL_UNSIGNED_SHORT = 0x1403;
pub const GL_INT = 0x1404;
pub const GL_UNSIGNED_INT = 0x1405;
pub const GL_FLOAT = 0x1406;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
pub const GL_SYNC_FENCE = 0x9116;
pub const GL_CLEAR = 0x1500;
pub const GL_AND = 0x1501;
pub const GL_AND_REVERSE = 0x1502;
pub const GL_COPY = 0x1503;
pub const GL_AND_INVERTED = 0x1504;
pub const GL_NOOP = 0x1505;
pub const GL_XOR = 0x1506;
pub const GL_OR = 0x1507;
pub const GL_NOR = 0x1508;
pub const GL_EQUIV = 0x1509;
pub const GL_INVERT = 0x150A;
pub const GL_OR_REVERSE = 0x150B;
pub const GL_COPY_INVERTED = 0x150C;
pub const GL_OR_INVERTED = 0x150D;
pub const GL_NAND = 0x150E;
pub const GL_SET = 0x150F;
pub const GL_TEXTURE = 0x1702;
pub const GL_COLOR = 0x1800;
pub const GL_DEPTH = 0x1801;
pub const GL_STENCIL = 0x1802;
pub const GL_STENCIL_INDEX = 0x1901;
pub const GL_DEPTH_COMPONENT = 0x1902;
pub const GL_RED = 0x1903;
pub const GL_GREEN = 0x1904;
pub const GL_BLUE = 0x1905;
pub const GL_ALPHA = 0x1906;
pub const GL_RGB = 0x1907;
pub const GL_RGBA = 0x1908;
pub const GL_POINT = 0x1B00;
pub const GL_LINE = 0x1B01;
pub const GL_FILL = 0x1B02;
pub const GL_KEEP = 0x1E00;
pub const GL_REPLACE = 0x1E01;
pub const GL_INCR = 0x1E02;
pub const GL_DECR = 0x1E03;
pub const GL_VENDOR = 0x1F00;
pub const GL_RENDERER = 0x1F01;
pub const GL_VERSION = 0x1F02;
pub const GL_EXTENSIONS = 0x1F03;
pub const GL_NEAREST = 0x2600;
pub const GL_LINEAR = 0x2601;
pub const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
pub const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
pub const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
pub const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
pub const GL_TEXTURE_MAG_FILTER = 0x2800;
pub const GL_TEXTURE_MIN_FILTER = 0x2801;
pub const GL_TEXTURE_WRAP_S = 0x2802;
pub const GL_TEXTURE_WRAP_T = 0x2803;
pub const GL_REPEAT = 0x2901;
pub const GL_MAX_INTEGER_SAMPLES = 0x9110;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
pub const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
pub const GL_TEXTURE_SAMPLES = 0x9106;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
pub const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
pub const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
pub const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
pub const GL_WAIT_FAILED = 0x911D;
pub const GL_CONDITION_SATISFIED = 0x911C;
pub const GL_TIMEOUT_EXPIRED = 0x911B;
pub const GL_ALREADY_SIGNALED = 0x911A;
pub const GL_SIGNALED = 0x9119;
pub const GL_UNSIGNALED = 0x9118;
pub const GL_SYNC_FLAGS = 0x9115;
pub const GL_SYNC_STATUS = 0x9114;
pub const GL_SYNC_CONDITION = 0x9113;
pub const GL_OBJECT_TYPE = 0x9112;
pub const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
pub const GL_PROVOKING_VERTEX = 0x8E4F;
pub const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
pub const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
pub const GL_DEPTH_CLAMP = 0x864F;
pub const GL_CONTEXT_PROFILE_MASK = 0x9126;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
pub const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
pub const GL_GEOMETRY_INPUT_TYPE = 0x8917;
pub const GL_GEOMETRY_VERTICES_OUT = 0x8916;
pub const GL_GEOMETRY_SHADER = 0x8DD9;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
pub const GL_PROGRAM_POINT_SIZE = 0x8642;
pub const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
pub const GL_TRIANGLES_ADJACENCY = 0x000C;
pub const GL_LINE_STRIP_ADJACENCY = 0x000B;
pub const GL_LINES_ADJACENCY = 0x000A;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
pub const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
pub const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
pub const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
pub const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
pub const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
pub const GL_UNIFORM_OFFSET = 0x8A3B;
pub const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
pub const GL_UNIFORM_NAME_LENGTH = 0x8A39;
pub const GL_UNIFORM_SIZE = 0x8A38;
pub const GL_UNIFORM_TYPE = 0x8A37;
pub const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
pub const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
pub const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
pub const GL_UNIFORM_BUFFER_START = 0x8A29;
pub const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
pub const GL_UNIFORM_BUFFER = 0x8A11;
pub const GL_COPY_WRITE_BUFFER = 0x8F37;
pub const GL_COPY_READ_BUFFER = 0x8F36;
pub const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
pub const GL_PRIMITIVE_RESTART = 0x8F9D;
pub const GL_SIGNED_NORMALIZED = 0x8F9C;
pub const GL_RGBA16_SNORM = 0x8F9B;
pub const GL_RGB16_SNORM = 0x8F9A;
pub const GL_RG16_SNORM = 0x8F99;
pub const GL_R16_SNORM = 0x8F98;
pub const GL_RGBA8_SNORM = 0x8F97;
pub const GL_RGB8_SNORM = 0x8F96;
pub const GL_RG8_SNORM = 0x8F95;
pub const GL_R8_SNORM = 0x8F94;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
pub const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
pub const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
pub const GL_TEXTURE_RECTANGLE = 0x84F5;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
pub const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
pub const GL_TEXTURE_BUFFER = 0x8C2A;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
pub const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
pub const GL_SAMPLER_BUFFER = 0x8DC2;
pub const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
pub const GL_SAMPLER_2D_RECT = 0x8B63;
pub const GL_SHADER_TYPE = 0x8B4F;
pub const GL_FLOAT_VEC2 = 0x8B50;
pub const GL_FLOAT_VEC3 = 0x8B51;
pub const GL_VERTEX_ARRAY_BINDING = 0x85B5;
pub const GL_RG32UI = 0x823C;
pub const GL_RG32I = 0x823B;
pub const GL_RG16UI = 0x823A;
pub const GL_RG16I = 0x8239;
pub const GL_RG8UI = 0x8238;
pub const GL_RG8I = 0x8237;
pub const GL_R32UI = 0x8236;
pub const GL_R32I = 0x8235;
pub const GL_R16UI = 0x8234;
pub const GL_R16I = 0x8233;
pub const GL_R8UI = 0x8232;
pub const GL_R8I = 0x8231;
pub const GL_RG32F = 0x8230;
pub const GL_RG16F = 0x822F;
pub const GL_R32F = 0x822E;
pub const GL_R16F = 0x822D;
pub const GL_RG16 = 0x822C;
pub const GL_RG8 = 0x822B;
pub const GL_R16 = 0x822A;
pub const GL_R8 = 0x8229;
pub const GL_RG_INTEGER = 0x8228;
pub const GL_RG = 0x8227;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
pub const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
pub const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
pub const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
pub const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
pub const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
pub const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
pub const GL_MAP_WRITE_BIT = 0x0002;
pub const GL_MAP_READ_BIT = 0x0001;
pub const GL_HALF_FLOAT = 0x140B;
pub const GL_FRAMEBUFFER_SRGB = 0x8DB9;
pub const GL_MAX_VARYING_FLOATS = 0x8B4B;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
pub const GL_MAX_SAMPLES = 0x8D57;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
pub const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
pub const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
pub const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
pub const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
pub const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
pub const GL_STENCIL_INDEX16 = 0x8D49;
pub const GL_STENCIL_INDEX8 = 0x8D48;
pub const GL_STENCIL_INDEX4 = 0x8D47;
pub const GL_STENCIL_INDEX1 = 0x8D46;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
pub const GL_RENDERBUFFER_HEIGHT = 0x8D43;
pub const GL_RENDERBUFFER_WIDTH = 0x8D42;
pub const GL_RENDERBUFFER = 0x8D41;
pub const GL_FRAMEBUFFER = 0x8D40;
pub const GL_STENCIL_ATTACHMENT = 0x8D20;
pub const GL_DEPTH_ATTACHMENT = 0x8D00;
pub const GL_COLOR_ATTACHMENT31 = 0x8CFF;
pub const GL_COLOR_ATTACHMENT30 = 0x8CFE;
pub const GL_COLOR_ATTACHMENT29 = 0x8CFD;
pub const GL_COLOR_ATTACHMENT28 = 0x8CFC;
pub const GL_COLOR_ATTACHMENT27 = 0x8CFB;
pub const GL_COLOR_ATTACHMENT26 = 0x8CFA;
pub const GL_COLOR_ATTACHMENT25 = 0x8CF9;
pub const GL_COLOR_ATTACHMENT24 = 0x8CF8;
pub const GL_COLOR_ATTACHMENT23 = 0x8CF7;
pub const GL_COLOR_ATTACHMENT22 = 0x8CF6;
pub const GL_COLOR_ATTACHMENT21 = 0x8CF5;
pub const GL_COLOR_ATTACHMENT20 = 0x8CF4;
pub const GL_COLOR_ATTACHMENT19 = 0x8CF3;
pub const GL_COLOR_ATTACHMENT18 = 0x8CF2;
pub const GL_COLOR_ATTACHMENT17 = 0x8CF1;
pub const GL_COLOR_ATTACHMENT16 = 0x8CF0;
pub const GL_COLOR_ATTACHMENT15 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT14 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT13 = 0x8CED;
pub const GL_COLOR_ATTACHMENT12 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT11 = 0x8CEB;
pub const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
pub const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
pub const GL_FRAMEBUFFER_BINDING = 0x8CA6;
pub const GL_UNSIGNED_NORMALIZED = 0x8C17;
pub const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
pub const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
pub const GL_TEXTURE_BLUE_TYPE = 0x8C12;
pub const GL_TEXTURE_GREEN_TYPE = 0x8C11;
pub const GL_TEXTURE_RED_TYPE = 0x8C10;
pub const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
pub const GL_DEPTH24_STENCIL8 = 0x88F0;
pub const GL_UNSIGNED_INT_24_8 = 0x84FA;
pub const GL_DEPTH_STENCIL = 0x84F9;
pub const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
pub const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
pub const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
pub const GL_FRAMEBUFFER_DEFAULT = 0x8218;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
pub const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
pub const GL_DEPTH32F_STENCIL8 = 0x8CAD;
pub const GL_DEPTH_COMPONENT32F = 0x8CAC;
pub const GL_BUFFER_MAP_OFFSET = 0x9121;
pub const GL_BUFFER_MAP_LENGTH = 0x9120;
pub const GL_BUFFER_ACCESS_FLAGS = 0x911F;
pub const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
pub const GL_QUERY_BY_REGION_WAIT = 0x8E15;
pub const GL_QUERY_NO_WAIT = 0x8E14;
pub const GL_QUERY_WAIT = 0x8E13;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
pub const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
pub const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
pub const GL_INT_SAMPLER_CUBE = 0x8DCC;
pub const GL_INT_SAMPLER_3D = 0x8DCB;
pub const GL_INT_SAMPLER_2D = 0x8DCA;
pub const GL_INT_SAMPLER_1D = 0x8DC9;
pub const GL_RASTERIZER_DISCARD = 0x8C89;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
pub const GL_PRIMITIVES_GENERATED = 0x8C87;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
pub const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
pub const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
pub const GL_RGB9_E5 = 0x8C3D;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
pub const GL_R11F_G11F_B10F = 0x8C3A;
pub const GL_COLOR_LOGIC_OP = 0x0BF2;
pub const GL_POLYGON_OFFSET_UNITS = 0x2A00;
pub const GL_POLYGON_OFFSET_POINT = 0x2A01;
pub const GL_POLYGON_OFFSET_LINE = 0x2A02;
pub const GL_POLYGON_OFFSET_FILL = 0x8037;
pub const GL_POLYGON_OFFSET_FACTOR = 0x8038;
pub const GL_TEXTURE_BINDING_1D = 0x8068;
pub const GL_TEXTURE_BINDING_2D = 0x8069;
pub const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
pub const GL_TEXTURE_RED_SIZE = 0x805C;
pub const GL_TEXTURE_GREEN_SIZE = 0x805D;
pub const GL_TEXTURE_BLUE_SIZE = 0x805E;
pub const GL_TEXTURE_ALPHA_SIZE = 0x805F;
pub const GL_DOUBLE = 0x140A;
pub const GL_PROXY_TEXTURE_1D = 0x8063;
pub const GL_PROXY_TEXTURE_2D = 0x8064;
pub const GL_R3_G3_B2 = 0x2A10;
pub const GL_RGB4 = 0x804F;
pub const GL_RGB5 = 0x8050;
pub const GL_RGB8 = 0x8051;
pub const GL_RGB10 = 0x8052;
pub const GL_RGB12 = 0x8053;
pub const GL_RGB16 = 0x8054;
pub const GL_RGBA2 = 0x8055;
pub const GL_RGBA4 = 0x8056;
pub const GL_RGB5_A1 = 0x8057;
pub const GL_RGBA8 = 0x8058;
pub const GL_RGB10_A2 = 0x8059;
pub const GL_RGBA12 = 0x805A;
pub const GL_RGBA16 = 0x805B;
pub const GL_SAMPLE_MASK_VALUE = 0x8E52;
pub const GL_SAMPLE_MASK = 0x8E51;
pub const GL_SAMPLE_POSITION = 0x8E50;
pub const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
pub const GL_INVALID_INDEX = 0xFFFFFFFF;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
pub const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
pub const GL_INT_SAMPLER_BUFFER = 0x8DD0;
pub const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
pub const GL_COLOR_ATTACHMENT10 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT9 = 0x8CE9;
pub const GL_COLOR_ATTACHMENT8 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT7 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT6 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT5 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT4 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT3 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT2 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT1 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT0 = 0x8CE0;
pub const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
pub const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
pub const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
pub const GL_DRAW_FRAMEBUFFER = 0x8CA9;
pub const GL_READ_FRAMEBUFFER = 0x8CA8;
pub const GL_RENDERBUFFER_BINDING = 0x8CA7;
pub const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
pub const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
pub const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
pub const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
pub const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
pub const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
pub const GL_SAMPLER_2D_ARRAY = 0x8DC1;
pub const GL_SAMPLER_1D_ARRAY = 0x8DC0;
pub const GL_BGRA_INTEGER = 0x8D9B;
pub const GL_BGR_INTEGER = 0x8D9A;
pub const GL_RGBA_INTEGER = 0x8D99;
pub const GL_RGB_INTEGER = 0x8D98;
pub const GL_BLUE_INTEGER = 0x8D96;
pub const GL_GREEN_INTEGER = 0x8D95;
pub const GL_RED_INTEGER = 0x8D94;
pub const GL_RGB8I = 0x8D8F;
pub const GL_RGBA8I = 0x8D8E;
pub const GL_RGB16I = 0x8D89;
pub const GL_RGBA16I = 0x8D88;
pub const GL_RGB32I = 0x8D83;
pub const GL_RGBA32I = 0x8D82;
pub const GL_RGB8UI = 0x8D7D;
pub const GL_RGBA8UI = 0x8D7C;
pub const GL_RGB16UI = 0x8D77;
pub const GL_RGBA16UI = 0x8D76;
pub const GL_RGB32UI = 0x8D71;
pub const GL_RGBA32UI = 0x8D70;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
pub const GL_SEPARATE_ATTRIBS = 0x8C8D;
pub const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
pub const GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
pub const GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
pub const GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
pub const GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
pub const GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
pub const GL_TEXTURE_BINDING_3D = 0x806A;
pub const GL_PACK_SKIP_IMAGES = 0x806B;
pub const GL_PACK_IMAGE_HEIGHT = 0x806C;
pub const GL_UNPACK_SKIP_IMAGES = 0x806D;
pub const GL_UNPACK_IMAGE_HEIGHT = 0x806E;
pub const GL_TEXTURE_3D = 0x806F;
pub const GL_PROXY_TEXTURE_3D = 0x8070;
pub const GL_TEXTURE_DEPTH = 0x8071;
pub const GL_TEXTURE_WRAP_R = 0x8072;
pub const GL_MAX_3D_TEXTURE_SIZE = 0x8073;
pub const GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
pub const GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
pub const GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
pub const GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
pub const GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
pub const GL_BGR = 0x80E0;
pub const GL_BGRA = 0x80E1;
pub const GL_MAX_ELEMENTS_VERTICES = 0x80E8;
pub const GL_MAX_ELEMENTS_INDICES = 0x80E9;
pub const GL_CLAMP_TO_EDGE = 0x812F;
pub const GL_TEXTURE_MIN_LOD = 0x813A;
pub const GL_TEXTURE_MAX_LOD = 0x813B;
pub const GL_TEXTURE_BASE_LEVEL = 0x813C;
pub const GL_TEXTURE_MAX_LEVEL = 0x813D;
pub const GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
pub const GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
pub const GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
pub const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
pub const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
pub const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
pub const GL_TEXTURE_2D_ARRAY = 0x8C1A;
pub const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
pub const GL_TEXTURE0 = 0x84C0;
pub const GL_TEXTURE1 = 0x84C1;
pub const GL_TEXTURE2 = 0x84C2;
pub const GL_TEXTURE3 = 0x84C3;
pub const GL_TEXTURE4 = 0x84C4;
pub const GL_TEXTURE5 = 0x84C5;
pub const GL_TEXTURE6 = 0x84C6;
pub const GL_TEXTURE7 = 0x84C7;
pub const GL_TEXTURE8 = 0x84C8;
pub const GL_TEXTURE9 = 0x84C9;
pub const GL_TEXTURE10 = 0x84CA;
pub const GL_TEXTURE11 = 0x84CB;
pub const GL_TEXTURE12 = 0x84CC;
pub const GL_TEXTURE13 = 0x84CD;
pub const GL_TEXTURE14 = 0x84CE;
pub const GL_TEXTURE15 = 0x84CF;
pub const GL_TEXTURE16 = 0x84D0;
pub const GL_TEXTURE17 = 0x84D1;
pub const GL_TEXTURE18 = 0x84D2;
pub const GL_TEXTURE19 = 0x84D3;
pub const GL_TEXTURE20 = 0x84D4;
pub const GL_TEXTURE21 = 0x84D5;
pub const GL_TEXTURE22 = 0x84D6;
pub const GL_TEXTURE23 = 0x84D7;
pub const GL_TEXTURE24 = 0x84D8;
pub const GL_TEXTURE25 = 0x84D9;
pub const GL_TEXTURE26 = 0x84DA;
pub const GL_TEXTURE27 = 0x84DB;
pub const GL_TEXTURE28 = 0x84DC;
pub const GL_TEXTURE29 = 0x84DD;
pub const GL_TEXTURE30 = 0x84DE;
pub const GL_TEXTURE31 = 0x84DF;
pub const GL_ACTIVE_TEXTURE = 0x84E0;
pub const GL_MULTISAMPLE = 0x809D;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
pub const GL_SAMPLE_COVERAGE = 0x80A0;
pub const GL_SAMPLE_BUFFERS = 0x80A8;
pub const GL_SAMPLES = 0x80A9;
pub const GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
pub const GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
pub const GL_TEXTURE_CUBE_MAP = 0x8513;
pub const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
pub const GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
pub const GL_COMPRESSED_RGB = 0x84ED;
pub const GL_COMPRESSED_RGBA = 0x84EE;
pub const GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
pub const GL_TEXTURE_COMPRESSED = 0x86A1;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
pub const GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
pub const GL_CLAMP_TO_BORDER = 0x812D;
pub const GL_TEXTURE_1D_ARRAY = 0x8C18;
pub const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
pub const GL_FIXED_ONLY = 0x891D;
pub const GL_CLAMP_READ_COLOR = 0x891C;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
pub const GL_RGB16F = 0x881B;
pub const GL_RGBA16F = 0x881A;
pub const GL_RGB32F = 0x8815;
pub const GL_RGBA32F = 0x8814;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
pub const GL_COMPRESSED_RG = 0x8226;
pub const GL_COMPRESSED_RED = 0x8225;
pub const GL_CONTEXT_FLAGS = 0x821E;
pub const GL_NUM_EXTENSIONS = 0x821D;
pub const GL_MINOR_VERSION = 0x821C;
pub const GL_MAJOR_VERSION = 0x821B;
pub const GL_MAX_CLIP_DISTANCES = 0x0D32;
pub const GL_CLIP_DISTANCE7 = 0x3007;
pub const GL_CLIP_DISTANCE6 = 0x3006;
pub const GL_CLIP_DISTANCE5 = 0x3005;
pub const GL_CLIP_DISTANCE4 = 0x3004;
pub const GL_CLIP_DISTANCE3 = 0x3003;
pub const GL_CLIP_DISTANCE2 = 0x3002;
pub const GL_CLIP_DISTANCE1 = 0x3001;
pub const GL_CLIP_DISTANCE0 = 0x3000;
pub const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
pub const GL_FLOAT_VEC4 = 0x8B52;
pub const GL_INT_VEC2 = 0x8B53;
pub const GL_INT_VEC3 = 0x8B54;
pub const GL_INT_VEC4 = 0x8B55;
pub const GL_BOOL = 0x8B56;
pub const GL_BOOL_VEC2 = 0x8B57;
pub const GL_BOOL_VEC3 = 0x8B58;
pub const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
pub const GL_BLEND_DST_RGB = 0x80C8;
pub const GL_BLEND_SRC_RGB = 0x80C9;
pub const GL_BLEND_DST_ALPHA = 0x80CA;
pub const GL_BLEND_SRC_ALPHA = 0x80CB;
pub const GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
pub const GL_DEPTH_COMPONENT16 = 0x81A5;
pub const GL_DEPTH_COMPONENT24 = 0x81A6;
pub const GL_DEPTH_COMPONENT32 = 0x81A7;
pub const GL_MIRRORED_REPEAT = 0x8370;
pub const GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
pub const GL_TEXTURE_LOD_BIAS = 0x8501;
pub const GL_INCR_WRAP = 0x8507;
pub const GL_DECR_WRAP = 0x8508;
pub const GL_TEXTURE_DEPTH_SIZE = 0x884A;
pub const GL_TEXTURE_COMPARE_MODE = 0x884C;
pub const GL_TEXTURE_COMPARE_FUNC = 0x884D;
pub const GL_COMPRESSED_SRGB = 0x8C48;
pub const GL_SRGB8_ALPHA8 = 0x8C43;
pub const GL_SRGB_ALPHA = 0x8C42;
pub const GL_SRGB8 = 0x8C41;
pub const GL_SRGB = 0x8C40;
pub const GL_FLOAT_MAT4x3 = 0x8B6A;
pub const GL_FLOAT_MAT4x2 = 0x8B69;
pub const GL_FLOAT_MAT3x4 = 0x8B68;
pub const GL_FLOAT_MAT3x2 = 0x8B67;
pub const GL_FLOAT_MAT2x4 = 0x8B66;
pub const GL_FLOAT_MAT2x3 = 0x8B65;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
pub const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
pub const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
pub const GL_PIXEL_PACK_BUFFER = 0x88EB;
pub const GL_BOOL_VEC4 = 0x8B59;
pub const GL_FLOAT_MAT2 = 0x8B5A;
pub const GL_FLOAT_MAT3 = 0x8B5B;
pub const GL_FLOAT_MAT4 = 0x8B5C;
pub const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
pub const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
pub const GL_STENCIL_BACK_REF = 0x8CA3;
pub const GL_UPPER_LEFT = 0x8CA2;
pub const GL_BLEND_COLOR = 0x8005;
pub const GL_BLEND_EQUATION = 0x8009;
pub const GL_CONSTANT_COLOR = 0x8001;
pub const GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
pub const GL_CONSTANT_ALPHA = 0x8003;
pub const GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
pub const GL_FUNC_ADD = 0x8006;
pub const GL_FUNC_REVERSE_SUBTRACT = 0x800B;
pub const GL_FUNC_SUBTRACT = 0x800A;
pub const GL_MIN = 0x8007;
pub const GL_MAX = 0x8008;
pub const GL_BUFFER_SIZE = 0x8764;
pub const GL_BUFFER_USAGE = 0x8765;
pub const GL_QUERY_COUNTER_BITS = 0x8864;
pub const GL_CURRENT_QUERY = 0x8865;
pub const GL_QUERY_RESULT = 0x8866;
pub const GL_QUERY_RESULT_AVAILABLE = 0x8867;
pub const GL_ARRAY_BUFFER = 0x8892;
pub const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
pub const GL_ARRAY_BUFFER_BINDING = 0x8894;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
pub const GL_READ_ONLY = 0x88B8;
pub const GL_WRITE_ONLY = 0x88B9;
pub const GL_READ_WRITE = 0x88BA;
pub const GL_BUFFER_ACCESS = 0x88BB;
pub const GL_BUFFER_MAPPED = 0x88BC;
pub const GL_BUFFER_MAP_POINTER = 0x88BD;
pub const GL_STREAM_DRAW = 0x88E0;
pub const GL_STREAM_READ = 0x88E1;
pub const GL_STREAM_COPY = 0x88E2;
pub const GL_STATIC_DRAW = 0x88E4;
pub const GL_STATIC_READ = 0x88E5;
pub const GL_STATIC_COPY = 0x88E6;
pub const GL_DYNAMIC_DRAW = 0x88E8;
pub const GL_DYNAMIC_READ = 0x88E9;
pub const GL_DYNAMIC_COPY = 0x88EA;
pub const GL_SAMPLES_PASSED = 0x8914;
pub const GL_SRC1_ALPHA = 0x8589;
pub const GL_LOWER_LEFT = 0x8CA1;
pub const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
pub const GL_CURRENT_PROGRAM = 0x8B8D;
pub const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
pub const GL_ACTIVE_ATTRIBUTES = 0x8B89;
pub const GL_SHADER_SOURCE_LENGTH = 0x8B88;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
pub const GL_ACTIVE_UNIFORMS = 0x8B86;
pub const GL_ATTACHED_SHADERS = 0x8B85;
pub const GL_INFO_LOG_LENGTH = 0x8B84;
pub const GL_VALIDATE_STATUS = 0x8B83;
pub const GL_LINK_STATUS = 0x8B82;
pub const GL_COMPILE_STATUS = 0x8B81;
pub const GL_DELETE_STATUS = 0x8B80;
pub const GL_SAMPLER_2D_SHADOW = 0x8B62;
pub const GL_SAMPLER_1D_SHADOW = 0x8B61;
pub const GL_SAMPLER_CUBE = 0x8B60;
pub const GL_SAMPLER_3D = 0x8B5F;
pub const GL_SAMPLER_2D = 0x8B5E;
pub const GL_SAMPLER_1D = 0x8B5D;
pub const GL_BLEND_EQUATION_RGB = 0x8009;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
pub const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
pub const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
pub const GL_STENCIL_BACK_FUNC = 0x8800;
pub const GL_STENCIL_BACK_FAIL = 0x8801;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
pub const GL_MAX_DRAW_BUFFERS = 0x8824;
pub const GL_DRAW_BUFFER0 = 0x8825;
pub const GL_DRAW_BUFFER1 = 0x8826;
pub const GL_DRAW_BUFFER2 = 0x8827;
pub const GL_DRAW_BUFFER3 = 0x8828;
pub const GL_DRAW_BUFFER4 = 0x8829;
pub const GL_DRAW_BUFFER5 = 0x882A;
pub const GL_DRAW_BUFFER6 = 0x882B;
pub const GL_DRAW_BUFFER7 = 0x882C;
pub const GL_DRAW_BUFFER8 = 0x882D;
pub const GL_DRAW_BUFFER9 = 0x882E;
pub const GL_DRAW_BUFFER10 = 0x882F;
pub const GL_DRAW_BUFFER11 = 0x8830;
pub const GL_DRAW_BUFFER12 = 0x8831;
pub const GL_DRAW_BUFFER13 = 0x8832;
pub const GL_DRAW_BUFFER14 = 0x8833;
pub const GL_DRAW_BUFFER15 = 0x8834;
pub const GL_BLEND_EQUATION_ALPHA = 0x883D;
pub const GL_MAX_VERTEX_ATTRIBS = 0x8869;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
pub const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
pub const GL_FRAGMENT_SHADER = 0x8B30;
pub const GL_VERTEX_SHADER = 0x8B31;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
pub const GL_SRC1_COLOR = 0x88F9;
pub const GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
pub const GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
pub const GL_ANY_SAMPLES_PASSED = 0x8C2F;
pub const GL_SAMPLER_BINDING = 0x8919;
pub const GL_RGB10_A2UI = 0x906F;
pub const GL_TEXTURE_SWIZZLE_R = 0x8E42;
pub const GL_TEXTURE_SWIZZLE_G = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_B = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_A = 0x8E45;
pub const GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
pub const GL_TIME_ELAPSED = 0x88BF;
pub const GL_TIMESTAMP = 0x8E28;
pub const GL_INT_2_10_10_10_REV = 0x8D9F;
pub const GL_SAMPLE_SHADING = 0x8C36;
pub const GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
pub const GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
pub const GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
pub const GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
pub const GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
pub const GL_MAX_VERTEX_STREAMS = 0x8E71;
pub const GL_DOUBLE_VEC2 = 0x8FFC;
pub const GL_DOUBLE_VEC3 = 0x8FFD;
pub const GL_DOUBLE_VEC4 = 0x8FFE;
pub const GL_DOUBLE_MAT2 = 0x8F46;
pub const GL_DOUBLE_MAT3 = 0x8F47;
pub const GL_DOUBLE_MAT4 = 0x8F48;
pub const GL_DOUBLE_MAT2x3 = 0x8F49;
pub const GL_DOUBLE_MAT2x4 = 0x8F4A;
pub const GL_DOUBLE_MAT3x2 = 0x8F4B;
pub const GL_DOUBLE_MAT3x4 = 0x8F4C;
pub const GL_DOUBLE_MAT4x2 = 0x8F4D;
pub const GL_DOUBLE_MAT4x3 = 0x8F4E;
pub const GL_ACTIVE_SUBROUTINES = 0x8DE5;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
pub const GL_MAX_SUBROUTINES = 0x8DE7;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
pub const GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
pub const GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
pub const GL_PATCHES = 0x000E;
pub const GL_PATCH_VERTICES = 0x8E72;
pub const GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
pub const GL_TESS_GEN_MODE = 0x8E76;
pub const GL_TESS_GEN_SPACING = 0x8E77;
pub const GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
pub const GL_TESS_GEN_POINT_MODE = 0x8E79;
pub const GL_ISOLINES = 0x8E7A;
pub const GL_QUADS = 0x0007;
pub const GL_FRACTIONAL_ODD = 0x8E7B;
pub const GL_FRACTIONAL_EVEN = 0x8E7C;
pub const GL_MAX_PATCH_VERTICES = 0x8E7D;
pub const GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
pub const GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
pub const GL_TESS_EVALUATION_SHADER = 0x8E87;
pub const GL_TESS_CONTROL_SHADER = 0x8E88;
pub const GL_TRANSFORM_FEEDBACK = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
pub const GL_MAX_VERTEX_STREAMS = 0x8E71;
pub const GL_FIXED = 0x140C;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
pub const GL_LOW_FLOAT = 0x8DF0;
pub const GL_MEDIUM_FLOAT = 0x8DF1;
pub const GL_HIGH_FLOAT = 0x8DF2;
pub const GL_LOW_INT = 0x8DF3;
pub const GL_MEDIUM_INT = 0x8DF4;
pub const GL_HIGH_INT = 0x8DF5;
pub const GL_SHADER_COMPILER = 0x8DFA;
pub const GL_SHADER_BINARY_FORMATS = 0x8DF8;
pub const GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
pub const GL_MAX_VARYING_VECTORS = 0x8DFC;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
pub const GL_RGB565 = 0x8D62;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
pub const GL_PROGRAM_BINARY_LENGTH = 0x8741;
pub const GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
pub const GL_PROGRAM_BINARY_FORMATS = 0x87FF;
pub const GL_VERTEX_SHADER_BIT = 0x00000001;
pub const GL_FRAGMENT_SHADER_BIT = 0x00000002;
pub const GL_GEOMETRY_SHADER_BIT = 0x00000004;
pub const GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
pub const GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
pub const GL_ALL_SHADER_BITS = 0xFFFFFFFF;
pub const GL_PROGRAM_SEPARABLE = 0x8258;
pub const GL_ACTIVE_PROGRAM = 0x8259;
pub const GL_PROGRAM_PIPELINE_BINDING = 0x825A;
pub const GL_MAX_VIEWPORTS = 0x825B;
pub const GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
pub const GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
pub const GL_LAYER_PROVOKING_VERTEX = 0x825E;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
pub const GL_UNDEFINED_VERTEX = 0x8260;
pub const GL_COPY_READ_BUFFER_BINDING = 0x8F36;
pub const GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
pub const GL_NUM_SAMPLE_COUNTS = 0x9380;
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
pub const GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
pub const GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
pub const GL_UNIFORM_BARRIER_BIT = 0x00000004;
pub const GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
pub const GL_COMMAND_BARRIER_BIT = 0x00000040;
pub const GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
pub const GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
pub const GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
pub const GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
pub const GL_MAX_IMAGE_UNITS = 0x8F38;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
pub const GL_IMAGE_BINDING_NAME = 0x8F3A;
pub const GL_IMAGE_BINDING_LEVEL = 0x8F3B;
pub const GL_IMAGE_BINDING_LAYERED = 0x8F3C;
pub const GL_IMAGE_BINDING_LAYER = 0x8F3D;
pub const GL_IMAGE_BINDING_ACCESS = 0x8F3E;
pub const GL_IMAGE_1D = 0x904C;
pub const GL_IMAGE_2D = 0x904D;
pub const GL_IMAGE_3D = 0x904E;
pub const GL_IMAGE_2D_RECT = 0x904F;
pub const GL_IMAGE_CUBE = 0x9050;
pub const GL_IMAGE_BUFFER = 0x9051;
pub const GL_IMAGE_1D_ARRAY = 0x9052;
pub const GL_IMAGE_2D_ARRAY = 0x9053;
pub const GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
pub const GL_IMAGE_2D_MULTISAMPLE = 0x9055;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
pub const GL_INT_IMAGE_1D = 0x9057;
pub const GL_INT_IMAGE_2D = 0x9058;
pub const GL_INT_IMAGE_3D = 0x9059;
pub const GL_INT_IMAGE_2D_RECT = 0x905A;
pub const GL_INT_IMAGE_CUBE = 0x905B;
pub const GL_INT_IMAGE_BUFFER = 0x905C;
pub const GL_INT_IMAGE_1D_ARRAY = 0x905D;
pub const GL_INT_IMAGE_2D_ARRAY = 0x905E;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
pub const GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
pub const GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
pub const GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
pub const GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
pub const GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
pub const GL_MAX_IMAGE_SAMPLES = 0x906D;
pub const GL_IMAGE_BINDING_FORMAT = 0x906E;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
pub const GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
pub const GL_COMPRESSED_RGB8_ETC2 = 0x9274;
pub const GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
pub const GL_COMPRESSED_R11_EAC = 0x9270;
pub const GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
pub const GL_COMPRESSED_RG11_EAC = 0x9272;
pub const GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
pub const GL_MAX_ELEMENT_INDEX = 0x8D6B;
pub const GL_COMPUTE_SHADER = 0x91B9;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
pub const GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
pub const GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
pub const GL_COMPUTE_SHADER_BIT = 0x00000020;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
pub const GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
pub const GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
pub const GL_DEBUG_SOURCE_API = 0x8246;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
pub const GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
pub const GL_DEBUG_SOURCE_APPLICATION = 0x824A;
pub const GL_DEBUG_SOURCE_OTHER = 0x824B;
pub const GL_DEBUG_TYPE_ERROR = 0x824C;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
pub const GL_DEBUG_TYPE_PORTABILITY = 0x824F;
pub const GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
pub const GL_DEBUG_TYPE_OTHER = 0x8251;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
pub const GL_DEBUG_LOGGED_MESSAGES = 0x9145;
pub const GL_DEBUG_SEVERITY_HIGH = 0x9146;
pub const GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
pub const GL_DEBUG_SEVERITY_LOW = 0x9148;
pub const GL_DEBUG_TYPE_MARKER = 0x8268;
pub const GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
pub const GL_DEBUG_TYPE_POP_GROUP = 0x826A;
pub const GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
pub const GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
pub const GL_BUFFER = 0x82E0;
pub const GL_SHADER = 0x82E1;
pub const GL_PROGRAM = 0x82E2;
pub const GL_VERTEX_ARRAY = 0x8074;
pub const GL_QUERY = 0x82E3;
pub const GL_PROGRAM_PIPELINE = 0x82E4;
pub const GL_SAMPLER = 0x82E6;
pub const GL_MAX_LABEL_LENGTH = 0x82E8;
pub const GL_DEBUG_OUTPUT = 0x92E0;
pub const GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
pub const GL_MAX_UNIFORM_LOCATIONS = 0x826E;
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
pub const GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
pub const GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
pub const GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
pub const GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
pub const GL_INTERNALFORMAT_SUPPORTED = 0x826F;
pub const GL_INTERNALFORMAT_PREFERRED = 0x8270;
pub const GL_INTERNALFORMAT_RED_SIZE = 0x8271;
pub const GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
pub const GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
pub const GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
pub const GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
pub const GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
pub const GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
pub const GL_INTERNALFORMAT_RED_TYPE = 0x8278;
pub const GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
pub const GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
pub const GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
pub const GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
pub const GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
pub const GL_MAX_WIDTH = 0x827E;
pub const GL_MAX_HEIGHT = 0x827F;
pub const GL_MAX_DEPTH = 0x8280;
pub const GL_MAX_LAYERS = 0x8281;
pub const GL_MAX_COMBINED_DIMENSIONS = 0x8282;
pub const GL_COLOR_COMPONENTS = 0x8283;
pub const GL_DEPTH_COMPONENTS = 0x8284;
pub const GL_STENCIL_COMPONENTS = 0x8285;
pub const GL_COLOR_RENDERABLE = 0x8286;
pub const GL_DEPTH_RENDERABLE = 0x8287;
pub const GL_STENCIL_RENDERABLE = 0x8288;
pub const GL_FRAMEBUFFER_RENDERABLE = 0x8289;
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
pub const GL_FRAMEBUFFER_BLEND = 0x828B;
pub const GL_READ_PIXELS = 0x828C;
pub const GL_READ_PIXELS_FORMAT = 0x828D;
pub const GL_READ_PIXELS_TYPE = 0x828E;
pub const GL_TEXTURE_IMAGE_FORMAT = 0x828F;
pub const GL_TEXTURE_IMAGE_TYPE = 0x8290;
pub const GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
pub const GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
pub const GL_MIPMAP = 0x8293;
pub const GL_MANUAL_GENERATE_MIPMAP = 0x8294;
pub const GL_AUTO_GENERATE_MIPMAP = 0x8295;
pub const GL_COLOR_ENCODING = 0x8296;
pub const GL_SRGB_READ = 0x8297;
pub const GL_SRGB_WRITE = 0x8298;
pub const GL_FILTER = 0x829A;
pub const GL_VERTEX_TEXTURE = 0x829B;
pub const GL_TESS_CONTROL_TEXTURE = 0x829C;
pub const GL_TESS_EVALUATION_TEXTURE = 0x829D;
pub const GL_GEOMETRY_TEXTURE = 0x829E;
pub const GL_FRAGMENT_TEXTURE = 0x829F;
pub const GL_COMPUTE_TEXTURE = 0x82A0;
pub const GL_TEXTURE_SHADOW = 0x82A1;
pub const GL_TEXTURE_GATHER = 0x82A2;
pub const GL_TEXTURE_GATHER_SHADOW = 0x82A3;
pub const GL_SHADER_IMAGE_LOAD = 0x82A4;
pub const GL_SHADER_IMAGE_STORE = 0x82A5;
pub const GL_SHADER_IMAGE_ATOMIC = 0x82A6;
pub const GL_IMAGE_TEXEL_SIZE = 0x82A7;
pub const GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
pub const GL_IMAGE_PIXEL_FORMAT = 0x82A9;
pub const GL_IMAGE_PIXEL_TYPE = 0x82AA;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
pub const GL_CLEAR_BUFFER = 0x82B4;
pub const GL_TEXTURE_VIEW = 0x82B5;
pub const GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
pub const GL_FULL_SUPPORT = 0x82B7;
pub const GL_CAVEAT_SUPPORT = 0x82B8;
pub const GL_IMAGE_CLASS_4_X_32 = 0x82B9;
pub const GL_IMAGE_CLASS_2_X_32 = 0x82BA;
pub const GL_IMAGE_CLASS_1_X_32 = 0x82BB;
pub const GL_IMAGE_CLASS_4_X_16 = 0x82BC;
pub const GL_IMAGE_CLASS_2_X_16 = 0x82BD;
pub const GL_IMAGE_CLASS_1_X_16 = 0x82BE;
pub const GL_IMAGE_CLASS_4_X_8 = 0x82BF;
pub const GL_IMAGE_CLASS_2_X_8 = 0x82C0;
pub const GL_IMAGE_CLASS_1_X_8 = 0x82C1;
pub const GL_IMAGE_CLASS_11_11_10 = 0x82C2;
pub const GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
pub const GL_VIEW_CLASS_128_BITS = 0x82C4;
pub const GL_VIEW_CLASS_96_BITS = 0x82C5;
pub const GL_VIEW_CLASS_64_BITS = 0x82C6;
pub const GL_VIEW_CLASS_48_BITS = 0x82C7;
pub const GL_VIEW_CLASS_32_BITS = 0x82C8;
pub const GL_VIEW_CLASS_24_BITS = 0x82C9;
pub const GL_VIEW_CLASS_16_BITS = 0x82CA;
pub const GL_VIEW_CLASS_8_BITS = 0x82CB;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
pub const GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
pub const GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
pub const GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
pub const GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
pub const GL_UNIFORM = 0x92E1;
pub const GL_UNIFORM_BLOCK = 0x92E2;
pub const GL_PROGRAM_INPUT = 0x92E3;
pub const GL_PROGRAM_OUTPUT = 0x92E4;
pub const GL_BUFFER_VARIABLE = 0x92E5;
pub const GL_SHADER_STORAGE_BLOCK = 0x92E6;
pub const GL_VERTEX_SUBROUTINE = 0x92E8;
pub const GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
pub const GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
pub const GL_GEOMETRY_SUBROUTINE = 0x92EB;
pub const GL_FRAGMENT_SUBROUTINE = 0x92EC;
pub const GL_COMPUTE_SUBROUTINE = 0x92ED;
pub const GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
pub const GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
pub const GL_ACTIVE_RESOURCES = 0x92F5;
pub const GL_MAX_NAME_LENGTH = 0x92F6;
pub const GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
pub const GL_NAME_LENGTH = 0x92F9;
pub const GL_TYPE = 0x92FA;
pub const GL_ARRAY_SIZE = 0x92FB;
pub const GL_OFFSET = 0x92FC;
pub const GL_BLOCK_INDEX = 0x92FD;
pub const GL_ARRAY_STRIDE = 0x92FE;
pub const GL_MATRIX_STRIDE = 0x92FF;
pub const GL_IS_ROW_MAJOR = 0x9300;
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
pub const GL_BUFFER_BINDING = 0x9302;
pub const GL_BUFFER_DATA_SIZE = 0x9303;
pub const GL_NUM_ACTIVE_VARIABLES = 0x9304;
pub const GL_ACTIVE_VARIABLES = 0x9305;
pub const GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
pub const GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
pub const GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
pub const GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
pub const GL_LOCATION = 0x930E;
pub const GL_LOCATION_INDEX = 0x930F;
pub const GL_IS_PER_PATCH = 0x92E7;
pub const GL_SHADER_STORAGE_BUFFER = 0x90D2;
pub const GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
pub const GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
pub const GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
pub const GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
pub const GL_TEXTURE_BUFFER_OFFSET = 0x919D;
pub const GL_TEXTURE_BUFFER_SIZE = 0x919E;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
pub const GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
pub const GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
pub const GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
pub const GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
pub const GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
pub const GL_VERTEX_ATTRIB_BINDING = 0x82D4;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
pub const GL_VERTEX_BINDING_DIVISOR = 0x82D6;
pub const GL_VERTEX_BINDING_OFFSET = 0x82D7;
pub const GL_VERTEX_BINDING_STRIDE = 0x82D8;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
pub const GL_VERTEX_BINDING_BUFFER = 0x8F4F;
pub const GL_STACK_UNDERFLOW = 0x0504;
pub const GL_STACK_OVERFLOW = 0x0503;
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
pub const GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
pub const GL_MAP_READ_BIT = 0x0001;
pub const GL_MAP_WRITE_BIT = 0x0002;
pub const GL_MAP_PERSISTENT_BIT = 0x0040;
pub const GL_MAP_COHERENT_BIT = 0x0080;
pub const GL_DYNAMIC_STORAGE_BIT = 0x0100;
pub const GL_CLIENT_STORAGE_BIT = 0x0200;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
pub const GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
pub const GL_BUFFER_STORAGE_FLAGS = 0x8220;
pub const GL_CLEAR_TEXTURE = 0x9365;
pub const GL_LOCATION_COMPONENT = 0x934A;
pub const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
pub const GL_QUERY_BUFFER = 0x9192;
pub const GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
pub const GL_QUERY_BUFFER_BINDING = 0x9193;
pub const GL_QUERY_RESULT_NO_WAIT = 0x9194;
pub const GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
pub const GL_STENCIL_INDEX = 0x1901;
pub const GL_STENCIL_INDEX8 = 0x8D48;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
pub const GL_CONTEXT_LOST = 0x0507;
pub const GL_LOWER_LEFT = 0x8CA1;
pub const GL_UPPER_LEFT = 0x8CA2;
pub const GL_NEGATIVE_ONE_TO_ONE = 0x935E;
pub const GL_ZERO_TO_ONE = 0x935F;
pub const GL_CLIP_ORIGIN = 0x935C;
pub const GL_CLIP_DEPTH_MODE = 0x935D;
pub const GL_QUERY_WAIT_INVERTED = 0x8E17;
pub const GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
pub const GL_MAX_CULL_DISTANCES = 0x82F9;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
pub const GL_TEXTURE_TARGET = 0x1006;
pub const GL_QUERY_TARGET = 0x82EA;
pub const GL_TEXTURE_BINDING_1D = 0x8068;
pub const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
pub const GL_TEXTURE_BINDING_2D = 0x8069;
pub const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
pub const GL_TEXTURE_BINDING_3D = 0x806A;
pub const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
pub const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
pub const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
pub const GL_BACK = 0x0405;
pub const GL_NO_ERROR = 0;
pub const GL_GUILTY_CONTEXT_RESET = 0x8253;
pub const GL_INNOCENT_CONTEXT_RESET = 0x8254;
pub const GL_UNKNOWN_CONTEXT_RESET = 0x8255;
pub const GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
pub const GL_LOSE_CONTEXT_ON_RESET = 0x8252;
pub const GL_NO_RESET_NOTIFICATION = 0x8261;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
pub const GL_CONTEXT_LOST = 0x0507;
pub const GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
pub const GL_NONE = 0;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
pub const GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
pub const GL_NONE = 0;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
pub const GL_SPIR_V_BINARY = 0x9552;
pub const GL_PARAMETER_BUFFER = 0x80EE;
pub const GL_PARAMETER_BUFFER_BINDING = 0x80EF;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
pub const GL_VERTICES_SUBMITTED = 0x82EE;
pub const GL_PRIMITIVES_SUBMITTED = 0x82EF;
pub const GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
pub const GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
pub const GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
pub const GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
pub const GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
pub const GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
pub const GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
pub const GL_SPIR_V_EXTENSIONS = 0x9553;
pub const GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
pub const GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
pub const glCullFace(mode: enum) void{
pub const glFrontFace(mode: enum) void{
pub const glHint(target: enum, mode: enum) void{
pub const glLineWidth(width: float) void{
pub const glPointSize(size: float) void{
pub const glPolygonMode(face: enum, mode: enum) void{
pub const glScissor(x: int, y: int, width: sizei, height: sizei) void{
pub const glTexParameterf(target: enum, pname: enum, param: float) void{
pub const glTexParameterfv(target: enum, pname: enum, params: float) void{
pub const glTexParameteri(target: enum, pname: enum, param: int) void{
pub const glTexParameteriv(target: enum, pname: enum, params: int) void{
pub const glTexImage1D(target: enum, level: int, internalformat: int, width: sizei, border: int, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glTexImage2D(target: enum, level: int, internalformat: int, width: sizei, height: sizei, border: int, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glDrawBuffer(buf: enum) void{
pub const glClear(mask: bitfield) void{
pub const glClearColor(red: float, green: float, blue: float, alpha: float) void{
pub const glClearStencil(s: int) void{
pub const glClearDepth(depth: double) void{
pub const glStencilMask(mask: uint) void{
pub const glColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean) void{
pub const glDepthMask(flag: boolean) void{
pub const glDisable(cap: enum) void{
pub const glEnable(cap: enum) void{
pub const glFinish(pub const glFlush(pub const glBlendFunc(sfactor: enum, dfactor: enum) void{
pub const glLogicOp(opcode: enum) void{
pub const glStencilFunc(func: enum, ref: int, mask: uint) void{
pub const glStencilOp(fail: enum, zfail: enum, zpass: enum) void{
pub const glDepthFunc(func: enum) void{
pub const glPixelStoref(pname: enum, param: float) void{
pub const glPixelStorei(pname: enum, param: int) void{
pub const glReadBuffer(src: enum) void{
pub const glReadPixels(x: int, y: int, width: sizei, height: sizei, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glGetBooleanv(pname: enum, data: boolean) void{
pub const glGetDoublev(pname: enum, data: double) void{
pub const glGetError(pub const glGetFloatv(pname: enum, data: float) void{
pub const glGetIntegerv(pname: enum, data: int) void{
pub const glGetString(name: enum) ubyte{
pub const glGetTexImage(target: enum, level: int, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glGetTexParameterfv(target: enum, pname: enum, params: float) void{
pub const glGetTexParameteriv(target: enum, pname: enum, params: int) void{
pub const glGetTexLevelParameterfv(target: enum, level: int, pname: enum, params: float) void{
pub const glGetTexLevelParameteriv(target: enum, level: int, pname: enum, params: int) void{
pub const glIsEnabled(cap: enum) boolean{
pub const glDepthRange(n: double, f: double) void{
pub const glViewport(x: int, y: int, width: sizei, height: sizei) void{
pub const glSampleMaski(maskNumber: uint, mask: bitfield) void{
pub const glGetMultisamplefv(pname: enum, index: uint, val: float) void{
pub const glTexImage3DMultisample(target: enum, samples: sizei, internalformat: enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) void{
pub const glTexImage2DMultisample(target: enum, samples: sizei, internalformat: enum, width: sizei, height: sizei, fixedsamplelocations: boolean) void{
pub const glFramebufferTexture(target: enum, attachment: enum, texture: uint, level: int) void{
pub const glGetBufferParameteri64v(target: enum, pname: enum, params: int64) void{
pub const glGetInteger64i_v(target: enum, index: uint, data: int64) void{
pub const glGetSynciv(sync: sync, pname: enum, count: sizei, length: sizei, values: int) void{
pub const glGetInteger64v(pname: enum, data: int64) void{
pub const glWaitSync(sync: sync, flags: bitfield, timeout: uint64) void{
pub const glClientWaitSync(sync: sync, flags: bitfield, timeout: uint64) enum{
pub const glDeleteSync(sync: sync) void{
pub const glIsSync(sync: sync) boolean{
pub const glFenceSync(condition: enum, flags: bitfield) sync{
pub const glProvokingVertex(mode: enum) void{
pub const glMultiDrawElementsBaseVertex(mode: enum, count: sizei, type: enum, indices: ?*const anyopaque, drawcount: sizei, basevertex: int) void{
pub const glDrawElementsInstancedBaseVertex(mode: enum, count: sizei, type: enum, indices: ?*const anyopaque, instancecount: sizei, basevertex: int) void{
pub const glDrawRangeElementsBaseVertex(mode: enum, start: uint, end: uint, count: sizei, type: enum, indices: ?*const anyopaque, basevertex: int) void{
pub const glDrawElementsBaseVertex(mode: enum, count: sizei, type: enum, indices: ?*const anyopaque, basevertex: int) void{
pub const glGetIntegeri_v(target: enum, index: uint, data: int) void{
pub const glBindBufferBase(target: enum, index: uint, buffer: uint) void{
pub const glBindBufferRange(target: enum, index: uint, buffer: uint, offset: intptr, size: sizeiptr) void{
pub const glUniformBlockBinding(program: uint, uniformBlockIndex: uint, uniformBlockBinding: uint) void{
pub const glGetActiveUniformBlockName(program: uint, uniformBlockIndex: uint, bufSize: sizei, length: sizei, uniformBlockName: char) void{
pub const glGetActiveUniformBlockiv(program: uint, uniformBlockIndex: uint, pname: enum, params: int) void{
pub const glGetUniformBlockIndex(program: uint, uniformBlockName: char) uint{
pub const glGetActiveUniformName(program: uint, uniformIndex: uint, bufSize: sizei, length: sizei, uniformName: char) void{
pub const glGetActiveUniformsiv(program: uint, uniformCount: sizei, uniformIndices: uint, pname: enum, params: int) void{
pub const glGetUniformIndices(program: uint, uniformCount: sizei, uniformNames: char, uniformIndices: uint) void{
pub const glCopyBufferSubData(readTarget: enum, writeTarget: enum, readOffset: intptr, writeOffset: intptr, size: sizeiptr) void{
pub const glPrimitiveRestartIndex(index: uint) void{
pub const glTexBuffer(target: enum, internalformat: enum, buffer: uint) void{
pub const glDrawElementsInstanced(mode: enum, count: sizei, type: enum, indices: ?*const anyopaque, instancecount: sizei) void{
pub const glDrawArraysInstanced(mode: enum, first: int, count: sizei, instancecount: sizei) void{
pub const glIsVertexArray(array: uint) boolean{
pub const glGenVertexArrays(n: sizei, arrays: uint) void{
pub const glDeleteVertexArrays(n: sizei, arrays: uint) void{
pub const glBindVertexArray(array: uint) void{
pub const glFlushMappedBufferRange(target: enum, offset: intptr, length: sizeiptr) void{
pub const glMapBufferRange(target: enum, offset: intptr, length: sizeiptr, access: bitfield) void{
pub const glFramebufferTextureLayer(target: enum, attachment: enum, texture: uint, level: int, layer: int) void{
pub const glRenderbufferStorageMultisample(target: enum, samples: sizei, internalformat: enum, width: sizei, height: sizei) void{
pub const glBlitFramebuffer(srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: enum) void{
pub const glGenerateMipmap(target: enum) void{
pub const glGetFramebufferAttachmentParameteriv(target: enum, attachment: enum, pname: enum, params: int) void{
pub const glFramebufferRenderbuffer(target: enum, attachment: enum, renderbuffertarget: enum, renderbuffer: uint) void{
pub const glFramebufferTexture3D(target: enum, attachment: enum, textarget: enum, texture: uint, level: int, zoffset: int) void{
pub const glFramebufferTexture2D(target: enum, attachment: enum, textarget: enum, texture: uint, level: int) void{
pub const glFramebufferTexture1D(target: enum, attachment: enum, textarget: enum, texture: uint, level: int) void{
pub const glCheckFramebufferStatus(target: enum) enum{
pub const glGenFramebuffers(n: sizei, framebuffers: uint) void{
pub const glDeleteFramebuffers(n: sizei, framebuffers: uint) void{
pub const glBindFramebuffer(target: enum, framebuffer: uint) void{
pub const glIsFramebuffer(framebuffer: uint) boolean{
pub const glGetRenderbufferParameteriv(target: enum, pname: enum, params: int) void{
pub const glRenderbufferStorage(target: enum, internalformat: enum, width: sizei, height: sizei) void{
pub const glGenRenderbuffers(n: sizei, renderbuffers: uint) void{
pub const glDeleteRenderbuffers(n: sizei, renderbuffers: uint) void{
pub const glBindRenderbuffer(target: enum, renderbuffer: uint) void{
pub const glIsRenderbuffer(renderbuffer: uint) boolean{
pub const glGetStringi(name: enum, index: uint) ubyte{
pub const glClearBufferfi(buffer: enum, drawbuffer: int, depth: float, stencil: int) void{
pub const glClearBufferfv(buffer: enum, drawbuffer: int, value: float) void{
pub const glClearBufferuiv(buffer: enum, drawbuffer: int, value: uint) void{
pub const glClearBufferiv(buffer: enum, drawbuffer: int, value: int) void{
pub const glGetTexParameterIuiv(target: enum, pname: enum, params: uint) void{
pub const glGetTexParameterIiv(target: enum, pname: enum, params: int) void{
pub const glTexParameterIuiv(target: enum, pname: enum, params: uint) void{
pub const glTexParameterIiv(target: enum, pname: enum, params: int) void{
pub const glUniform4uiv(location: int, count: sizei, value: uint) void{
pub const glUniform3uiv(location: int, count: sizei, value: uint) void{
pub const glUniform2uiv(location: int, count: sizei, value: uint) void{
pub const glUniform1uiv(location: int, count: sizei, value: uint) void{
pub const glUniform4ui(location: int, v0: uint, v1: uint, v2: uint, v3: uint) void{
pub const glUniform3ui(location: int, v0: uint, v1: uint, v2: uint) void{
pub const glUniform2ui(location: int, v0: uint, v1: uint) void{
pub const glUniform1ui(location: int, v0: uint) void{
pub const glGetFragDataLocation(program: uint, name: char) int{
pub const glBindFragDataLocation(program: uint, color: uint, name: char) void{
pub const glGetUniformuiv(program: uint, location: int, params: uint) void{
pub const glVertexAttribI4usv(index: uint, v: ushort) void{
pub const glVertexAttribI4ubv(index: uint, v: ubyte) void{
pub const glVertexAttribI4sv(index: uint, v: short) void{
pub const glVertexAttribI4bv(index: uint, v: byte) void{
pub const glVertexAttribI4uiv(index: uint, v: uint) void{
pub const glVertexAttribI3uiv(index: uint, v: uint) void{
pub const glVertexAttribI2uiv(index: uint, v: uint) void{
pub const glVertexAttribI1uiv(index: uint, v: uint) void{
pub const glVertexAttribI4iv(index: uint, v: int) void{
pub const glVertexAttribI3iv(index: uint, v: int) void{
pub const glVertexAttribI2iv(index: uint, v: int) void{
pub const glVertexAttribI1iv(index: uint, v: int) void{
pub const glVertexAttribI4ui(index: uint, x: uint, y: uint, z: uint, w: uint) void{
pub const glVertexAttribI3ui(index: uint, x: uint, y: uint, z: uint) void{
pub const glVertexAttribI2ui(index: uint, x: uint, y: uint) void{
pub const glVertexAttribI1ui(index: uint, x: uint) void{
pub const glVertexAttribI4i(index: uint, x: int, y: int, z: int, w: int) void{
pub const glVertexAttribI3i(index: uint, x: int, y: int, z: int) void{
pub const glVertexAttribI2i(index: uint, x: int, y: int) void{
pub const glVertexAttribI1i(index: uint, x: int) void{
pub const glGetVertexAttribIuiv(index: uint, pname: enum, params: uint) void{
pub const glGetVertexAttribIiv(index: uint, pname: enum, params: int) void{
pub const glVertexAttribIPointer(index: uint, size: int, type: enum, stride: sizei, pointer: ?*const anyopaque) void{
pub const glEndConditionalRender(pub const glBeginConditionalRender(id: uint, mode: enum) void{
pub const glClampColor(target: enum, clamp: enum) void{
pub const glGetTransformFeedbackVarying(program: uint, index: uint, bufSize: sizei, length: sizei, size: sizei, type: enum, name: char) void{
pub const glTransformFeedbackVaryings(program: uint, count: sizei, varyings: char, bufferMode: enum) void{
pub const glBindBufferBase(target: enum, index: uint, buffer: uint) void{
pub const glBindBufferRange(target: enum, index: uint, buffer: uint, offset: intptr, size: sizeiptr) void{
pub const glEndTransformFeedback(pub const glBeginTransformFeedback(primitiveMode: enum) void{
pub const glIsEnabledi(target: enum, index: uint) boolean{
pub const glDisablei(target: enum, index: uint) void{
pub const glEnablei(target: enum, index: uint) void{
pub const glGetIntegeri_v(target: enum, index: uint, data: int) void{
pub const glGetBooleani_v(target: enum, index: uint, data: boolean) void{
pub const glColorMaski(index: uint, r: boolean, g: boolean, b: boolean, a: boolean) void{
pub const glUniformMatrix4x3fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glUniformMatrix3x4fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glUniformMatrix4x2fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glUniformMatrix2x4fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glUniformMatrix3x2fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glUniformMatrix2x3fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glVertexAttribPointer(index: uint, size: int, type: enum, normalized: boolean, stride: sizei, pointer: ?*const anyopaque) void{
pub const glVertexAttrib4usv(index: uint, v: ushort) void{
pub const glVertexAttrib4uiv(index: uint, v: uint) void{
pub const glVertexAttrib4ubv(index: uint, v: ubyte) void{
pub const glVertexAttrib4sv(index: uint, v: short) void{
pub const glVertexAttrib4s(index: uint, x: short, y: short, z: short, w: short) void{
pub const glVertexAttrib4iv(index: uint, v: int) void{
pub const glVertexAttrib4fv(index: uint, v: float) void{
pub const glVertexAttrib4f(index: uint, x: float, y: float, z: float, w: float) void{
pub const glVertexAttrib4dv(index: uint, v: double) void{
pub const glVertexAttrib4d(index: uint, x: double, y: double, z: double, w: double) void{
pub const glVertexAttrib4bv(index: uint, v: byte) void{
pub const glVertexAttrib4Nusv(index: uint, v: ushort) void{
pub const glVertexAttrib4Nuiv(index: uint, v: uint) void{
pub const glVertexAttrib4Nubv(index: uint, v: ubyte) void{
pub const glVertexAttrib4Nub(index: uint, x: ubyte, y: ubyte, z: ubyte, w: ubyte) void{
pub const glVertexAttrib4Nsv(index: uint, v: short) void{
pub const glVertexAttrib4Niv(index: uint, v: int) void{
pub const glVertexAttrib4Nbv(index: uint, v: byte) void{
pub const glVertexAttrib3sv(index: uint, v: short) void{
pub const glVertexAttrib3s(index: uint, x: short, y: short, z: short) void{
pub const glVertexAttrib3fv(index: uint, v: float) void{
pub const glVertexAttrib3f(index: uint, x: float, y: float, z: float) void{
pub const glVertexAttrib3dv(index: uint, v: double) void{
pub const glVertexAttrib3d(index: uint, x: double, y: double, z: double) void{
pub const glVertexAttrib2sv(index: uint, v: short) void{
pub const glVertexAttrib2s(index: uint, x: short, y: short) void{
pub const glVertexAttrib2fv(index: uint, v: float) void{
pub const glVertexAttrib2f(index: uint, x: float, y: float) void{
pub const glVertexAttrib2dv(index: uint, v: double) void{
pub const glVertexAttrib2d(index: uint, x: double, y: double) void{
pub const glVertexAttrib1sv(index: uint, v: short) void{
pub const glVertexAttrib1s(index: uint, x: short) void{
pub const glVertexAttrib1fv(index: uint, v: float) void{
pub const glVertexAttrib1f(index: uint, x: float) void{
pub const glVertexAttrib1dv(index: uint, v: double) void{
pub const glVertexAttrib1d(index: uint, x: double) void{
pub const glValidateProgram(program: uint) void{
pub const glUniformMatrix4fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glUniformMatrix3fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glUniformMatrix2fv(location: int, count: sizei, transpose: boolean, value: float) void{
pub const glUniform4iv(location: int, count: sizei, value: int) void{
pub const glUniform3iv(location: int, count: sizei, value: int) void{
pub const glUniform2iv(location: int, count: sizei, value: int) void{
pub const glUniform1iv(location: int, count: sizei, value: int) void{
pub const glUniform4fv(location: int, count: sizei, value: float) void{
pub const glUniform3fv(location: int, count: sizei, value: float) void{
pub const glUniform2fv(location: int, count: sizei, value: float) void{
pub const glUniform1fv(location: int, count: sizei, value: float) void{
pub const glUniform4i(location: int, v0: int, v1: int, v2: int, v3: int) void{
pub const glUniform3i(location: int, v0: int, v1: int, v2: int) void{
pub const glUniform2i(location: int, v0: int, v1: int) void{
pub const glUniform1i(location: int, v0: int) void{
pub const glUniform4f(location: int, v0: float, v1: float, v2: float, v3: float) void{
pub const glUniform3f(location: int, v0: float, v1: float, v2: float) void{
pub const glUniform2f(location: int, v0: float, v1: float) void{
pub const glUniform1f(location: int, v0: float) void{
pub const glUseProgram(program: uint) void{
pub const glShaderSource(shader: uint, count: sizei, string: char, length: int) void{
pub const glLinkProgram(program: uint) void{
pub const glIsShader(shader: uint) boolean{
pub const glIsProgram(program: uint) boolean{
pub const glGetVertexAttribPointerv(index: uint, pname: enum, pointer: ?*const anyopaque) void{
pub const glGetVertexAttribiv(index: uint, pname: enum, params: int) void{
pub const glGetVertexAttribfv(index: uint, pname: enum, params: float) void{
pub const glGetVertexAttribdv(index: uint, pname: enum, params: double) void{
pub const glGetUniformiv(program: uint, location: int, params: int) void{
pub const glGetUniformfv(program: uint, location: int, params: float) void{
pub const glGetUniformLocation(program: uint, name: char) int{
pub const glGetShaderSource(shader: uint, bufSize: sizei, length: sizei, source: char) void{
pub const glGetShaderInfoLog(shader: uint, bufSize: sizei, length: sizei, infoLog: char) void{
pub const glGetShaderiv(shader: uint, pname: enum, params: int) void{
pub const glGetProgramInfoLog(program: uint, bufSize: sizei, length: sizei, infoLog: char) void{
pub const glGetProgramiv(program: uint, pname: enum, params: int) void{
pub const glGetAttribLocation(program: uint, name: char) int{
pub const glGetAttachedShaders(program: uint, maxCount: sizei, count: sizei, shaders: uint) void{
pub const glGetActiveUniform(program: uint, index: uint, bufSize: sizei, length: sizei, size: int, type: enum, name: char) void{
pub const glGetActiveAttrib(program: uint, index: uint, bufSize: sizei, length: sizei, size: int, type: enum, name: char) void{
pub const glEnableVertexAttribArray(index: uint) void{
pub const glDisableVertexAttribArray(index: uint) void{
pub const glDetachShader(program: uint, shader: uint) void{
pub const glDeleteShader(shader: uint) void{
pub const glDeleteProgram(program: uint) void{
pub const glCreateShader(type: enum) uint{
pub const glCreateProgram(pub const glCompileShader(shader: uint) void{
pub const glBindAttribLocation(program: uint, index: uint, name: char) void{
pub const glAttachShader(program: uint, shader: uint) void{
pub const glStencilMaskSeparate(face: enum, mask: uint) void{
pub const glStencilFuncSeparate(face: enum, func: enum, ref: int, mask: uint) void{
pub const glStencilOpSeparate(face: enum, sfail: enum, dpfail: enum, dppass: enum) void{
pub const glDrawBuffers(n: sizei, bufs: enum) void{
pub const glBlendEquationSeparate(modeRGB: enum, modeAlpha: enum) void{
pub const glGetBufferPointerv(target: enum, pname: enum, params: ?*const anyopaque) void{
pub const glGetBufferParameteriv(target: enum, pname: enum, params: int) void{
pub const glUnmapBuffer(target: enum) boolean{
pub const glMapBuffer(target: enum, access: enum) void{
pub const glGetBufferSubData(target: enum, offset: intptr, size: sizeiptr, data: ?*const anyopaque) void{
pub const glBufferSubData(target: enum, offset: intptr, size: sizeiptr, data: ?*const anyopaque) void{
pub const glBufferData(target: enum, size: sizeiptr, data: ?*const anyopaque, usage: enum) void{
pub const glIsBuffer(buffer: uint) boolean{
pub const glGenBuffers(n: sizei, buffers: uint) void{
pub const glDeleteBuffers(n: sizei, buffers: uint) void{
pub const glBindBuffer(target: enum, buffer: uint) void{
pub const glGetQueryObjectuiv(id: uint, pname: enum, params: uint) void{
pub const glGetQueryObjectiv(id: uint, pname: enum, params: int) void{
pub const glGetQueryiv(target: enum, pname: enum, params: int) void{
pub const glEndQuery(target: enum) void{
pub const glBeginQuery(target: enum, id: uint) void{
pub const glIsQuery(id: uint) boolean{
pub const glDeleteQueries(n: sizei, ids: uint) void{
pub const glGenQueries(n: sizei, ids: uint) void{
pub const glBlendEquation(mode: enum) void{
pub const glBlendColor(red: float, green: float, blue: float, alpha: float) void{
pub const glIsTexture(texture: uint) boolean{
pub const glCopyTexSubImage3D(target: enum, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei) void{
pub const glActiveTexture(texture: enum) void{
pub const glSampleCoverage(value: float, invert: boolean) void{
pub const glCompressedTexImage3D(target: enum, level: int, internalformat: enum, width: sizei, height: sizei, depth: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) void{
pub const glCompressedTexImage2D(target: enum, level: int, internalformat: enum, width: sizei, height: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) void{
pub const glCompressedTexImage1D(target: enum, level: int, internalformat: enum, width: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) void{
pub const glCompressedTexSubImage2D(target: enum, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: enum, imageSize: sizei, data: ?*const anyopaque) void{
pub const glCompressedTexSubImage1D(target: enum, level: int, xoffset: int, width: sizei, format: enum, imageSize: sizei, data: ?*const anyopaque) void{
pub const glGetCompressedTexImage(target: enum, level: int, img: ?*const anyopaque) void{
pub const glBlendFuncSeparate(sfactorRGB: enum, dfactorRGB: enum, sfactorAlpha: enum, dfactorAlpha: enum) void{
pub const glPointParameteriv(pname: enum, params: int) void{
pub const glPointParameteri(pname: enum, param: int) void{
pub const glPointParameterfv(pname: enum, params: float) void{
pub const glPointParameterf(pname: enum, param: float) void{
pub const glMultiDrawElements(mode: enum, count: sizei, type: enum, indices: ?*const anyopaque, drawcount: sizei) void{
pub const glMultiDrawArrays(mode: enum, first: int, count: sizei, drawcount: sizei) void{
pub const glDrawRangeElements(mode: enum, start: uint, end: uint, count: sizei, type: enum, indices: ?*const anyopaque) void{
pub const glTexImage3D(target: enum, level: int, internalformat: int, width: sizei, height: sizei, depth: sizei, border: int, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glTexSubImage3D(target: enum, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glDrawArrays(mode: enum, first: int, count: sizei) void{
pub const glDrawElements(mode: enum, count: sizei, type: enum, indices: ?*const anyopaque) void{
pub const glCompressedTexSubImage3D(target: enum, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: enum, imageSize: sizei, data: ?*const anyopaque) void{
pub const glPolygonOffset(factor: float, units: float) void{
pub const glCopyTexImage1D(target: enum, level: int, internalformat: enum, x: int, y: int, width: sizei, border: int) void{
pub const glCopyTexImage2D(target: enum, level: int, internalformat: enum, x: int, y: int, width: sizei, height: sizei, border: int) void{
pub const glCopyTexSubImage1D(target: enum, level: int, xoffset: int, x: int, y: int, width: sizei) void{
pub const glCopyTexSubImage2D(target: enum, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) void{
pub const glTexSubImage1D(target: enum, level: int, xoffset: int, width: sizei, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glTexSubImage2D(target: enum, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glBindTexture(target: enum, texture: uint) void{
pub const glDeleteTextures(n: sizei, textures: uint) void{
pub const glGenTextures(n: sizei, textures: uint) void{
pub const glBindFragDataLocationIndexed(program: uint, colorNumber: uint, index: uint, name: char) void{
pub const glGetFragDataIndex(program: uint, name: char) int{
pub const glGenSamplers(count: sizei, samplers: uint) void{
pub const glDeleteSamplers(count: sizei, samplers: uint) void{
pub const glIsSampler(sampler: uint) boolean{
pub const glBindSampler(unit: uint, sampler: uint) void{
pub const glSamplerParameteri(sampler: uint, pname: enum, param: int) void{
pub const glSamplerParameteriv(sampler: uint, pname: enum, param: int) void{
pub const glSamplerParameterf(sampler: uint, pname: enum, param: float) void{
pub const glSamplerParameterfv(sampler: uint, pname: enum, param: float) void{
pub const glSamplerParameterIiv(sampler: uint, pname: enum, param: int) void{
pub const glSamplerParameterIuiv(sampler: uint, pname: enum, param: uint) void{
pub const glGetSamplerParameteriv(sampler: uint, pname: enum, params: int) void{
pub const glGetSamplerParameterIiv(sampler: uint, pname: enum, params: int) void{
pub const glGetSamplerParameterfv(sampler: uint, pname: enum, params: float) void{
pub const glGetSamplerParameterIuiv(sampler: uint, pname: enum, params: uint) void{
pub const glQueryCounter(id: uint, target: enum) void{
pub const glGetQueryObjecti64v(id: uint, pname: enum, params: int64) void{
pub const glGetQueryObjectui64v(id: uint, pname: enum, params: uint64) void{
pub const glVertexAttribDivisor(index: uint, divisor: uint) void{
pub const glVertexAttribP1ui(index: uint, type: enum, normalized: boolean, value: uint) void{
pub const glVertexAttribP1uiv(index: uint, type: enum, normalized: boolean, value: uint) void{
pub const glVertexAttribP2ui(index: uint, type: enum, normalized: boolean, value: uint) void{
pub const glVertexAttribP2uiv(index: uint, type: enum, normalized: boolean, value: uint) void{
pub const glVertexAttribP3ui(index: uint, type: enum, normalized: boolean, value: uint) void{
pub const glVertexAttribP3uiv(index: uint, type: enum, normalized: boolean, value: uint) void{
pub const glVertexAttribP4ui(index: uint, type: enum, normalized: boolean, value: uint) void{
pub const glVertexAttribP4uiv(index: uint, type: enum, normalized: boolean, value: uint) void{
pub const glMinSampleShading(value: float) void{
pub const glBlendEquationi(buf: uint, mode: enum) void{
pub const glBlendEquationSeparatei(buf: uint, modeRGB: enum, modeAlpha: enum) void{
pub const glBlendFunci(buf: uint, src: enum, dst: enum) void{
pub const glBlendFuncSeparatei(buf: uint, srcRGB: enum, dstRGB: enum, srcAlpha: enum, dstAlpha: enum) void{
pub const glDrawArraysIndirect(mode: enum, indirect: ?*const anyopaque) void{
pub const glDrawElementsIndirect(mode: enum, type: enum, indirect: ?*const anyopaque) void{
pub const glUniform1d(location: int, x: double) void{
pub const glUniform2d(location: int, x: double, y: double) void{
pub const glUniform3d(location: int, x: double, y: double, z: double) void{
pub const glUniform4d(location: int, x: double, y: double, z: double, w: double) void{
pub const glUniform1dv(location: int, count: sizei, value: double) void{
pub const glUniform2dv(location: int, count: sizei, value: double) void{
pub const glUniform3dv(location: int, count: sizei, value: double) void{
pub const glUniform4dv(location: int, count: sizei, value: double) void{
pub const glUniformMatrix2dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glUniformMatrix3dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glUniformMatrix4dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glUniformMatrix2x3dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glUniformMatrix2x4dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glUniformMatrix3x2dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glUniformMatrix3x4dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glUniformMatrix4x2dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glUniformMatrix4x3dv(location: int, count: sizei, transpose: boolean, value: double) void{
pub const glGetUniformdv(program: uint, location: int, params: double) void{
pub const glGetSubroutineUniformLocation(program: uint, shadertype: enum, name: char) int{
pub const glGetSubroutineIndex(program: uint, shadertype: enum, name: char) uint{
pub const glGetActiveSubroutineUniformiv(program: uint, shadertype: enum, index: uint, pname: enum, values: int) void{
pub const glGetActiveSubroutineUniformName(program: uint, shadertype: enum, index: uint, bufSize: sizei, length: sizei, name: char) void{
pub const glGetActiveSubroutineName(program: uint, shadertype: enum, index: uint, bufSize: sizei, length: sizei, name: char) void{
pub const glUniformSubroutinesuiv(shadertype: enum, count: sizei, indices: uint) void{
pub const glGetUniformSubroutineuiv(shadertype: enum, location: int, params: uint) void{
pub const glGetProgramStageiv(program: uint, shadertype: enum, pname: enum, values: int) void{
pub const glPatchParameteri(pname: enum, value: int) void{
pub const glPatchParameterfv(pname: enum, values: float) void{
pub const glBindTransformFeedback(target: enum, id: uint) void{
pub const glDeleteTransformFeedbacks(n: sizei, ids: uint) void{
pub const glGenTransformFeedbacks(n: sizei, ids: uint) void{
pub const glIsTransformFeedback(id: uint) boolean{
pub const glPauseTransformFeedback(pub const glResumeTransformFeedback(pub const glDrawTransformFeedback(mode: enum, id: uint) void{
pub const glDrawTransformFeedbackStream(mode: enum, id: uint, stream: uint) void{
pub const glBeginQueryIndexed(target: enum, index: uint, id: uint) void{
pub const glEndQueryIndexed(target: enum, index: uint) void{
pub const glGetQueryIndexediv(target: enum, index: uint, pname: enum, params: int) void{
pub const glReleaseShaderCompiler(pub const glShaderBinary(count: sizei, shaders: uint, binaryFormat: enum, binary: ?*const anyopaque, length: sizei) void{
pub const glGetShaderPrecisionFormat(shadertype: enum, precisiontype: enum, range: int, precision: int) void{
pub const glDepthRangef(n: float, f: float) void{
pub const glClearDepthf(d: float) void{
pub const glGetProgramBinary(program: uint, bufSize: sizei, length: sizei, binaryFormat: enum, binary: ?*const anyopaque) void{
pub const glProgramBinary(program: uint, binaryFormat: enum, binary: ?*const anyopaque, length: sizei) void{
pub const glProgramParameteri(program: uint, pname: enum, value: int) void{
pub const glUseProgramStages(pipeline: uint, stages: bitfield, program: uint) void{
pub const glActiveShaderProgram(pipeline: uint, program: uint) void{
pub const glCreateShaderProgramv(type: enum, count: sizei, strings: char) uint{
pub const glBindProgramPipeline(pipeline: uint) void{
pub const glDeleteProgramPipelines(n: sizei, pipelines: uint) void{
pub const glGenProgramPipelines(n: sizei, pipelines: uint) void{
pub const glIsProgramPipeline(pipeline: uint) boolean{
pub const glGetProgramPipelineiv(pipeline: uint, pname: enum, params: int) void{
pub const glProgramParameteri(program: uint, pname: enum, value: int) void{
pub const glProgramUniform1i(program: uint, location: int, v0: int) void{
pub const glProgramUniform1iv(program: uint, location: int, count: sizei, value: int) void{
pub const glProgramUniform1f(program: uint, location: int, v0: float) void{
pub const glProgramUniform1fv(program: uint, location: int, count: sizei, value: float) void{
pub const glProgramUniform1d(program: uint, location: int, v0: double) void{
pub const glProgramUniform1dv(program: uint, location: int, count: sizei, value: double) void{
pub const glProgramUniform1ui(program: uint, location: int, v0: uint) void{
pub const glProgramUniform1uiv(program: uint, location: int, count: sizei, value: uint) void{
pub const glProgramUniform2i(program: uint, location: int, v0: int, v1: int) void{
pub const glProgramUniform2iv(program: uint, location: int, count: sizei, value: int) void{
pub const glProgramUniform2f(program: uint, location: int, v0: float, v1: float) void{
pub const glProgramUniform2fv(program: uint, location: int, count: sizei, value: float) void{
pub const glProgramUniform2d(program: uint, location: int, v0: double, v1: double) void{
pub const glProgramUniform2dv(program: uint, location: int, count: sizei, value: double) void{
pub const glProgramUniform2ui(program: uint, location: int, v0: uint, v1: uint) void{
pub const glProgramUniform2uiv(program: uint, location: int, count: sizei, value: uint) void{
pub const glProgramUniform3i(program: uint, location: int, v0: int, v1: int, v2: int) void{
pub const glProgramUniform3iv(program: uint, location: int, count: sizei, value: int) void{
pub const glProgramUniform3f(program: uint, location: int, v0: float, v1: float, v2: float) void{
pub const glProgramUniform3fv(program: uint, location: int, count: sizei, value: float) void{
pub const glProgramUniform3d(program: uint, location: int, v0: double, v1: double, v2: double) void{
pub const glProgramUniform3dv(program: uint, location: int, count: sizei, value: double) void{
pub const glProgramUniform3ui(program: uint, location: int, v0: uint, v1: uint, v2: uint) void{
pub const glProgramUniform3uiv(program: uint, location: int, count: sizei, value: uint) void{
pub const glProgramUniform4i(program: uint, location: int, v0: int, v1: int, v2: int, v3: int) void{
pub const glProgramUniform4iv(program: uint, location: int, count: sizei, value: int) void{
pub const glProgramUniform4f(program: uint, location: int, v0: float, v1: float, v2: float, v3: float) void{
pub const glProgramUniform4fv(program: uint, location: int, count: sizei, value: float) void{
pub const glProgramUniform4d(program: uint, location: int, v0: double, v1: double, v2: double, v3: double) void{
pub const glProgramUniform4dv(program: uint, location: int, count: sizei, value: double) void{
pub const glProgramUniform4ui(program: uint, location: int, v0: uint, v1: uint, v2: uint, v3: uint) void{
pub const glProgramUniform4uiv(program: uint, location: int, count: sizei, value: uint) void{
pub const glProgramUniformMatrix2fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix3fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix4fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix2dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glProgramUniformMatrix3dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glProgramUniformMatrix4dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glProgramUniformMatrix2x3fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix3x2fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix2x4fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix4x2fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix3x4fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix4x3fv(program: uint, location: int, count: sizei, transpose: boolean, value: float) void{
pub const glProgramUniformMatrix2x3dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glProgramUniformMatrix3x2dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glProgramUniformMatrix2x4dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glProgramUniformMatrix4x2dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glProgramUniformMatrix3x4dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glProgramUniformMatrix4x3dv(program: uint, location: int, count: sizei, transpose: boolean, value: double) void{
pub const glValidateProgramPipeline(pipeline: uint) void{
pub const glGetProgramPipelineInfoLog(pipeline: uint, bufSize: sizei, length: sizei, infoLog: char) void{
pub const glVertexAttribL1d(index: uint, x: double) void{
pub const glVertexAttribL2d(index: uint, x: double, y: double) void{
pub const glVertexAttribL3d(index: uint, x: double, y: double, z: double) void{
pub const glVertexAttribL4d(index: uint, x: double, y: double, z: double, w: double) void{
pub const glVertexAttribL1dv(index: uint, v: double) void{
pub const glVertexAttribL2dv(index: uint, v: double) void{
pub const glVertexAttribL3dv(index: uint, v: double) void{
pub const glVertexAttribL4dv(index: uint, v: double) void{
pub const glVertexAttribLPointer(index: uint, size: int, type: enum, stride: sizei, pointer: ?*const anyopaque) void{
pub const glGetVertexAttribLdv(index: uint, pname: enum, params: double) void{
pub const glViewportArrayv(first: uint, count: sizei, v: float) void{
pub const glViewportIndexedf(index: uint, x: float, y: float, w: float, h: float) void{
pub const glViewportIndexedfv(index: uint, v: float) void{
pub const glScissorArrayv(first: uint, count: sizei, v: int) void{
pub const glScissorIndexed(index: uint, left: int, bottom: int, width: sizei, height: sizei) void{
pub const glScissorIndexedv(index: uint, v: int) void{
pub const glDepthRangeArrayv(first: uint, count: sizei, v: double) void{
pub const glDepthRangeIndexed(index: uint, n: double, f: double) void{
pub const glGetFloati_v(target: enum, index: uint, data: float) void{
pub const glGetDoublei_v(target: enum, index: uint, data: double) void{
pub const glDrawArraysInstancedBaseInstance(mode: enum, first: int, count: sizei, instancecount: sizei, baseinstance: uint) void{
pub const glDrawElementsInstancedBaseInstance(mode: enum, count: sizei, type: enum, indices: ?*const anyopaque, instancecount: sizei, baseinstance: uint) void{
pub const glDrawElementsInstancedBaseVertexBaseInstance(mode: enum, count: sizei, type: enum, indices: ?*const anyopaque, instancecount: sizei, basevertex: int, baseinstance: uint) void{
pub const glGetInternalformativ(target: enum, internalformat: enum, pname: enum, count: sizei, params: int) void{
pub const glGetActiveAtomicCounterBufferiv(program: uint, bufferIndex: uint, pname: enum, params: int) void{
pub const glBindImageTexture(unit: uint, texture: uint, level: int, layered: boolean, layer: int, access: enum, format: enum) void{
pub const glMemoryBarrier(barriers: bitfield) void{
pub const glTexStorage1D(target: enum, levels: sizei, internalformat: enum, width: sizei) void{
pub const glTexStorage2D(target: enum, levels: sizei, internalformat: enum, width: sizei, height: sizei) void{
pub const glTexStorage3D(target: enum, levels: sizei, internalformat: enum, width: sizei, height: sizei, depth: sizei) void{
pub const glDrawTransformFeedbackInstanced(mode: enum, id: uint, instancecount: sizei) void{
pub const glDrawTransformFeedbackStreamInstanced(mode: enum, id: uint, stream: uint, instancecount: sizei) void{
pub const glClearBufferData(target: enum, internalformat: enum, format: enum, type: enum, data: ?*const anyopaque) void{
pub const glClearBufferSubData(target: enum, internalformat: enum, offset: intptr, size: sizeiptr, format: enum, type: enum, data: ?*const anyopaque) void{
pub const glDispatchCompute(num_groups_x: uint, num_groups_y: uint, num_groups_z: uint) void{
pub const glDispatchComputeIndirect(indirect: intptr) void{
pub const glCopyImageSubData(srcName: uint, srcTarget: enum, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: uint, dstTarget: enum, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: sizei, srcHeight: sizei, srcDepth: sizei) void{
pub const glFramebufferParameteri(target: enum, pname: enum, param: int) void{
pub const glGetFramebufferParameteriv(target: enum, pname: enum, params: int) void{
pub const glGetInternalformati64v(target: enum, internalformat: enum, pname: enum, count: sizei, params: int64) void{
pub const glInvalidateTexSubImage(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei) void{
pub const glInvalidateTexImage(texture: uint, level: int) void{
pub const glInvalidateBufferSubData(buffer: uint, offset: intptr, length: sizeiptr) void{
pub const glInvalidateBufferData(buffer: uint) void{
pub const glInvalidateFramebuffer(target: enum, numAttachments: sizei, attachments: enum) void{
pub const glInvalidateSubFramebuffer(target: enum, numAttachments: sizei, attachments: enum, x: int, y: int, width: sizei, height: sizei) void{
pub const glMultiDrawArraysIndirect(mode: enum, indirect: ?*const anyopaque, drawcount: sizei, stride: sizei) void{
pub const glMultiDrawElementsIndirect(mode: enum, type: enum, indirect: ?*const anyopaque, drawcount: sizei, stride: sizei) void{
pub const glGetProgramInterfaceiv(program: uint, programInterface: enum, pname: enum, params: int) void{
pub const glGetProgramResourceIndex(program: uint, programInterface: enum, name: char) uint{
pub const glGetProgramResourceName(program: uint, programInterface: enum, index: uint, bufSize: sizei, length: sizei, name: char) void{
pub const glGetProgramResourceiv(program: uint, programInterface: enum, index: uint, propCount: sizei, props: enum, count: sizei, length: sizei, params: int) void{
pub const glGetProgramResourceLocation(program: uint, programInterface: enum, name: char) int{
pub const glGetProgramResourceLocationIndex(program: uint, programInterface: enum, name: char) int{
pub const glShaderStorageBlockBinding(program: uint, storageBlockIndex: uint, storageBlockBinding: uint) void{
pub const glTexBufferRange(target: enum, internalformat: enum, buffer: uint, offset: intptr, size: sizeiptr) void{
pub const glTexStorage2DMultisample(target: enum, samples: sizei, internalformat: enum, width: sizei, height: sizei, fixedsamplelocations: boolean) void{
pub const glTexStorage3DMultisample(target: enum, samples: sizei, internalformat: enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) void{
pub const glTextureView(texture: uint, target: enum, origtexture: uint, internalformat: enum, minlevel: uint, numlevels: uint, minlayer: uint, numlayers: uint) void{
pub const glBindVertexBuffer(bindingindex: uint, buffer: uint, offset: intptr, stride: sizei) void{
pub const glVertexAttribFormat(attribindex: uint, size: int, type: enum, normalized: boolean, relativeoffset: uint) void{
pub const glVertexAttribIFormat(attribindex: uint, size: int, type: enum, relativeoffset: uint) void{
pub const glVertexAttribLFormat(attribindex: uint, size: int, type: enum, relativeoffset: uint) void{
pub const glVertexAttribBinding(attribindex: uint, bindingindex: uint) void{
pub const glVertexBindingDivisor(bindingindex: uint, divisor: uint) void{
pub const glDebugMessageControl(source: enum, type: enum, severity: enum, count: sizei, ids: uint, enabled: boolean) void{
pub const glDebugMessageInsert(source: enum, type: enum, id: uint, severity: enum, length: sizei, buf: char) void{
pub const glDebugMessageCallback(callback: DEBUGPROC, userParam: ?*const anyopaque) void{
pub const glGetDebugMessageLog(count: uint, bufSize: sizei, sources: enum, types: enum, ids: uint, severities: enum, lengths: sizei, messageLog: char) uint{
pub const glPushDebugGroup(source: enum, id: uint, length: sizei, message: char) void{
pub const glPopDebugGroup(pub const glObjectLabel(identifier: enum, name: uint, length: sizei, label: char) void{
pub const glGetObjectLabel(identifier: enum, name: uint, bufSize: sizei, length: sizei, label: char) void{
pub const glObjectPtrLabel(ptr: ?*const anyopaque, length: sizei, label: char) void{
pub const glGetObjectPtrLabel(ptr: ?*const anyopaque, bufSize: sizei, length: sizei, label: char) void{
pub const glGetPointerv(pname: enum, params: ?*const anyopaque) void{
pub const glBufferStorage(target: enum, size: sizeiptr, data: ?*const anyopaque, flags: bitfield) void{
pub const glClearTexImage(texture: uint, level: int, format: enum, type: enum, data: ?*const anyopaque) void{
pub const glClearTexSubImage(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: enum, type: enum, data: ?*const anyopaque) void{
pub const glBindBuffersBase(target: enum, first: uint, count: sizei, buffers: uint) void{
pub const glBindBuffersRange(target: enum, first: uint, count: sizei, buffers: uint, offsets: intptr, sizes: sizeiptr) void{
pub const glBindTextures(first: uint, count: sizei, textures: uint) void{
pub const glBindSamplers(first: uint, count: sizei, samplers: uint) void{
pub const glBindImageTextures(first: uint, count: sizei, textures: uint) void{
pub const glBindVertexBuffers(first: uint, count: sizei, buffers: uint, offsets: intptr, strides: sizei) void{
pub const glClipControl(origin: enum, depth: enum) void{
pub const glCreateTransformFeedbacks(n: sizei, ids: uint) void{
pub const glTransformFeedbackBufferBase(xfb: uint, index: uint, buffer: uint) void{
pub const glTransformFeedbackBufferRange(xfb: uint, index: uint, buffer: uint, offset: intptr, size: sizeiptr) void{
pub const glGetTransformFeedbackiv(xfb: uint, pname: enum, param: int) void{
pub const glGetTransformFeedbacki_v(xfb: uint, pname: enum, index: uint, param: int) void{
pub const glGetTransformFeedbacki64_v(xfb: uint, pname: enum, index: uint, param: int64) void{
pub const glCreateBuffers(n: sizei, buffers: uint) void{
pub const glNamedBufferStorage(buffer: uint, size: sizeiptr, data: ?*const anyopaque, flags: bitfield) void{
pub const glNamedBufferData(buffer: uint, size: sizeiptr, data: ?*const anyopaque, usage: enum) void{
pub const glNamedBufferSubData(buffer: uint, offset: intptr, size: sizeiptr, data: ?*const anyopaque) void{
pub const glCopyNamedBufferSubData(readBuffer: uint, writeBuffer: uint, readOffset: intptr, writeOffset: intptr, size: sizeiptr) void{
pub const glClearNamedBufferData(buffer: uint, internalformat: enum, format: enum, type: enum, data: ?*const anyopaque) void{
pub const glClearNamedBufferSubData(buffer: uint, internalformat: enum, offset: intptr, size: sizeiptr, format: enum, type: enum, data: ?*const anyopaque) void{
pub const glMapNamedBuffer(buffer: uint, access: enum) void{
pub const glMapNamedBufferRange(buffer: uint, offset: intptr, length: sizeiptr, access: bitfield) void{
pub const glUnmapNamedBuffer(buffer: uint) boolean{
pub const glFlushMappedNamedBufferRange(buffer: uint, offset: intptr, length: sizeiptr) void{
pub const glGetNamedBufferParameteriv(buffer: uint, pname: enum, params: int) void{
pub const glGetNamedBufferParameteri64v(buffer: uint, pname: enum, params: int64) void{
pub const glGetNamedBufferPointerv(buffer: uint, pname: enum, params: ?*const anyopaque) void{
pub const glGetNamedBufferSubData(buffer: uint, offset: intptr, size: sizeiptr, data: ?*const anyopaque) void{
pub const glCreateFramebuffers(n: sizei, framebuffers: uint) void{
pub const glNamedFramebufferRenderbuffer(framebuffer: uint, attachment: enum, renderbuffertarget: enum, renderbuffer: uint) void{
pub const glNamedFramebufferParameteri(framebuffer: uint, pname: enum, param: int) void{
pub const glNamedFramebufferTexture(framebuffer: uint, attachment: enum, texture: uint, level: int) void{
pub const glNamedFramebufferTextureLayer(framebuffer: uint, attachment: enum, texture: uint, level: int, layer: int) void{
pub const glNamedFramebufferDrawBuffer(framebuffer: uint, buf: enum) void{
pub const glNamedFramebufferDrawBuffers(framebuffer: uint, n: sizei, bufs: enum) void{
pub const glNamedFramebufferReadBuffer(framebuffer: uint, src: enum) void{
pub const glInvalidateNamedFramebufferData(framebuffer: uint, numAttachments: sizei, attachments: enum) void{
pub const glInvalidateNamedFramebufferSubData(framebuffer: uint, numAttachments: sizei, attachments: enum, x: int, y: int, width: sizei, height: sizei) void{
pub const glClearNamedFramebufferiv(framebuffer: uint, buffer: enum, drawbuffer: int, value: int) void{
pub const glClearNamedFramebufferuiv(framebuffer: uint, buffer: enum, drawbuffer: int, value: uint) void{
pub const glClearNamedFramebufferfv(framebuffer: uint, buffer: enum, drawbuffer: int, value: float) void{
pub const glClearNamedFramebufferfi(framebuffer: uint, buffer: enum, drawbuffer: int, depth: float, stencil: int) void{
pub const glBlitNamedFramebuffer(readFramebuffer: uint, drawFramebuffer: uint, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: enum) void{
pub const glCheckNamedFramebufferStatus(framebuffer: uint, target: enum) enum{
pub const glGetNamedFramebufferParameteriv(framebuffer: uint, pname: enum, param: int) void{
pub const glGetNamedFramebufferAttachmentParameteriv(framebuffer: uint, attachment: enum, pname: enum, params: int) void{
pub const glCreateRenderbuffers(n: sizei, renderbuffers: uint) void{
pub const glNamedRenderbufferStorage(renderbuffer: uint, internalformat: enum, width: sizei, height: sizei) void{
pub const glNamedRenderbufferStorageMultisample(renderbuffer: uint, samples: sizei, internalformat: enum, width: sizei, height: sizei) void{
pub const glGetNamedRenderbufferParameteriv(renderbuffer: uint, pname: enum, params: int) void{
pub const glCreateTextures(target: enum, n: sizei, textures: uint) void{
pub const glTextureBuffer(texture: uint, internalformat: enum, buffer: uint) void{
pub const glTextureBufferRange(texture: uint, internalformat: enum, buffer: uint, offset: intptr, size: sizeiptr) void{
pub const glTextureStorage1D(texture: uint, levels: sizei, internalformat: enum, width: sizei) void{
pub const glTextureStorage2D(texture: uint, levels: sizei, internalformat: enum, width: sizei, height: sizei) void{
pub const glTextureStorage3D(texture: uint, levels: sizei, internalformat: enum, width: sizei, height: sizei, depth: sizei) void{
pub const glTextureStorage2DMultisample(texture: uint, samples: sizei, internalformat: enum, width: sizei, height: sizei, fixedsamplelocations: boolean) void{
pub const glTextureStorage3DMultisample(texture: uint, samples: sizei, internalformat: enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) void{
pub const glTextureSubImage1D(texture: uint, level: int, xoffset: int, width: sizei, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glTextureSubImage2D(texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glTextureSubImage3D(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: enum, type: enum, pixels: ?*const anyopaque) void{
pub const glCompressedTextureSubImage1D(texture: uint, level: int, xoffset: int, width: sizei, format: enum, imageSize: sizei, data: ?*const anyopaque) void{
pub const glCompressedTextureSubImage2D(texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: enum, imageSize: sizei, data: ?*const anyopaque) void{
pub const glCompressedTextureSubImage3D(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: enum, imageSize: sizei, data: ?*const anyopaque) void{
pub const glCopyTextureSubImage1D(texture: uint, level: int, xoffset: int, x: int, y: int, width: sizei) void{
pub const glCopyTextureSubImage2D(texture: uint, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) void{
pub const glCopyTextureSubImage3D(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei) void{
pub const glTextureParameterf(texture: uint, pname: enum, param: float) void{
pub const glTextureParameterfv(texture: uint, pname: enum, param: float) void{
pub const glTextureParameteri(texture: uint, pname: enum, param: int) void{
pub const glTextureParameterIiv(texture: uint, pname: enum, params: int) void{
pub const glTextureParameterIuiv(texture: uint, pname: enum, params: uint) void{
pub const glTextureParameteriv(texture: uint, pname: enum, param: int) void{
pub const glGenerateTextureMipmap(texture: uint) void{
pub const glBindTextureUnit(unit: uint, texture: uint) void{
pub const glGetTextureImage(texture: uint, level: int, format: enum, type: enum, bufSize: sizei, pixels: ?*const anyopaque) void{
pub const glGetCompressedTextureImage(texture: uint, level: int, bufSize: sizei, pixels: ?*const anyopaque) void{
pub const glGetTextureLevelParameterfv(texture: uint, level: int, pname: enum, params: float) void{
pub const glGetTextureLevelParameteriv(texture: uint, level: int, pname: enum, params: int) void{
pub const glGetTextureParameterfv(texture: uint, pname: enum, params: float) void{
pub const glGetTextureParameterIiv(texture: uint, pname: enum, params: int) void{
pub const glGetTextureParameterIuiv(texture: uint, pname: enum, params: uint) void{
pub const glGetTextureParameteriv(texture: uint, pname: enum, params: int) void{
pub const glCreateVertexArrays(n: sizei, arrays: uint) void{
pub const glDisableVertexArrayAttrib(vaobj: uint, index: uint) void{
pub const glEnableVertexArrayAttrib(vaobj: uint, index: uint) void{
pub const glVertexArrayElementBuffer(vaobj: uint, buffer: uint) void{
pub const glVertexArrayVertexBuffer(vaobj: uint, bindingindex: uint, buffer: uint, offset: intptr, stride: sizei) void{
pub const glVertexArrayVertexBuffers(vaobj: uint, first: uint, count: sizei, buffers: uint, offsets: intptr, strides: sizei) void{
pub const glVertexArrayAttribBinding(vaobj: uint, attribindex: uint, bindingindex: uint) void{
pub const glVertexArrayAttribFormat(vaobj: uint, attribindex: uint, size: int, type: enum, normalized: boolean, relativeoffset: uint) void{
pub const glVertexArrayAttribIFormat(vaobj: uint, attribindex: uint, size: int, type: enum, relativeoffset: uint) void{
pub const glVertexArrayAttribLFormat(vaobj: uint, attribindex: uint, size: int, type: enum, relativeoffset: uint) void{
pub const glVertexArrayBindingDivisor(vaobj: uint, bindingindex: uint, divisor: uint) void{
pub const glGetVertexArrayiv(vaobj: uint, pname: enum, param: int) void{
pub const glGetVertexArrayIndexediv(vaobj: uint, index: uint, pname: enum, param: int) void{
pub const glGetVertexArrayIndexed64iv(vaobj: uint, index: uint, pname: enum, param: int64) void{
pub const glCreateSamplers(n: sizei, samplers: uint) void{
pub const glCreateProgramPipelines(n: sizei, pipelines: uint) void{
pub const glCreateQueries(target: enum, n: sizei, ids: uint) void{
pub const glGetQueryBufferObjecti64v(id: uint, buffer: uint, pname: enum, offset: intptr) void{
pub const glGetQueryBufferObjectiv(id: uint, buffer: uint, pname: enum, offset: intptr) void{
pub const glGetQueryBufferObjectui64v(id: uint, buffer: uint, pname: enum, offset: intptr) void{
pub const glGetQueryBufferObjectuiv(id: uint, buffer: uint, pname: enum, offset: intptr) void{
pub const glMemoryBarrierByRegion(barriers: bitfield) void{
pub const glGetTextureSubImage(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: enum, type: enum, bufSize: sizei, pixels: ?*const anyopaque) void{
pub const glGetCompressedTextureSubImage(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, bufSize: sizei, pixels: ?*const anyopaque) void{
pub const glGetGraphicsResetStatus(pub const glGetnCompressedTexImage(target: enum, lod: int, bufSize: sizei, pixels: ?*const anyopaque) void{
pub const glGetnTexImage(target: enum, level: int, format: enum, type: enum, bufSize: sizei, pixels: ?*const anyopaque) void{
pub const glGetnUniformdv(program: uint, location: int, bufSize: sizei, params: double) void{
pub const glGetnUniformfv(program: uint, location: int, bufSize: sizei, params: float) void{
pub const glGetnUniformiv(program: uint, location: int, bufSize: sizei, params: int) void{
pub const glGetnUniformuiv(program: uint, location: int, bufSize: sizei, params: uint) void{
pub const glReadnPixels(x: int, y: int, width: sizei, height: sizei, format: enum, type: enum, bufSize: sizei, data: ?*const anyopaque) void{
pub const glTextureBarrier(pub const glSpecializeShader(shader: uint, pEntryPoint: char, numSpecializationConstants: uint, pConstantIndex: uint, pConstantValue: uint) void{
pub const glMultiDrawArraysIndirectCount(mode: enum, indirect: ?*const anyopaque, drawcount: intptr, maxdrawcount: sizei, stride: sizei) void{
pub const glMultiDrawElementsIndirectCount(mode: enum, type: enum, indirect: ?*const anyopaque, drawcount: intptr, maxdrawcount: sizei, stride: sizei) void{
pub const glPolygonOffsetClamp(factor: float, units: float, clamp: float) void{

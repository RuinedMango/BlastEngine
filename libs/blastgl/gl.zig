const std = @import("std");
const builtin = @import("builtin");

pub const info = struct {
  pub const api = .gl;
  pub const version_major = 4;
  pub const version_minor = 6;
  pub const profile = .;
};

pub fn makeFuncTableCurrent(procs: ?*const FuncTable) void {{
  FuncTable.current = procs;
}}

pub fn getCurrentFuncTable() ?*const FuncTable{{
   return FuncTable.current;
}}

pub const APIENTRY: std.builtin.CallingConvention = if (builtin.os.tag == .windows and builtin.cpu.arch == .x86) .Stdcall else .C;
pub const PROC = *align(@alignOf(fn () callconv(APIENTRY) void)) const anyopaque;

pub const DEBUGPROC = *const fn (source: @"enum", @"type": @"enum", id: uint, severity: @"enum", length: sizei, message: [*:0]const char, userParam: ?*const anyopaque) callconv(APIENTRY) void;
pub const bitfield = c_uint;
pub const boolean = u8;
pub const byte = i8;
pub const char = u8;
pub const clampd = f64;
pub const clampf = f32;
pub const double = f64;
pub const @"enum" = c_uint;
pub const float = f32;
pub const half = u16;
pub const int = c_int;
pub const int64 = i64;
pub const intptr = isize;
pub const short = i16;
pub const sizei = c_int;
pub const sizeiptr = isize;
pub const sync = *opaque {};
pub const ubyte = u8;
pub const uint = c_uint;
pub const uint64 = u64;
pub const ushort = u16;

pub const QUADS = 0x0007;
pub const MAX_VERTEX_STREAMS = 0x8E71;
pub const VERTEX_ARRAY = 0x8074;
pub const MAP_READ_BIT = 0x0001;
pub const MAP_WRITE_BIT = 0x0002;
pub const TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
pub const STENCIL_INDEX = 0x1901;
pub const STENCIL_INDEX8 = 0x8D48;
pub const UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
pub const LOWER_LEFT = 0x8CA1;
pub const UPPER_LEFT = 0x8CA2;
pub const TEXTURE_BINDING_1D = 0x8068;
pub const TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
pub const TEXTURE_BINDING_2D = 0x8069;
pub const TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
pub const TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
pub const TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
pub const TEXTURE_BINDING_3D = 0x806A;
pub const TEXTURE_BINDING_BUFFER = 0x8C2C;
pub const TEXTURE_BINDING_CUBE_MAP = 0x8514;
pub const TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
pub const TEXTURE_BINDING_RECTANGLE = 0x84F6;
pub const BACK = 0x0405;
pub const NO_ERROR = 0;
pub const CONTEXT_LOST = 0x0507;
pub const NONE = 0;
pub const CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
pub const CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
pub const GEOMETRY_SHADER_INVOCATIONS = 0x887F;
pub const DEPTH_BUFFER_BIT = 0x00000100;
pub const STENCIL_BUFFER_BIT = 0x00000400;
pub const COLOR_BUFFER_BIT = 0x00004000;
pub const FALSE = 0;
pub const TRUE = 1;
pub const POINTS = 0x0000;
pub const LINES = 0x0001;
pub const LINE_LOOP = 0x0002;
pub const LINE_STRIP = 0x0003;
pub const TRIANGLES = 0x0004;
pub const TRIANGLE_STRIP = 0x0005;
pub const TRIANGLE_FAN = 0x0006;
pub const NEVER = 0x0200;
pub const LESS = 0x0201;
pub const EQUAL = 0x0202;
pub const LEQUAL = 0x0203;
pub const GREATER = 0x0204;
pub const NOTEQUAL = 0x0205;
pub const GEQUAL = 0x0206;
pub const ALWAYS = 0x0207;
pub const ZERO = 0;
pub const ONE = 1;
pub const SRC_COLOR = 0x0300;
pub const ONE_MINUS_SRC_COLOR = 0x0301;
pub const SRC_ALPHA = 0x0302;
pub const ONE_MINUS_SRC_ALPHA = 0x0303;
pub const DST_ALPHA = 0x0304;
pub const ONE_MINUS_DST_ALPHA = 0x0305;
pub const DST_COLOR = 0x0306;
pub const ONE_MINUS_DST_COLOR = 0x0307;
pub const SRC_ALPHA_SATURATE = 0x0308;
pub const FRONT_LEFT = 0x0400;
pub const FRONT_RIGHT = 0x0401;
pub const BACK_LEFT = 0x0402;
pub const BACK_RIGHT = 0x0403;
pub const FRONT = 0x0404;
pub const LEFT = 0x0406;
pub const RIGHT = 0x0407;
pub const FRONT_AND_BACK = 0x0408;
pub const INVALID_ENUM = 0x0500;
pub const INVALID_VALUE = 0x0501;
pub const INVALID_OPERATION = 0x0502;
pub const OUT_OF_MEMORY = 0x0505;
pub const CW = 0x0900;
pub const CCW = 0x0901;
pub const POINT_SIZE = 0x0B11;
pub const POINT_SIZE_RANGE = 0x0B12;
pub const POINT_SIZE_GRANULARITY = 0x0B13;
pub const LINE_SMOOTH = 0x0B20;
pub const LINE_WIDTH = 0x0B21;
pub const LINE_WIDTH_RANGE = 0x0B22;
pub const LINE_WIDTH_GRANULARITY = 0x0B23;
pub const POLYGON_MODE = 0x0B40;
pub const POLYGON_SMOOTH = 0x0B41;
pub const CULL_FACE = 0x0B44;
pub const CULL_FACE_MODE = 0x0B45;
pub const FRONT_FACE = 0x0B46;
pub const DEPTH_RANGE = 0x0B70;
pub const DEPTH_TEST = 0x0B71;
pub const DEPTH_WRITEMASK = 0x0B72;
pub const DEPTH_CLEAR_VALUE = 0x0B73;
pub const DEPTH_FUNC = 0x0B74;
pub const STENCIL_TEST = 0x0B90;
pub const STENCIL_CLEAR_VALUE = 0x0B91;
pub const STENCIL_FUNC = 0x0B92;
pub const STENCIL_VALUE_MASK = 0x0B93;
pub const STENCIL_FAIL = 0x0B94;
pub const STENCIL_PASS_DEPTH_FAIL = 0x0B95;
pub const STENCIL_PASS_DEPTH_PASS = 0x0B96;
pub const STENCIL_REF = 0x0B97;
pub const STENCIL_WRITEMASK = 0x0B98;
pub const VIEWPORT = 0x0BA2;
pub const DITHER = 0x0BD0;
pub const BLEND_DST = 0x0BE0;
pub const BLEND_SRC = 0x0BE1;
pub const BLEND = 0x0BE2;
pub const LOGIC_OP_MODE = 0x0BF0;
pub const DRAW_BUFFER = 0x0C01;
pub const READ_BUFFER = 0x0C02;
pub const SCISSOR_BOX = 0x0C10;
pub const SCISSOR_TEST = 0x0C11;
pub const COLOR_CLEAR_VALUE = 0x0C22;
pub const COLOR_WRITEMASK = 0x0C23;
pub const DOUBLEBUFFER = 0x0C32;
pub const STEREO = 0x0C33;
pub const LINE_SMOOTH_HINT = 0x0C52;
pub const POLYGON_SMOOTH_HINT = 0x0C53;
pub const UNPACK_SWAP_BYTES = 0x0CF0;
pub const UNPACK_LSB_FIRST = 0x0CF1;
pub const UNPACK_ROW_LENGTH = 0x0CF2;
pub const UNPACK_SKIP_ROWS = 0x0CF3;
pub const UNPACK_SKIP_PIXELS = 0x0CF4;
pub const UNPACK_ALIGNMENT = 0x0CF5;
pub const PACK_SWAP_BYTES = 0x0D00;
pub const PACK_LSB_FIRST = 0x0D01;
pub const PACK_ROW_LENGTH = 0x0D02;
pub const PACK_SKIP_ROWS = 0x0D03;
pub const PACK_SKIP_PIXELS = 0x0D04;
pub const PACK_ALIGNMENT = 0x0D05;
pub const MAX_TEXTURE_SIZE = 0x0D33;
pub const MAX_VIEWPORT_DIMS = 0x0D3A;
pub const SUBPIXEL_BITS = 0x0D50;
pub const TEXTURE_1D = 0x0DE0;
pub const TEXTURE_2D = 0x0DE1;
pub const TEXTURE_WIDTH = 0x1000;
pub const TEXTURE_HEIGHT = 0x1001;
pub const TEXTURE_BORDER_COLOR = 0x1004;
pub const DONT_CARE = 0x1100;
pub const FASTEST = 0x1101;
pub const NICEST = 0x1102;
pub const BYTE = 0x1400;
pub const UNSIGNED_BYTE = 0x1401;
pub const SHORT = 0x1402;
pub const UNSIGNED_SHORT = 0x1403;
pub const INT = 0x1404;
pub const UNSIGNED_INT = 0x1405;
pub const FLOAT = 0x1406;
pub const STACK_OVERFLOW = 0x0503;
pub const STACK_UNDERFLOW = 0x0504;
pub const CLEAR = 0x1500;
pub const AND = 0x1501;
pub const AND_REVERSE = 0x1502;
pub const COPY = 0x1503;
pub const AND_INVERTED = 0x1504;
pub const NOOP = 0x1505;
pub const XOR = 0x1506;
pub const OR = 0x1507;
pub const NOR = 0x1508;
pub const EQUIV = 0x1509;
pub const INVERT = 0x150A;
pub const OR_REVERSE = 0x150B;
pub const COPY_INVERTED = 0x150C;
pub const OR_INVERTED = 0x150D;
pub const NAND = 0x150E;
pub const SET = 0x150F;
pub const TEXTURE = 0x1702;
pub const COLOR = 0x1800;
pub const DEPTH = 0x1801;
pub const STENCIL = 0x1802;
pub const DEPTH_COMPONENT = 0x1902;
pub const RED = 0x1903;
pub const GREEN = 0x1904;
pub const BLUE = 0x1905;
pub const ALPHA = 0x1906;
pub const RGB = 0x1907;
pub const RGBA = 0x1908;
pub const POINT = 0x1B00;
pub const LINE = 0x1B01;
pub const FILL = 0x1B02;
pub const KEEP = 0x1E00;
pub const REPLACE = 0x1E01;
pub const INCR = 0x1E02;
pub const DECR = 0x1E03;
pub const VENDOR = 0x1F00;
pub const RENDERER = 0x1F01;
pub const VERSION = 0x1F02;
pub const EXTENSIONS = 0x1F03;
pub const NEAREST = 0x2600;
pub const LINEAR = 0x2601;
pub const NEAREST_MIPMAP_NEAREST = 0x2700;
pub const LINEAR_MIPMAP_NEAREST = 0x2701;
pub const NEAREST_MIPMAP_LINEAR = 0x2702;
pub const LINEAR_MIPMAP_LINEAR = 0x2703;
pub const TEXTURE_MAG_FILTER = 0x2800;
pub const TEXTURE_MIN_FILTER = 0x2801;
pub const TEXTURE_WRAP_S = 0x2802;
pub const TEXTURE_WRAP_T = 0x2803;
pub const REPEAT = 0x2901;
pub const CURRENT_BIT = 0x00000001;
pub const POINT_BIT = 0x00000002;
pub const LINE_BIT = 0x00000004;
pub const POLYGON_BIT = 0x00000008;
pub const POLYGON_STIPPLE_BIT = 0x00000010;
pub const PIXEL_MODE_BIT = 0x00000020;
pub const LIGHTING_BIT = 0x00000040;
pub const FOG_BIT = 0x00000080;
pub const ACCUM_BUFFER_BIT = 0x00000200;
pub const VIEWPORT_BIT = 0x00000800;
pub const TRANSFORM_BIT = 0x00001000;
pub const ENABLE_BIT = 0x00002000;
pub const HINT_BIT = 0x00008000;
pub const EVAL_BIT = 0x00010000;
pub const LIST_BIT = 0x00020000;
pub const TEXTURE_BIT = 0x00040000;
pub const SCISSOR_BIT = 0x00080000;
pub const ALL_ATTRIB_BITS = 0xFFFFFFFF;
pub const QUAD_STRIP = 0x0008;
pub const POLYGON = 0x0009;
pub const ACCUM = 0x0100;
pub const LOAD = 0x0101;
pub const RETURN = 0x0102;
pub const MULT = 0x0103;
pub const ADD = 0x0104;
pub const AUX0 = 0x0409;
pub const AUX1 = 0x040A;
pub const AUX2 = 0x040B;
pub const AUX3 = 0x040C;
pub const 2D = 0x0600;
pub const 3D = 0x0601;
pub const 3D_COLOR = 0x0602;
pub const 3D_COLOR_TEXTURE = 0x0603;
pub const 4D_COLOR_TEXTURE = 0x0604;
pub const PASS_THROUGH_TOKEN = 0x0700;
pub const POINT_TOKEN = 0x0701;
pub const LINE_TOKEN = 0x0702;
pub const POLYGON_TOKEN = 0x0703;
pub const BITMAP_TOKEN = 0x0704;
pub const DRAW_PIXEL_TOKEN = 0x0705;
pub const COPY_PIXEL_TOKEN = 0x0706;
pub const LINE_RESET_TOKEN = 0x0707;
pub const EXP = 0x0800;
pub const EXP2 = 0x0801;
pub const COEFF = 0x0A00;
pub const ORDER = 0x0A01;
pub const DOMAIN = 0x0A02;
pub const PIXEL_MAP_I_TO_I = 0x0C70;
pub const PIXEL_MAP_S_TO_S = 0x0C71;
pub const PIXEL_MAP_I_TO_R = 0x0C72;
pub const PIXEL_MAP_I_TO_G = 0x0C73;
pub const PIXEL_MAP_I_TO_B = 0x0C74;
pub const PIXEL_MAP_I_TO_A = 0x0C75;
pub const PIXEL_MAP_R_TO_R = 0x0C76;
pub const PIXEL_MAP_G_TO_G = 0x0C77;
pub const PIXEL_MAP_B_TO_B = 0x0C78;
pub const PIXEL_MAP_A_TO_A = 0x0C79;
pub const CURRENT_COLOR = 0x0B00;
pub const CURRENT_INDEX = 0x0B01;
pub const CURRENT_NORMAL = 0x0B02;
pub const CURRENT_TEXTURE_COORDS = 0x0B03;
pub const CURRENT_RASTER_COLOR = 0x0B04;
pub const CURRENT_RASTER_INDEX = 0x0B05;
pub const CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
pub const CURRENT_RASTER_POSITION = 0x0B07;
pub const CURRENT_RASTER_POSITION_VALID = 0x0B08;
pub const CURRENT_RASTER_DISTANCE = 0x0B09;
pub const POINT_SMOOTH = 0x0B10;
pub const LINE_STIPPLE = 0x0B24;
pub const LINE_STIPPLE_PATTERN = 0x0B25;
pub const LINE_STIPPLE_REPEAT = 0x0B26;
pub const LIST_MODE = 0x0B30;
pub const MAX_LIST_NESTING = 0x0B31;
pub const LIST_BASE = 0x0B32;
pub const LIST_INDEX = 0x0B33;
pub const POLYGON_STIPPLE = 0x0B42;
pub const EDGE_FLAG = 0x0B43;
pub const LIGHTING = 0x0B50;
pub const LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
pub const LIGHT_MODEL_TWO_SIDE = 0x0B52;
pub const LIGHT_MODEL_AMBIENT = 0x0B53;
pub const SHADE_MODEL = 0x0B54;
pub const COLOR_MATERIAL_FACE = 0x0B55;
pub const COLOR_MATERIAL_PARAMETER = 0x0B56;
pub const COLOR_MATERIAL = 0x0B57;
pub const FOG = 0x0B60;
pub const FOG_INDEX = 0x0B61;
pub const FOG_DENSITY = 0x0B62;
pub const FOG_START = 0x0B63;
pub const FOG_END = 0x0B64;
pub const FOG_MODE = 0x0B65;
pub const FOG_COLOR = 0x0B66;
pub const ACCUM_CLEAR_VALUE = 0x0B80;
pub const MATRIX_MODE = 0x0BA0;
pub const NORMALIZE = 0x0BA1;
pub const MODELVIEW_STACK_DEPTH = 0x0BA3;
pub const PROJECTION_STACK_DEPTH = 0x0BA4;
pub const TEXTURE_STACK_DEPTH = 0x0BA5;
pub const MODELVIEW_MATRIX = 0x0BA6;
pub const PROJECTION_MATRIX = 0x0BA7;
pub const TEXTURE_MATRIX = 0x0BA8;
pub const ATTRIB_STACK_DEPTH = 0x0BB0;
pub const ALPHA_TEST = 0x0BC0;
pub const ALPHA_TEST_FUNC = 0x0BC1;
pub const ALPHA_TEST_REF = 0x0BC2;
pub const LOGIC_OP = 0x0BF1;
pub const AUX_BUFFERS = 0x0C00;
pub const INDEX_CLEAR_VALUE = 0x0C20;
pub const INDEX_WRITEMASK = 0x0C21;
pub const INDEX_MODE = 0x0C30;
pub const RGBA_MODE = 0x0C31;
pub const RENDER_MODE = 0x0C40;
pub const PERSPECTIVE_CORRECTION_HINT = 0x0C50;
pub const POINT_SMOOTH_HINT = 0x0C51;
pub const FOG_HINT = 0x0C54;
pub const TEXTURE_GEN_S = 0x0C60;
pub const TEXTURE_GEN_T = 0x0C61;
pub const TEXTURE_GEN_R = 0x0C62;
pub const TEXTURE_GEN_Q = 0x0C63;
pub const PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
pub const PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
pub const PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
pub const PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
pub const PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
pub const PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
pub const PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
pub const PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
pub const PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
pub const PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
pub const MAP_COLOR = 0x0D10;
pub const MAP_STENCIL = 0x0D11;
pub const INDEX_SHIFT = 0x0D12;
pub const INDEX_OFFSET = 0x0D13;
pub const RED_SCALE = 0x0D14;
pub const RED_BIAS = 0x0D15;
pub const ZOOM_X = 0x0D16;
pub const ZOOM_Y = 0x0D17;
pub const GREEN_SCALE = 0x0D18;
pub const GREEN_BIAS = 0x0D19;
pub const BLUE_SCALE = 0x0D1A;
pub const BLUE_BIAS = 0x0D1B;
pub const ALPHA_SCALE = 0x0D1C;
pub const ALPHA_BIAS = 0x0D1D;
pub const DEPTH_SCALE = 0x0D1E;
pub const DEPTH_BIAS = 0x0D1F;
pub const MAX_EVAL_ORDER = 0x0D30;
pub const MAX_LIGHTS = 0x0D31;
pub const MAX_CLIP_PLANES = 0x0D32;
pub const MAX_PIXEL_MAP_TABLE = 0x0D34;
pub const MAX_ATTRIB_STACK_DEPTH = 0x0D35;
pub const MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
pub const MAX_NAME_STACK_DEPTH = 0x0D37;
pub const MAX_PROJECTION_STACK_DEPTH = 0x0D38;
pub const MAX_TEXTURE_STACK_DEPTH = 0x0D39;
pub const INDEX_BITS = 0x0D51;
pub const RED_BITS = 0x0D52;
pub const GREEN_BITS = 0x0D53;
pub const BLUE_BITS = 0x0D54;
pub const ALPHA_BITS = 0x0D55;
pub const DEPTH_BITS = 0x0D56;
pub const STENCIL_BITS = 0x0D57;
pub const ACCUM_RED_BITS = 0x0D58;
pub const ACCUM_GREEN_BITS = 0x0D59;
pub const ACCUM_BLUE_BITS = 0x0D5A;
pub const ACCUM_ALPHA_BITS = 0x0D5B;
pub const NAME_STACK_DEPTH = 0x0D70;
pub const AUTO_NORMAL = 0x0D80;
pub const MAP1_COLOR_4 = 0x0D90;
pub const MAP1_INDEX = 0x0D91;
pub const MAP1_NORMAL = 0x0D92;
pub const MAP1_TEXTURE_COORD_1 = 0x0D93;
pub const MAP1_TEXTURE_COORD_2 = 0x0D94;
pub const MAP1_TEXTURE_COORD_3 = 0x0D95;
pub const MAP1_TEXTURE_COORD_4 = 0x0D96;
pub const MAP1_VERTEX_3 = 0x0D97;
pub const MAP1_VERTEX_4 = 0x0D98;
pub const MAP2_COLOR_4 = 0x0DB0;
pub const MAP2_INDEX = 0x0DB1;
pub const MAP2_NORMAL = 0x0DB2;
pub const MAP2_TEXTURE_COORD_1 = 0x0DB3;
pub const MAP2_TEXTURE_COORD_2 = 0x0DB4;
pub const MAP2_TEXTURE_COORD_3 = 0x0DB5;
pub const MAP2_TEXTURE_COORD_4 = 0x0DB6;
pub const MAP2_VERTEX_3 = 0x0DB7;
pub const MAP2_VERTEX_4 = 0x0DB8;
pub const MAP1_GRID_DOMAIN = 0x0DD0;
pub const MAP1_GRID_SEGMENTS = 0x0DD1;
pub const MAP2_GRID_DOMAIN = 0x0DD2;
pub const MAP2_GRID_SEGMENTS = 0x0DD3;
pub const TEXTURE_COMPONENTS = 0x1003;
pub const TEXTURE_BORDER = 0x1005;
pub const AMBIENT = 0x1200;
pub const DIFFUSE = 0x1201;
pub const SPECULAR = 0x1202;
pub const POSITION = 0x1203;
pub const SPOT_DIRECTION = 0x1204;
pub const SPOT_EXPONENT = 0x1205;
pub const SPOT_CUTOFF = 0x1206;
pub const CONSTANT_ATTENUATION = 0x1207;
pub const LINEAR_ATTENUATION = 0x1208;
pub const QUADRATIC_ATTENUATION = 0x1209;
pub const COMPILE = 0x1300;
pub const COMPILE_AND_EXECUTE = 0x1301;
pub const 2_BYTES = 0x1407;
pub const 3_BYTES = 0x1408;
pub const 4_BYTES = 0x1409;
pub const EMISSION = 0x1600;
pub const SHININESS = 0x1601;
pub const AMBIENT_AND_DIFFUSE = 0x1602;
pub const COLOR_INDEXES = 0x1603;
pub const MODELVIEW = 0x1700;
pub const PROJECTION = 0x1701;
pub const COLOR_INDEX = 0x1900;
pub const LUMINANCE = 0x1909;
pub const LUMINANCE_ALPHA = 0x190A;
pub const BITMAP = 0x1A00;
pub const RENDER = 0x1C00;
pub const FEEDBACK = 0x1C01;
pub const SELECT = 0x1C02;
pub const FLAT = 0x1D00;
pub const SMOOTH = 0x1D01;
pub const S = 0x2000;
pub const T = 0x2001;
pub const R = 0x2002;
pub const Q = 0x2003;
pub const MODULATE = 0x2100;
pub const DECAL = 0x2101;
pub const TEXTURE_ENV_MODE = 0x2200;
pub const TEXTURE_ENV_COLOR = 0x2201;
pub const TEXTURE_ENV = 0x2300;
pub const EYE_LINEAR = 0x2400;
pub const OBJECT_LINEAR = 0x2401;
pub const SPHERE_MAP = 0x2402;
pub const TEXTURE_GEN_MODE = 0x2500;
pub const OBJECT_PLANE = 0x2501;
pub const EYE_PLANE = 0x2502;
pub const CLAMP = 0x2900;
pub const CLIP_PLANE0 = 0x3000;
pub const CLIP_PLANE1 = 0x3001;
pub const CLIP_PLANE2 = 0x3002;
pub const CLIP_PLANE3 = 0x3003;
pub const CLIP_PLANE4 = 0x3004;
pub const CLIP_PLANE5 = 0x3005;
pub const LIGHT0 = 0x4000;
pub const LIGHT1 = 0x4001;
pub const LIGHT2 = 0x4002;
pub const LIGHT3 = 0x4003;
pub const LIGHT4 = 0x4004;
pub const LIGHT5 = 0x4005;
pub const LIGHT6 = 0x4006;
pub const LIGHT7 = 0x4007;
pub const COLOR_LOGIC_OP = 0x0BF2;
pub const POLYGON_OFFSET_UNITS = 0x2A00;
pub const POLYGON_OFFSET_POINT = 0x2A01;
pub const POLYGON_OFFSET_LINE = 0x2A02;
pub const POLYGON_OFFSET_FILL = 0x8037;
pub const POLYGON_OFFSET_FACTOR = 0x8038;
pub const TEXTURE_INTERNAL_FORMAT = 0x1003;
pub const TEXTURE_RED_SIZE = 0x805C;
pub const TEXTURE_GREEN_SIZE = 0x805D;
pub const TEXTURE_BLUE_SIZE = 0x805E;
pub const TEXTURE_ALPHA_SIZE = 0x805F;
pub const DOUBLE = 0x140A;
pub const PROXY_TEXTURE_1D = 0x8063;
pub const PROXY_TEXTURE_2D = 0x8064;
pub const R3_G3_B2 = 0x2A10;
pub const RGB4 = 0x804F;
pub const RGB5 = 0x8050;
pub const RGB8 = 0x8051;
pub const RGB10 = 0x8052;
pub const RGB12 = 0x8053;
pub const RGB16 = 0x8054;
pub const RGBA2 = 0x8055;
pub const RGBA4 = 0x8056;
pub const RGB5_A1 = 0x8057;
pub const RGBA8 = 0x8058;
pub const RGB10_A2 = 0x8059;
pub const RGBA12 = 0x805A;
pub const RGBA16 = 0x805B;
pub const CLIENT_PIXEL_STORE_BIT = 0x00000001;
pub const CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
pub const CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
pub const VERTEX_ARRAY_POINTER = 0x808E;
pub const NORMAL_ARRAY_POINTER = 0x808F;
pub const COLOR_ARRAY_POINTER = 0x8090;
pub const INDEX_ARRAY_POINTER = 0x8091;
pub const TEXTURE_COORD_ARRAY_POINTER = 0x8092;
pub const EDGE_FLAG_ARRAY_POINTER = 0x8093;
pub const FEEDBACK_BUFFER_POINTER = 0x0DF0;
pub const SELECTION_BUFFER_POINTER = 0x0DF3;
pub const CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
pub const INDEX_LOGIC_OP = 0x0BF1;
pub const MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
pub const FEEDBACK_BUFFER_SIZE = 0x0DF1;
pub const FEEDBACK_BUFFER_TYPE = 0x0DF2;
pub const SELECTION_BUFFER_SIZE = 0x0DF4;
pub const NORMAL_ARRAY = 0x8075;
pub const COLOR_ARRAY = 0x8076;
pub const INDEX_ARRAY = 0x8077;
pub const TEXTURE_COORD_ARRAY = 0x8078;
pub const EDGE_FLAG_ARRAY = 0x8079;
pub const VERTEX_ARRAY_SIZE = 0x807A;
pub const VERTEX_ARRAY_TYPE = 0x807B;
pub const VERTEX_ARRAY_STRIDE = 0x807C;
pub const NORMAL_ARRAY_TYPE = 0x807E;
pub const NORMAL_ARRAY_STRIDE = 0x807F;
pub const COLOR_ARRAY_SIZE = 0x8081;
pub const COLOR_ARRAY_TYPE = 0x8082;
pub const COLOR_ARRAY_STRIDE = 0x8083;
pub const INDEX_ARRAY_TYPE = 0x8085;
pub const INDEX_ARRAY_STRIDE = 0x8086;
pub const TEXTURE_COORD_ARRAY_SIZE = 0x8088;
pub const TEXTURE_COORD_ARRAY_TYPE = 0x8089;
pub const TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
pub const EDGE_FLAG_ARRAY_STRIDE = 0x808C;
pub const TEXTURE_LUMINANCE_SIZE = 0x8060;
pub const TEXTURE_INTENSITY_SIZE = 0x8061;
pub const TEXTURE_PRIORITY = 0x8066;
pub const TEXTURE_RESIDENT = 0x8067;
pub const ALPHA4 = 0x803B;
pub const ALPHA8 = 0x803C;
pub const ALPHA12 = 0x803D;
pub const ALPHA16 = 0x803E;
pub const LUMINANCE4 = 0x803F;
pub const LUMINANCE8 = 0x8040;
pub const LUMINANCE12 = 0x8041;
pub const LUMINANCE16 = 0x8042;
pub const LUMINANCE4_ALPHA4 = 0x8043;
pub const LUMINANCE6_ALPHA2 = 0x8044;
pub const LUMINANCE8_ALPHA8 = 0x8045;
pub const LUMINANCE12_ALPHA4 = 0x8046;
pub const LUMINANCE12_ALPHA12 = 0x8047;
pub const LUMINANCE16_ALPHA16 = 0x8048;
pub const INTENSITY = 0x8049;
pub const INTENSITY4 = 0x804A;
pub const INTENSITY8 = 0x804B;
pub const INTENSITY12 = 0x804C;
pub const INTENSITY16 = 0x804D;
pub const V2F = 0x2A20;
pub const V3F = 0x2A21;
pub const C4UB_V2F = 0x2A22;
pub const C4UB_V3F = 0x2A23;
pub const C3F_V3F = 0x2A24;
pub const N3F_V3F = 0x2A25;
pub const C4F_N3F_V3F = 0x2A26;
pub const T2F_V3F = 0x2A27;
pub const T4F_V4F = 0x2A28;
pub const T2F_C4UB_V3F = 0x2A29;
pub const T2F_C3F_V3F = 0x2A2A;
pub const T2F_N3F_V3F = 0x2A2B;
pub const T2F_C4F_N3F_V3F = 0x2A2C;
pub const T4F_C4F_N3F_V4F = 0x2A2D;
pub const UNSIGNED_BYTE_3_3_2 = 0x8032;
pub const UNSIGNED_SHORT_4_4_4_4 = 0x8033;
pub const UNSIGNED_SHORT_5_5_5_1 = 0x8034;
pub const UNSIGNED_INT_8_8_8_8 = 0x8035;
pub const UNSIGNED_INT_10_10_10_2 = 0x8036;
pub const PACK_SKIP_IMAGES = 0x806B;
pub const PACK_IMAGE_HEIGHT = 0x806C;
pub const UNPACK_SKIP_IMAGES = 0x806D;
pub const UNPACK_IMAGE_HEIGHT = 0x806E;
pub const TEXTURE_3D = 0x806F;
pub const PROXY_TEXTURE_3D = 0x8070;
pub const TEXTURE_DEPTH = 0x8071;
pub const TEXTURE_WRAP_R = 0x8072;
pub const MAX_3D_TEXTURE_SIZE = 0x8073;
pub const UNSIGNED_BYTE_2_3_3_REV = 0x8362;
pub const UNSIGNED_SHORT_5_6_5 = 0x8363;
pub const UNSIGNED_SHORT_5_6_5_REV = 0x8364;
pub const UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
pub const UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
pub const UNSIGNED_INT_8_8_8_8_REV = 0x8367;
pub const UNSIGNED_INT_2_10_10_10_REV = 0x8368;
pub const BGR = 0x80E0;
pub const BGRA = 0x80E1;
pub const MAX_ELEMENTS_VERTICES = 0x80E8;
pub const MAX_ELEMENTS_INDICES = 0x80E9;
pub const CLAMP_TO_EDGE = 0x812F;
pub const TEXTURE_MIN_LOD = 0x813A;
pub const TEXTURE_MAX_LOD = 0x813B;
pub const TEXTURE_BASE_LEVEL = 0x813C;
pub const TEXTURE_MAX_LEVEL = 0x813D;
pub const SMOOTH_POINT_SIZE_RANGE = 0x0B12;
pub const SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
pub const SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
pub const SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
pub const ALIASED_LINE_WIDTH_RANGE = 0x846E;
pub const RESCALE_NORMAL = 0x803A;
pub const LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
pub const SINGLE_COLOR = 0x81F9;
pub const SEPARATE_SPECULAR_COLOR = 0x81FA;
pub const ALIASED_POINT_SIZE_RANGE = 0x846D;
pub const TEXTURE0 = 0x84C0;
pub const TEXTURE1 = 0x84C1;
pub const TEXTURE2 = 0x84C2;
pub const TEXTURE3 = 0x84C3;
pub const TEXTURE4 = 0x84C4;
pub const TEXTURE5 = 0x84C5;
pub const TEXTURE6 = 0x84C6;
pub const TEXTURE7 = 0x84C7;
pub const TEXTURE8 = 0x84C8;
pub const TEXTURE9 = 0x84C9;
pub const TEXTURE10 = 0x84CA;
pub const TEXTURE11 = 0x84CB;
pub const TEXTURE12 = 0x84CC;
pub const TEXTURE13 = 0x84CD;
pub const TEXTURE14 = 0x84CE;
pub const TEXTURE15 = 0x84CF;
pub const TEXTURE16 = 0x84D0;
pub const TEXTURE17 = 0x84D1;
pub const TEXTURE18 = 0x84D2;
pub const TEXTURE19 = 0x84D3;
pub const TEXTURE20 = 0x84D4;
pub const TEXTURE21 = 0x84D5;
pub const TEXTURE22 = 0x84D6;
pub const TEXTURE23 = 0x84D7;
pub const TEXTURE24 = 0x84D8;
pub const TEXTURE25 = 0x84D9;
pub const TEXTURE26 = 0x84DA;
pub const TEXTURE27 = 0x84DB;
pub const TEXTURE28 = 0x84DC;
pub const TEXTURE29 = 0x84DD;
pub const TEXTURE30 = 0x84DE;
pub const TEXTURE31 = 0x84DF;
pub const ACTIVE_TEXTURE = 0x84E0;
pub const MULTISAMPLE = 0x809D;
pub const SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
pub const SAMPLE_ALPHA_TO_ONE = 0x809F;
pub const SAMPLE_COVERAGE = 0x80A0;
pub const SAMPLE_BUFFERS = 0x80A8;
pub const SAMPLES = 0x80A9;
pub const SAMPLE_COVERAGE_VALUE = 0x80AA;
pub const SAMPLE_COVERAGE_INVERT = 0x80AB;
pub const TEXTURE_CUBE_MAP = 0x8513;
pub const TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
pub const TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
pub const TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
pub const TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
pub const TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
pub const TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
pub const PROXY_TEXTURE_CUBE_MAP = 0x851B;
pub const MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
pub const COMPRESSED_RGB = 0x84ED;
pub const COMPRESSED_RGBA = 0x84EE;
pub const TEXTURE_COMPRESSION_HINT = 0x84EF;
pub const TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
pub const TEXTURE_COMPRESSED = 0x86A1;
pub const NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
pub const COMPRESSED_TEXTURE_FORMATS = 0x86A3;
pub const CLAMP_TO_BORDER = 0x812D;
pub const CLIENT_ACTIVE_TEXTURE = 0x84E1;
pub const MAX_TEXTURE_UNITS = 0x84E2;
pub const TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
pub const TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
pub const TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
pub const TRANSPOSE_COLOR_MATRIX = 0x84E6;
pub const MULTISAMPLE_BIT = 0x20000000;
pub const NORMAL_MAP = 0x8511;
pub const REFLECTION_MAP = 0x8512;
pub const COMPRESSED_ALPHA = 0x84E9;
pub const COMPRESSED_LUMINANCE = 0x84EA;
pub const COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
pub const COMPRESSED_INTENSITY = 0x84EC;
pub const COMBINE = 0x8570;
pub const COMBINE_RGB = 0x8571;
pub const COMBINE_ALPHA = 0x8572;
pub const SOURCE0_RGB = 0x8580;
pub const SOURCE1_RGB = 0x8581;
pub const SOURCE2_RGB = 0x8582;
pub const SOURCE0_ALPHA = 0x8588;
pub const SOURCE1_ALPHA = 0x8589;
pub const SOURCE2_ALPHA = 0x858A;
pub const OPERAND0_RGB = 0x8590;
pub const OPERAND1_RGB = 0x8591;
pub const OPERAND2_RGB = 0x8592;
pub const OPERAND0_ALPHA = 0x8598;
pub const OPERAND1_ALPHA = 0x8599;
pub const OPERAND2_ALPHA = 0x859A;
pub const RGB_SCALE = 0x8573;
pub const ADD_SIGNED = 0x8574;
pub const INTERPOLATE = 0x8575;
pub const SUBTRACT = 0x84E7;
pub const CONSTANT = 0x8576;
pub const PRIMARY_COLOR = 0x8577;
pub const PREVIOUS = 0x8578;
pub const DOT3_RGB = 0x86AE;
pub const DOT3_RGBA = 0x86AF;
pub const BLEND_DST_RGB = 0x80C8;
pub const BLEND_SRC_RGB = 0x80C9;
pub const BLEND_DST_ALPHA = 0x80CA;
pub const BLEND_SRC_ALPHA = 0x80CB;
pub const POINT_FADE_THRESHOLD_SIZE = 0x8128;
pub const DEPTH_COMPONENT16 = 0x81A5;
pub const DEPTH_COMPONENT24 = 0x81A6;
pub const DEPTH_COMPONENT32 = 0x81A7;
pub const MIRRORED_REPEAT = 0x8370;
pub const MAX_TEXTURE_LOD_BIAS = 0x84FD;
pub const TEXTURE_LOD_BIAS = 0x8501;
pub const INCR_WRAP = 0x8507;
pub const DECR_WRAP = 0x8508;
pub const TEXTURE_DEPTH_SIZE = 0x884A;
pub const TEXTURE_COMPARE_MODE = 0x884C;
pub const TEXTURE_COMPARE_FUNC = 0x884D;
pub const POINT_SIZE_MIN = 0x8126;
pub const POINT_SIZE_MAX = 0x8127;
pub const POINT_DISTANCE_ATTENUATION = 0x8129;
pub const GENERATE_MIPMAP = 0x8191;
pub const GENERATE_MIPMAP_HINT = 0x8192;
pub const FOG_COORDINATE_SOURCE = 0x8450;
pub const FOG_COORDINATE = 0x8451;
pub const FRAGMENT_DEPTH = 0x8452;
pub const CURRENT_FOG_COORDINATE = 0x8453;
pub const FOG_COORDINATE_ARRAY_TYPE = 0x8454;
pub const FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
pub const FOG_COORDINATE_ARRAY_POINTER = 0x8456;
pub const FOG_COORDINATE_ARRAY = 0x8457;
pub const COLOR_SUM = 0x8458;
pub const CURRENT_SECONDARY_COLOR = 0x8459;
pub const SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
pub const SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
pub const SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
pub const SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
pub const SECONDARY_COLOR_ARRAY = 0x845E;
pub const TEXTURE_FILTER_CONTROL = 0x8500;
pub const DEPTH_TEXTURE_MODE = 0x884B;
pub const COMPARE_R_TO_TEXTURE = 0x884E;
pub const BLEND_COLOR = 0x8005;
pub const BLEND_EQUATION = 0x8009;
pub const CONSTANT_COLOR = 0x8001;
pub const ONE_MINUS_CONSTANT_COLOR = 0x8002;
pub const CONSTANT_ALPHA = 0x8003;
pub const ONE_MINUS_CONSTANT_ALPHA = 0x8004;
pub const FUNC_ADD = 0x8006;
pub const FUNC_REVERSE_SUBTRACT = 0x800B;
pub const FUNC_SUBTRACT = 0x800A;
pub const MIN = 0x8007;
pub const MAX = 0x8008;
pub const BUFFER_SIZE = 0x8764;
pub const BUFFER_USAGE = 0x8765;
pub const QUERY_COUNTER_BITS = 0x8864;
pub const CURRENT_QUERY = 0x8865;
pub const QUERY_RESULT = 0x8866;
pub const QUERY_RESULT_AVAILABLE = 0x8867;
pub const ARRAY_BUFFER = 0x8892;
pub const ELEMENT_ARRAY_BUFFER = 0x8893;
pub const ARRAY_BUFFER_BINDING = 0x8894;
pub const ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
pub const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
pub const READ_ONLY = 0x88B8;
pub const WRITE_ONLY = 0x88B9;
pub const READ_WRITE = 0x88BA;
pub const BUFFER_ACCESS = 0x88BB;
pub const BUFFER_MAPPED = 0x88BC;
pub const BUFFER_MAP_POINTER = 0x88BD;
pub const STREAM_DRAW = 0x88E0;
pub const STREAM_READ = 0x88E1;
pub const STREAM_COPY = 0x88E2;
pub const STATIC_DRAW = 0x88E4;
pub const STATIC_READ = 0x88E5;
pub const STATIC_COPY = 0x88E6;
pub const DYNAMIC_DRAW = 0x88E8;
pub const DYNAMIC_READ = 0x88E9;
pub const DYNAMIC_COPY = 0x88EA;
pub const SAMPLES_PASSED = 0x8914;
pub const SRC1_ALPHA = 0x8589;
pub const VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
pub const NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
pub const COLOR_ARRAY_BUFFER_BINDING = 0x8898;
pub const INDEX_ARRAY_BUFFER_BINDING = 0x8899;
pub const TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
pub const EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
pub const SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
pub const FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
pub const WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
pub const FOG_COORD_SRC = 0x8450;
pub const FOG_COORD = 0x8451;
pub const CURRENT_FOG_COORD = 0x8453;
pub const FOG_COORD_ARRAY_TYPE = 0x8454;
pub const FOG_COORD_ARRAY_STRIDE = 0x8455;
pub const FOG_COORD_ARRAY_POINTER = 0x8456;
pub const FOG_COORD_ARRAY = 0x8457;
pub const FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
pub const SRC0_RGB = 0x8580;
pub const SRC1_RGB = 0x8581;
pub const SRC2_RGB = 0x8582;
pub const SRC0_ALPHA = 0x8588;
pub const SRC2_ALPHA = 0x858A;
pub const BLEND_EQUATION_RGB = 0x8009;
pub const VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
pub const VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
pub const VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
pub const VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
pub const CURRENT_VERTEX_ATTRIB = 0x8626;
pub const VERTEX_PROGRAM_POINT_SIZE = 0x8642;
pub const VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
pub const STENCIL_BACK_FUNC = 0x8800;
pub const STENCIL_BACK_FAIL = 0x8801;
pub const STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
pub const STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
pub const MAX_DRAW_BUFFERS = 0x8824;
pub const DRAW_BUFFER0 = 0x8825;
pub const DRAW_BUFFER1 = 0x8826;
pub const DRAW_BUFFER2 = 0x8827;
pub const DRAW_BUFFER3 = 0x8828;
pub const DRAW_BUFFER4 = 0x8829;
pub const DRAW_BUFFER5 = 0x882A;
pub const DRAW_BUFFER6 = 0x882B;
pub const DRAW_BUFFER7 = 0x882C;
pub const DRAW_BUFFER8 = 0x882D;
pub const DRAW_BUFFER9 = 0x882E;
pub const DRAW_BUFFER10 = 0x882F;
pub const DRAW_BUFFER11 = 0x8830;
pub const DRAW_BUFFER12 = 0x8831;
pub const DRAW_BUFFER13 = 0x8832;
pub const DRAW_BUFFER14 = 0x8833;
pub const DRAW_BUFFER15 = 0x8834;
pub const BLEND_EQUATION_ALPHA = 0x883D;
pub const MAX_VERTEX_ATTRIBS = 0x8869;
pub const VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
pub const MAX_TEXTURE_IMAGE_UNITS = 0x8872;
pub const FRAGMENT_SHADER = 0x8B30;
pub const VERTEX_SHADER = 0x8B31;
pub const MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
pub const MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
pub const MAX_VARYING_FLOATS = 0x8B4B;
pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
pub const MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
pub const SHADER_TYPE = 0x8B4F;
pub const FLOAT_VEC2 = 0x8B50;
pub const FLOAT_VEC3 = 0x8B51;
pub const FLOAT_VEC4 = 0x8B52;
pub const INT_VEC2 = 0x8B53;
pub const INT_VEC3 = 0x8B54;
pub const INT_VEC4 = 0x8B55;
pub const BOOL = 0x8B56;
pub const BOOL_VEC2 = 0x8B57;
pub const BOOL_VEC3 = 0x8B58;
pub const BOOL_VEC4 = 0x8B59;
pub const FLOAT_MAT2 = 0x8B5A;
pub const FLOAT_MAT3 = 0x8B5B;
pub const FLOAT_MAT4 = 0x8B5C;
pub const SAMPLER_1D = 0x8B5D;
pub const SAMPLER_2D = 0x8B5E;
pub const SAMPLER_3D = 0x8B5F;
pub const SAMPLER_CUBE = 0x8B60;
pub const SAMPLER_1D_SHADOW = 0x8B61;
pub const SAMPLER_2D_SHADOW = 0x8B62;
pub const DELETE_STATUS = 0x8B80;
pub const COMPILE_STATUS = 0x8B81;
pub const LINK_STATUS = 0x8B82;
pub const VALIDATE_STATUS = 0x8B83;
pub const INFO_LOG_LENGTH = 0x8B84;
pub const ATTACHED_SHADERS = 0x8B85;
pub const ACTIVE_UNIFORMS = 0x8B86;
pub const ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
pub const SHADER_SOURCE_LENGTH = 0x8B88;
pub const ACTIVE_ATTRIBUTES = 0x8B89;
pub const ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
pub const FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
pub const SHADING_LANGUAGE_VERSION = 0x8B8C;
pub const CURRENT_PROGRAM = 0x8B8D;
pub const POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
pub const STENCIL_BACK_REF = 0x8CA3;
pub const STENCIL_BACK_VALUE_MASK = 0x8CA4;
pub const STENCIL_BACK_WRITEMASK = 0x8CA5;
pub const VERTEX_PROGRAM_TWO_SIDE = 0x8643;
pub const POINT_SPRITE = 0x8861;
pub const COORD_REPLACE = 0x8862;
pub const MAX_TEXTURE_COORDS = 0x8871;
pub const PIXEL_PACK_BUFFER = 0x88EB;
pub const PIXEL_UNPACK_BUFFER = 0x88EC;
pub const PIXEL_PACK_BUFFER_BINDING = 0x88ED;
pub const PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
pub const FLOAT_MAT2x3 = 0x8B65;
pub const FLOAT_MAT2x4 = 0x8B66;
pub const FLOAT_MAT3x2 = 0x8B67;
pub const FLOAT_MAT3x4 = 0x8B68;
pub const FLOAT_MAT4x2 = 0x8B69;
pub const FLOAT_MAT4x3 = 0x8B6A;
pub const SRGB = 0x8C40;
pub const SRGB8 = 0x8C41;
pub const SRGB_ALPHA = 0x8C42;
pub const SRGB8_ALPHA8 = 0x8C43;
pub const COMPRESSED_SRGB = 0x8C48;
pub const COMPRESSED_SRGB_ALPHA = 0x8C49;
pub const CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
pub const SLUMINANCE_ALPHA = 0x8C44;
pub const SLUMINANCE8_ALPHA8 = 0x8C45;
pub const SLUMINANCE = 0x8C46;
pub const SLUMINANCE8 = 0x8C47;
pub const COMPRESSED_SLUMINANCE = 0x8C4A;
pub const COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
pub const COMPARE_REF_TO_TEXTURE = 0x884E;
pub const CLIP_DISTANCE0 = 0x3000;
pub const CLIP_DISTANCE1 = 0x3001;
pub const CLIP_DISTANCE2 = 0x3002;
pub const CLIP_DISTANCE3 = 0x3003;
pub const CLIP_DISTANCE4 = 0x3004;
pub const CLIP_DISTANCE5 = 0x3005;
pub const CLIP_DISTANCE6 = 0x3006;
pub const CLIP_DISTANCE7 = 0x3007;
pub const MAX_CLIP_DISTANCES = 0x0D32;
pub const MAJOR_VERSION = 0x821B;
pub const MINOR_VERSION = 0x821C;
pub const NUM_EXTENSIONS = 0x821D;
pub const CONTEXT_FLAGS = 0x821E;
pub const COMPRESSED_RED = 0x8225;
pub const COMPRESSED_RG = 0x8226;
pub const CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
pub const RGBA32F = 0x8814;
pub const RGB32F = 0x8815;
pub const RGBA16F = 0x881A;
pub const RGB16F = 0x881B;
pub const VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
pub const MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
pub const MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
pub const MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
pub const CLAMP_READ_COLOR = 0x891C;
pub const FIXED_ONLY = 0x891D;
pub const MAX_VARYING_COMPONENTS = 0x8B4B;
pub const TEXTURE_1D_ARRAY = 0x8C18;
pub const PROXY_TEXTURE_1D_ARRAY = 0x8C19;
pub const TEXTURE_2D_ARRAY = 0x8C1A;
pub const PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
pub const R11F_G11F_B10F = 0x8C3A;
pub const RGB9_E5 = 0x8C3D;
pub const UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
pub const TEXTURE_SHARED_SIZE = 0x8C3F;
pub const TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
pub const TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
pub const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
pub const TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
pub const TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
pub const TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
pub const PRIMITIVES_GENERATED = 0x8C87;
pub const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
pub const RASTERIZER_DISCARD = 0x8C89;
pub const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
pub const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
pub const INTERLEAVED_ATTRIBS = 0x8C8C;
pub const SEPARATE_ATTRIBS = 0x8C8D;
pub const TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
pub const RGBA32UI = 0x8D70;
pub const RGB32UI = 0x8D71;
pub const RGBA16UI = 0x8D76;
pub const RGB16UI = 0x8D77;
pub const RGBA8UI = 0x8D7C;
pub const RGB8UI = 0x8D7D;
pub const RGBA32I = 0x8D82;
pub const RGB32I = 0x8D83;
pub const RGBA16I = 0x8D88;
pub const RGB16I = 0x8D89;
pub const RGBA8I = 0x8D8E;
pub const RGB8I = 0x8D8F;
pub const RED_INTEGER = 0x8D94;
pub const GREEN_INTEGER = 0x8D95;
pub const BLUE_INTEGER = 0x8D96;
pub const RGB_INTEGER = 0x8D98;
pub const RGBA_INTEGER = 0x8D99;
pub const BGR_INTEGER = 0x8D9A;
pub const BGRA_INTEGER = 0x8D9B;
pub const SAMPLER_1D_ARRAY = 0x8DC0;
pub const SAMPLER_2D_ARRAY = 0x8DC1;
pub const SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
pub const SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
pub const SAMPLER_CUBE_SHADOW = 0x8DC5;
pub const UNSIGNED_INT_VEC2 = 0x8DC6;
pub const UNSIGNED_INT_VEC3 = 0x8DC7;
pub const UNSIGNED_INT_VEC4 = 0x8DC8;
pub const INT_SAMPLER_1D = 0x8DC9;
pub const INT_SAMPLER_2D = 0x8DCA;
pub const INT_SAMPLER_3D = 0x8DCB;
pub const INT_SAMPLER_CUBE = 0x8DCC;
pub const INT_SAMPLER_1D_ARRAY = 0x8DCE;
pub const INT_SAMPLER_2D_ARRAY = 0x8DCF;
pub const UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
pub const UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
pub const UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
pub const UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
pub const UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
pub const UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
pub const QUERY_WAIT = 0x8E13;
pub const QUERY_NO_WAIT = 0x8E14;
pub const QUERY_BY_REGION_WAIT = 0x8E15;
pub const QUERY_BY_REGION_NO_WAIT = 0x8E16;
pub const BUFFER_ACCESS_FLAGS = 0x911F;
pub const BUFFER_MAP_LENGTH = 0x9120;
pub const BUFFER_MAP_OFFSET = 0x9121;
pub const DEPTH_COMPONENT32F = 0x8CAC;
pub const DEPTH32F_STENCIL8 = 0x8CAD;
pub const FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
pub const INVALID_FRAMEBUFFER_OPERATION = 0x0506;
pub const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
pub const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
pub const FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
pub const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
pub const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
pub const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
pub const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
pub const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
pub const FRAMEBUFFER_DEFAULT = 0x8218;
pub const FRAMEBUFFER_UNDEFINED = 0x8219;
pub const DEPTH_STENCIL_ATTACHMENT = 0x821A;
pub const MAX_RENDERBUFFER_SIZE = 0x84E8;
pub const DEPTH_STENCIL = 0x84F9;
pub const UNSIGNED_INT_24_8 = 0x84FA;
pub const DEPTH24_STENCIL8 = 0x88F0;
pub const TEXTURE_STENCIL_SIZE = 0x88F1;
pub const TEXTURE_RED_TYPE = 0x8C10;
pub const TEXTURE_GREEN_TYPE = 0x8C11;
pub const TEXTURE_BLUE_TYPE = 0x8C12;
pub const TEXTURE_ALPHA_TYPE = 0x8C13;
pub const TEXTURE_DEPTH_TYPE = 0x8C16;
pub const UNSIGNED_NORMALIZED = 0x8C17;
pub const FRAMEBUFFER_BINDING = 0x8CA6;
pub const DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
pub const RENDERBUFFER_BINDING = 0x8CA7;
pub const READ_FRAMEBUFFER = 0x8CA8;
pub const DRAW_FRAMEBUFFER = 0x8CA9;
pub const READ_FRAMEBUFFER_BINDING = 0x8CAA;
pub const RENDERBUFFER_SAMPLES = 0x8CAB;
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
pub const FRAMEBUFFER_COMPLETE = 0x8CD5;
pub const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
pub const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
pub const FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
pub const FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
pub const FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
pub const MAX_COLOR_ATTACHMENTS = 0x8CDF;
pub const COLOR_ATTACHMENT0 = 0x8CE0;
pub const COLOR_ATTACHMENT1 = 0x8CE1;
pub const COLOR_ATTACHMENT2 = 0x8CE2;
pub const COLOR_ATTACHMENT3 = 0x8CE3;
pub const COLOR_ATTACHMENT4 = 0x8CE4;
pub const COLOR_ATTACHMENT5 = 0x8CE5;
pub const COLOR_ATTACHMENT6 = 0x8CE6;
pub const COLOR_ATTACHMENT7 = 0x8CE7;
pub const COLOR_ATTACHMENT8 = 0x8CE8;
pub const COLOR_ATTACHMENT9 = 0x8CE9;
pub const COLOR_ATTACHMENT10 = 0x8CEA;
pub const COLOR_ATTACHMENT11 = 0x8CEB;
pub const COLOR_ATTACHMENT12 = 0x8CEC;
pub const COLOR_ATTACHMENT13 = 0x8CED;
pub const COLOR_ATTACHMENT14 = 0x8CEE;
pub const COLOR_ATTACHMENT15 = 0x8CEF;
pub const COLOR_ATTACHMENT16 = 0x8CF0;
pub const COLOR_ATTACHMENT17 = 0x8CF1;
pub const COLOR_ATTACHMENT18 = 0x8CF2;
pub const COLOR_ATTACHMENT19 = 0x8CF3;
pub const COLOR_ATTACHMENT20 = 0x8CF4;
pub const COLOR_ATTACHMENT21 = 0x8CF5;
pub const COLOR_ATTACHMENT22 = 0x8CF6;
pub const COLOR_ATTACHMENT23 = 0x8CF7;
pub const COLOR_ATTACHMENT24 = 0x8CF8;
pub const COLOR_ATTACHMENT25 = 0x8CF9;
pub const COLOR_ATTACHMENT26 = 0x8CFA;
pub const COLOR_ATTACHMENT27 = 0x8CFB;
pub const COLOR_ATTACHMENT28 = 0x8CFC;
pub const COLOR_ATTACHMENT29 = 0x8CFD;
pub const COLOR_ATTACHMENT30 = 0x8CFE;
pub const COLOR_ATTACHMENT31 = 0x8CFF;
pub const DEPTH_ATTACHMENT = 0x8D00;
pub const STENCIL_ATTACHMENT = 0x8D20;
pub const FRAMEBUFFER = 0x8D40;
pub const RENDERBUFFER = 0x8D41;
pub const RENDERBUFFER_WIDTH = 0x8D42;
pub const RENDERBUFFER_HEIGHT = 0x8D43;
pub const RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
pub const STENCIL_INDEX1 = 0x8D46;
pub const STENCIL_INDEX4 = 0x8D47;
pub const STENCIL_INDEX16 = 0x8D49;
pub const RENDERBUFFER_RED_SIZE = 0x8D50;
pub const RENDERBUFFER_GREEN_SIZE = 0x8D51;
pub const RENDERBUFFER_BLUE_SIZE = 0x8D52;
pub const RENDERBUFFER_ALPHA_SIZE = 0x8D53;
pub const RENDERBUFFER_DEPTH_SIZE = 0x8D54;
pub const RENDERBUFFER_STENCIL_SIZE = 0x8D55;
pub const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
pub const MAX_SAMPLES = 0x8D57;
pub const INDEX = 0x8222;
pub const TEXTURE_LUMINANCE_TYPE = 0x8C14;
pub const TEXTURE_INTENSITY_TYPE = 0x8C15;
pub const FRAMEBUFFER_SRGB = 0x8DB9;
pub const HALF_FLOAT = 0x140B;
pub const MAP_INVALIDATE_RANGE_BIT = 0x0004;
pub const MAP_INVALIDATE_BUFFER_BIT = 0x0008;
pub const MAP_FLUSH_EXPLICIT_BIT = 0x0010;
pub const MAP_UNSYNCHRONIZED_BIT = 0x0020;
pub const COMPRESSED_RED_RGTC1 = 0x8DBB;
pub const COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
pub const COMPRESSED_RG_RGTC2 = 0x8DBD;
pub const COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
pub const RG = 0x8227;
pub const RG_INTEGER = 0x8228;
pub const R8 = 0x8229;
pub const R16 = 0x822A;
pub const RG8 = 0x822B;
pub const RG16 = 0x822C;
pub const R16F = 0x822D;
pub const R32F = 0x822E;
pub const RG16F = 0x822F;
pub const RG32F = 0x8230;
pub const R8I = 0x8231;
pub const R8UI = 0x8232;
pub const R16I = 0x8233;
pub const R16UI = 0x8234;
pub const R32I = 0x8235;
pub const R32UI = 0x8236;
pub const RG8I = 0x8237;
pub const RG8UI = 0x8238;
pub const RG16I = 0x8239;
pub const RG16UI = 0x823A;
pub const RG32I = 0x823B;
pub const RG32UI = 0x823C;
pub const VERTEX_ARRAY_BINDING = 0x85B5;
pub const CLAMP_VERTEX_COLOR = 0x891A;
pub const CLAMP_FRAGMENT_COLOR = 0x891B;
pub const ALPHA_INTEGER = 0x8D97;
pub const SAMPLER_2D_RECT = 0x8B63;
pub const SAMPLER_2D_RECT_SHADOW = 0x8B64;
pub const SAMPLER_BUFFER = 0x8DC2;
pub const INT_SAMPLER_2D_RECT = 0x8DCD;
pub const INT_SAMPLER_BUFFER = 0x8DD0;
pub const UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
pub const UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
pub const TEXTURE_BUFFER = 0x8C2A;
pub const MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
pub const TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
pub const TEXTURE_RECTANGLE = 0x84F5;
pub const PROXY_TEXTURE_RECTANGLE = 0x84F7;
pub const MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
pub const R8_SNORM = 0x8F94;
pub const RG8_SNORM = 0x8F95;
pub const RGB8_SNORM = 0x8F96;
pub const RGBA8_SNORM = 0x8F97;
pub const R16_SNORM = 0x8F98;
pub const RG16_SNORM = 0x8F99;
pub const RGB16_SNORM = 0x8F9A;
pub const RGBA16_SNORM = 0x8F9B;
pub const SIGNED_NORMALIZED = 0x8F9C;
pub const PRIMITIVE_RESTART = 0x8F9D;
pub const PRIMITIVE_RESTART_INDEX = 0x8F9E;
pub const COPY_READ_BUFFER = 0x8F36;
pub const COPY_WRITE_BUFFER = 0x8F37;
pub const UNIFORM_BUFFER = 0x8A11;
pub const UNIFORM_BUFFER_BINDING = 0x8A28;
pub const UNIFORM_BUFFER_START = 0x8A29;
pub const UNIFORM_BUFFER_SIZE = 0x8A2A;
pub const MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
pub const MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
pub const MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
pub const MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
pub const MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
pub const MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
pub const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
pub const MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
pub const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
pub const UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
pub const ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
pub const ACTIVE_UNIFORM_BLOCKS = 0x8A36;
pub const UNIFORM_TYPE = 0x8A37;
pub const UNIFORM_SIZE = 0x8A38;
pub const UNIFORM_NAME_LENGTH = 0x8A39;
pub const UNIFORM_BLOCK_INDEX = 0x8A3A;
pub const UNIFORM_OFFSET = 0x8A3B;
pub const UNIFORM_ARRAY_STRIDE = 0x8A3C;
pub const UNIFORM_MATRIX_STRIDE = 0x8A3D;
pub const UNIFORM_IS_ROW_MAJOR = 0x8A3E;
pub const UNIFORM_BLOCK_BINDING = 0x8A3F;
pub const UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
pub const UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
pub const UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
pub const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
pub const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
pub const UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
pub const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
pub const INVALID_INDEX = 0xFFFFFFFF;
pub const CONTEXT_CORE_PROFILE_BIT = 0x00000001;
pub const CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
pub const LINES_ADJACENCY = 0x000A;
pub const LINE_STRIP_ADJACENCY = 0x000B;
pub const TRIANGLES_ADJACENCY = 0x000C;
pub const TRIANGLE_STRIP_ADJACENCY = 0x000D;
pub const PROGRAM_POINT_SIZE = 0x8642;
pub const MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
pub const FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
pub const FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
pub const GEOMETRY_SHADER = 0x8DD9;
pub const GEOMETRY_VERTICES_OUT = 0x8916;
pub const GEOMETRY_INPUT_TYPE = 0x8917;
pub const GEOMETRY_OUTPUT_TYPE = 0x8918;
pub const MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
pub const MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
pub const MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
pub const MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
pub const MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
pub const MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
pub const MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
pub const CONTEXT_PROFILE_MASK = 0x9126;
pub const DEPTH_CLAMP = 0x864F;
pub const QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
pub const FIRST_VERTEX_CONVENTION = 0x8E4D;
pub const LAST_VERTEX_CONVENTION = 0x8E4E;
pub const PROVOKING_VERTEX = 0x8E4F;
pub const TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
pub const MAX_SERVER_WAIT_TIMEOUT = 0x9111;
pub const OBJECT_TYPE = 0x9112;
pub const SYNC_CONDITION = 0x9113;
pub const SYNC_STATUS = 0x9114;
pub const SYNC_FLAGS = 0x9115;
pub const SYNC_FENCE = 0x9116;
pub const SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
pub const UNSIGNALED = 0x9118;
pub const SIGNALED = 0x9119;
pub const ALREADY_SIGNALED = 0x911A;
pub const TIMEOUT_EXPIRED = 0x911B;
pub const CONDITION_SATISFIED = 0x911C;
pub const WAIT_FAILED = 0x911D;
pub const TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
pub const SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
pub const SAMPLE_POSITION = 0x8E50;
pub const SAMPLE_MASK = 0x8E51;
pub const SAMPLE_MASK_VALUE = 0x8E52;
pub const MAX_SAMPLE_MASK_WORDS = 0x8E59;
pub const TEXTURE_2D_MULTISAMPLE = 0x9100;
pub const PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
pub const TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
pub const PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
pub const TEXTURE_SAMPLES = 0x9106;
pub const TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
pub const SAMPLER_2D_MULTISAMPLE = 0x9108;
pub const INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
pub const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
pub const SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
pub const INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
pub const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
pub const MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
pub const MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
pub const MAX_INTEGER_SAMPLES = 0x9110;
pub const VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
pub const SRC1_COLOR = 0x88F9;
pub const ONE_MINUS_SRC1_COLOR = 0x88FA;
pub const ONE_MINUS_SRC1_ALPHA = 0x88FB;
pub const MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
pub const ANY_SAMPLES_PASSED = 0x8C2F;
pub const SAMPLER_BINDING = 0x8919;
pub const RGB10_A2UI = 0x906F;
pub const TEXTURE_SWIZZLE_R = 0x8E42;
pub const TEXTURE_SWIZZLE_G = 0x8E43;
pub const TEXTURE_SWIZZLE_B = 0x8E44;
pub const TEXTURE_SWIZZLE_A = 0x8E45;
pub const TEXTURE_SWIZZLE_RGBA = 0x8E46;
pub const TIME_ELAPSED = 0x88BF;
pub const TIMESTAMP = 0x8E28;
pub const INT_2_10_10_10_REV = 0x8D9F;
pub const SAMPLE_SHADING = 0x8C36;
pub const MIN_SAMPLE_SHADING_VALUE = 0x8C37;
pub const MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
pub const MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
pub const TEXTURE_CUBE_MAP_ARRAY = 0x9009;
pub const PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
pub const SAMPLER_CUBE_MAP_ARRAY = 0x900C;
pub const SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
pub const INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
pub const UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
pub const DRAW_INDIRECT_BUFFER = 0x8F3F;
pub const DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
pub const MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
pub const MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
pub const MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
pub const FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
pub const DOUBLE_VEC2 = 0x8FFC;
pub const DOUBLE_VEC3 = 0x8FFD;
pub const DOUBLE_VEC4 = 0x8FFE;
pub const DOUBLE_MAT2 = 0x8F46;
pub const DOUBLE_MAT3 = 0x8F47;
pub const DOUBLE_MAT4 = 0x8F48;
pub const DOUBLE_MAT2x3 = 0x8F49;
pub const DOUBLE_MAT2x4 = 0x8F4A;
pub const DOUBLE_MAT3x2 = 0x8F4B;
pub const DOUBLE_MAT3x4 = 0x8F4C;
pub const DOUBLE_MAT4x2 = 0x8F4D;
pub const DOUBLE_MAT4x3 = 0x8F4E;
pub const ACTIVE_SUBROUTINES = 0x8DE5;
pub const ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
pub const ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
pub const ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
pub const ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
pub const MAX_SUBROUTINES = 0x8DE7;
pub const MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
pub const NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
pub const COMPATIBLE_SUBROUTINES = 0x8E4B;
pub const PATCHES = 0x000E;
pub const PATCH_VERTICES = 0x8E72;
pub const PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
pub const PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
pub const TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
pub const TESS_GEN_MODE = 0x8E76;
pub const TESS_GEN_SPACING = 0x8E77;
pub const TESS_GEN_VERTEX_ORDER = 0x8E78;
pub const TESS_GEN_POINT_MODE = 0x8E79;
pub const ISOLINES = 0x8E7A;
pub const FRACTIONAL_ODD = 0x8E7B;
pub const FRACTIONAL_EVEN = 0x8E7C;
pub const MAX_PATCH_VERTICES = 0x8E7D;
pub const MAX_TESS_GEN_LEVEL = 0x8E7E;
pub const MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
pub const MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
pub const MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
pub const MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
pub const MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
pub const MAX_TESS_PATCH_COMPONENTS = 0x8E84;
pub const MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
pub const MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
pub const MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
pub const MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
pub const MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
pub const MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
pub const MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
pub const MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
pub const UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
pub const UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
pub const TESS_EVALUATION_SHADER = 0x8E87;
pub const TESS_CONTROL_SHADER = 0x8E88;
pub const TRANSFORM_FEEDBACK = 0x8E22;
pub const TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
pub const TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
pub const TRANSFORM_FEEDBACK_BINDING = 0x8E25;
pub const MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
pub const FIXED = 0x140C;
pub const IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
pub const IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
pub const LOW_FLOAT = 0x8DF0;
pub const MEDIUM_FLOAT = 0x8DF1;
pub const HIGH_FLOAT = 0x8DF2;
pub const LOW_INT = 0x8DF3;
pub const MEDIUM_INT = 0x8DF4;
pub const HIGH_INT = 0x8DF5;
pub const SHADER_COMPILER = 0x8DFA;
pub const SHADER_BINARY_FORMATS = 0x8DF8;
pub const NUM_SHADER_BINARY_FORMATS = 0x8DF9;
pub const MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
pub const MAX_VARYING_VECTORS = 0x8DFC;
pub const MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
pub const RGB565 = 0x8D62;
pub const PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
pub const PROGRAM_BINARY_LENGTH = 0x8741;
pub const NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
pub const PROGRAM_BINARY_FORMATS = 0x87FF;
pub const VERTEX_SHADER_BIT = 0x00000001;
pub const FRAGMENT_SHADER_BIT = 0x00000002;
pub const GEOMETRY_SHADER_BIT = 0x00000004;
pub const TESS_CONTROL_SHADER_BIT = 0x00000008;
pub const TESS_EVALUATION_SHADER_BIT = 0x00000010;
pub const ALL_SHADER_BITS = 0xFFFFFFFF;
pub const PROGRAM_SEPARABLE = 0x8258;
pub const ACTIVE_PROGRAM = 0x8259;
pub const PROGRAM_PIPELINE_BINDING = 0x825A;
pub const MAX_VIEWPORTS = 0x825B;
pub const VIEWPORT_SUBPIXEL_BITS = 0x825C;
pub const VIEWPORT_BOUNDS_RANGE = 0x825D;
pub const LAYER_PROVOKING_VERTEX = 0x825E;
pub const VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
pub const UNDEFINED_VERTEX = 0x8260;
pub const COPY_READ_BUFFER_BINDING = 0x8F36;
pub const COPY_WRITE_BUFFER_BINDING = 0x8F37;
pub const TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
pub const TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
pub const UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
pub const UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
pub const UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
pub const UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
pub const PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
pub const PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
pub const PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
pub const PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
pub const NUM_SAMPLE_COUNTS = 0x9380;
pub const MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
pub const ATOMIC_COUNTER_BUFFER = 0x92C0;
pub const ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
pub const ATOMIC_COUNTER_BUFFER_START = 0x92C2;
pub const ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
pub const ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
pub const ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
pub const ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
pub const MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
pub const MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
pub const MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
pub const MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
pub const MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
pub const MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
pub const MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
pub const MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
pub const MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
pub const MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
pub const MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
pub const MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
pub const MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
pub const MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
pub const ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
pub const UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
pub const UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
pub const VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
pub const ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
pub const UNIFORM_BARRIER_BIT = 0x00000004;
pub const TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
pub const SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
pub const COMMAND_BARRIER_BIT = 0x00000040;
pub const PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
pub const TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
pub const BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
pub const FRAMEBUFFER_BARRIER_BIT = 0x00000400;
pub const TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
pub const ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
pub const ALL_BARRIER_BITS = 0xFFFFFFFF;
pub const MAX_IMAGE_UNITS = 0x8F38;
pub const MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
pub const IMAGE_BINDING_NAME = 0x8F3A;
pub const IMAGE_BINDING_LEVEL = 0x8F3B;
pub const IMAGE_BINDING_LAYERED = 0x8F3C;
pub const IMAGE_BINDING_LAYER = 0x8F3D;
pub const IMAGE_BINDING_ACCESS = 0x8F3E;
pub const IMAGE_1D = 0x904C;
pub const IMAGE_2D = 0x904D;
pub const IMAGE_3D = 0x904E;
pub const IMAGE_2D_RECT = 0x904F;
pub const IMAGE_CUBE = 0x9050;
pub const IMAGE_BUFFER = 0x9051;
pub const IMAGE_1D_ARRAY = 0x9052;
pub const IMAGE_2D_ARRAY = 0x9053;
pub const IMAGE_CUBE_MAP_ARRAY = 0x9054;
pub const IMAGE_2D_MULTISAMPLE = 0x9055;
pub const IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
pub const INT_IMAGE_1D = 0x9057;
pub const INT_IMAGE_2D = 0x9058;
pub const INT_IMAGE_3D = 0x9059;
pub const INT_IMAGE_2D_RECT = 0x905A;
pub const INT_IMAGE_CUBE = 0x905B;
pub const INT_IMAGE_BUFFER = 0x905C;
pub const INT_IMAGE_1D_ARRAY = 0x905D;
pub const INT_IMAGE_2D_ARRAY = 0x905E;
pub const INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
pub const INT_IMAGE_2D_MULTISAMPLE = 0x9060;
pub const INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
pub const UNSIGNED_INT_IMAGE_1D = 0x9062;
pub const UNSIGNED_INT_IMAGE_2D = 0x9063;
pub const UNSIGNED_INT_IMAGE_3D = 0x9064;
pub const UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
pub const UNSIGNED_INT_IMAGE_CUBE = 0x9066;
pub const UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
pub const UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
pub const UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
pub const UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
pub const UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
pub const UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
pub const MAX_IMAGE_SAMPLES = 0x906D;
pub const IMAGE_BINDING_FORMAT = 0x906E;
pub const IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
pub const IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
pub const IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
pub const MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
pub const MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
pub const MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
pub const MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
pub const MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
pub const MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
pub const COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
pub const COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
pub const COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
pub const COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
pub const TEXTURE_IMMUTABLE_FORMAT = 0x912F;
pub const NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
pub const VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
pub const COMPRESSED_RGB8_ETC2 = 0x9274;
pub const COMPRESSED_SRGB8_ETC2 = 0x9275;
pub const COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
pub const COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
pub const COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
pub const COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
pub const COMPRESSED_R11_EAC = 0x9270;
pub const COMPRESSED_SIGNED_R11_EAC = 0x9271;
pub const COMPRESSED_RG11_EAC = 0x9272;
pub const COMPRESSED_SIGNED_RG11_EAC = 0x9273;
pub const PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
pub const ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
pub const MAX_ELEMENT_INDEX = 0x8D6B;
pub const COMPUTE_SHADER = 0x91B9;
pub const MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
pub const MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
pub const MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
pub const MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
pub const MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
pub const MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
pub const MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
pub const MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
pub const MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
pub const MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
pub const MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
pub const COMPUTE_WORK_GROUP_SIZE = 0x8267;
pub const UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
pub const DISPATCH_INDIRECT_BUFFER = 0x90EE;
pub const DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
pub const COMPUTE_SHADER_BIT = 0x00000020;
pub const DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
pub const DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
pub const DEBUG_CALLBACK_FUNCTION = 0x8244;
pub const DEBUG_CALLBACK_USER_PARAM = 0x8245;
pub const DEBUG_SOURCE_API = 0x8246;
pub const DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
pub const DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
pub const DEBUG_SOURCE_THIRD_PARTY = 0x8249;
pub const DEBUG_SOURCE_APPLICATION = 0x824A;
pub const DEBUG_SOURCE_OTHER = 0x824B;
pub const DEBUG_TYPE_ERROR = 0x824C;
pub const DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
pub const DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
pub const DEBUG_TYPE_PORTABILITY = 0x824F;
pub const DEBUG_TYPE_PERFORMANCE = 0x8250;
pub const DEBUG_TYPE_OTHER = 0x8251;
pub const MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
pub const MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
pub const DEBUG_LOGGED_MESSAGES = 0x9145;
pub const DEBUG_SEVERITY_HIGH = 0x9146;
pub const DEBUG_SEVERITY_MEDIUM = 0x9147;
pub const DEBUG_SEVERITY_LOW = 0x9148;
pub const DEBUG_TYPE_MARKER = 0x8268;
pub const DEBUG_TYPE_PUSH_GROUP = 0x8269;
pub const DEBUG_TYPE_POP_GROUP = 0x826A;
pub const DEBUG_SEVERITY_NOTIFICATION = 0x826B;
pub const MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
pub const DEBUG_GROUP_STACK_DEPTH = 0x826D;
pub const BUFFER = 0x82E0;
pub const SHADER = 0x82E1;
pub const PROGRAM = 0x82E2;
pub const QUERY = 0x82E3;
pub const PROGRAM_PIPELINE = 0x82E4;
pub const SAMPLER = 0x82E6;
pub const MAX_LABEL_LENGTH = 0x82E8;
pub const DEBUG_OUTPUT = 0x92E0;
pub const CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
pub const MAX_UNIFORM_LOCATIONS = 0x826E;
pub const FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
pub const FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
pub const FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
pub const FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
pub const FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
pub const MAX_FRAMEBUFFER_WIDTH = 0x9315;
pub const MAX_FRAMEBUFFER_HEIGHT = 0x9316;
pub const MAX_FRAMEBUFFER_LAYERS = 0x9317;
pub const MAX_FRAMEBUFFER_SAMPLES = 0x9318;
pub const INTERNALFORMAT_SUPPORTED = 0x826F;
pub const INTERNALFORMAT_PREFERRED = 0x8270;
pub const INTERNALFORMAT_RED_SIZE = 0x8271;
pub const INTERNALFORMAT_GREEN_SIZE = 0x8272;
pub const INTERNALFORMAT_BLUE_SIZE = 0x8273;
pub const INTERNALFORMAT_ALPHA_SIZE = 0x8274;
pub const INTERNALFORMAT_DEPTH_SIZE = 0x8275;
pub const INTERNALFORMAT_STENCIL_SIZE = 0x8276;
pub const INTERNALFORMAT_SHARED_SIZE = 0x8277;
pub const INTERNALFORMAT_RED_TYPE = 0x8278;
pub const INTERNALFORMAT_GREEN_TYPE = 0x8279;
pub const INTERNALFORMAT_BLUE_TYPE = 0x827A;
pub const INTERNALFORMAT_ALPHA_TYPE = 0x827B;
pub const INTERNALFORMAT_DEPTH_TYPE = 0x827C;
pub const INTERNALFORMAT_STENCIL_TYPE = 0x827D;
pub const MAX_WIDTH = 0x827E;
pub const MAX_HEIGHT = 0x827F;
pub const MAX_DEPTH = 0x8280;
pub const MAX_LAYERS = 0x8281;
pub const MAX_COMBINED_DIMENSIONS = 0x8282;
pub const COLOR_COMPONENTS = 0x8283;
pub const DEPTH_COMPONENTS = 0x8284;
pub const STENCIL_COMPONENTS = 0x8285;
pub const COLOR_RENDERABLE = 0x8286;
pub const DEPTH_RENDERABLE = 0x8287;
pub const STENCIL_RENDERABLE = 0x8288;
pub const FRAMEBUFFER_RENDERABLE = 0x8289;
pub const FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
pub const FRAMEBUFFER_BLEND = 0x828B;
pub const READ_PIXELS = 0x828C;
pub const READ_PIXELS_FORMAT = 0x828D;
pub const READ_PIXELS_TYPE = 0x828E;
pub const TEXTURE_IMAGE_FORMAT = 0x828F;
pub const TEXTURE_IMAGE_TYPE = 0x8290;
pub const GET_TEXTURE_IMAGE_FORMAT = 0x8291;
pub const GET_TEXTURE_IMAGE_TYPE = 0x8292;
pub const MIPMAP = 0x8293;
pub const MANUAL_GENERATE_MIPMAP = 0x8294;
pub const AUTO_GENERATE_MIPMAP = 0x8295;
pub const COLOR_ENCODING = 0x8296;
pub const SRGB_READ = 0x8297;
pub const SRGB_WRITE = 0x8298;
pub const FILTER = 0x829A;
pub const VERTEX_TEXTURE = 0x829B;
pub const TESS_CONTROL_TEXTURE = 0x829C;
pub const TESS_EVALUATION_TEXTURE = 0x829D;
pub const GEOMETRY_TEXTURE = 0x829E;
pub const FRAGMENT_TEXTURE = 0x829F;
pub const COMPUTE_TEXTURE = 0x82A0;
pub const TEXTURE_SHADOW = 0x82A1;
pub const TEXTURE_GATHER = 0x82A2;
pub const TEXTURE_GATHER_SHADOW = 0x82A3;
pub const SHADER_IMAGE_LOAD = 0x82A4;
pub const SHADER_IMAGE_STORE = 0x82A5;
pub const SHADER_IMAGE_ATOMIC = 0x82A6;
pub const IMAGE_TEXEL_SIZE = 0x82A7;
pub const IMAGE_COMPATIBILITY_CLASS = 0x82A8;
pub const IMAGE_PIXEL_FORMAT = 0x82A9;
pub const IMAGE_PIXEL_TYPE = 0x82AA;
pub const SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
pub const SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
pub const SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
pub const SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
pub const TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
pub const TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
pub const TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
pub const CLEAR_BUFFER = 0x82B4;
pub const TEXTURE_VIEW = 0x82B5;
pub const VIEW_COMPATIBILITY_CLASS = 0x82B6;
pub const FULL_SUPPORT = 0x82B7;
pub const CAVEAT_SUPPORT = 0x82B8;
pub const IMAGE_CLASS_4_X_32 = 0x82B9;
pub const IMAGE_CLASS_2_X_32 = 0x82BA;
pub const IMAGE_CLASS_1_X_32 = 0x82BB;
pub const IMAGE_CLASS_4_X_16 = 0x82BC;
pub const IMAGE_CLASS_2_X_16 = 0x82BD;
pub const IMAGE_CLASS_1_X_16 = 0x82BE;
pub const IMAGE_CLASS_4_X_8 = 0x82BF;
pub const IMAGE_CLASS_2_X_8 = 0x82C0;
pub const IMAGE_CLASS_1_X_8 = 0x82C1;
pub const IMAGE_CLASS_11_11_10 = 0x82C2;
pub const IMAGE_CLASS_10_10_10_2 = 0x82C3;
pub const VIEW_CLASS_128_BITS = 0x82C4;
pub const VIEW_CLASS_96_BITS = 0x82C5;
pub const VIEW_CLASS_64_BITS = 0x82C6;
pub const VIEW_CLASS_48_BITS = 0x82C7;
pub const VIEW_CLASS_32_BITS = 0x82C8;
pub const VIEW_CLASS_24_BITS = 0x82C9;
pub const VIEW_CLASS_16_BITS = 0x82CA;
pub const VIEW_CLASS_8_BITS = 0x82CB;
pub const VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
pub const VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
pub const VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
pub const VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
pub const VIEW_CLASS_RGTC1_RED = 0x82D0;
pub const VIEW_CLASS_RGTC2_RG = 0x82D1;
pub const VIEW_CLASS_BPTC_UNORM = 0x82D2;
pub const VIEW_CLASS_BPTC_FLOAT = 0x82D3;
pub const UNIFORM = 0x92E1;
pub const UNIFORM_BLOCK = 0x92E2;
pub const PROGRAM_INPUT = 0x92E3;
pub const PROGRAM_OUTPUT = 0x92E4;
pub const BUFFER_VARIABLE = 0x92E5;
pub const SHADER_STORAGE_BLOCK = 0x92E6;
pub const VERTEX_SUBROUTINE = 0x92E8;
pub const TESS_CONTROL_SUBROUTINE = 0x92E9;
pub const TESS_EVALUATION_SUBROUTINE = 0x92EA;
pub const GEOMETRY_SUBROUTINE = 0x92EB;
pub const FRAGMENT_SUBROUTINE = 0x92EC;
pub const COMPUTE_SUBROUTINE = 0x92ED;
pub const VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
pub const TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
pub const TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
pub const GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
pub const FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
pub const COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
pub const TRANSFORM_FEEDBACK_VARYING = 0x92F4;
pub const ACTIVE_RESOURCES = 0x92F5;
pub const MAX_NAME_LENGTH = 0x92F6;
pub const MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
pub const MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
pub const NAME_LENGTH = 0x92F9;
pub const TYPE = 0x92FA;
pub const ARRAY_SIZE = 0x92FB;
pub const OFFSET = 0x92FC;
pub const BLOCK_INDEX = 0x92FD;
pub const ARRAY_STRIDE = 0x92FE;
pub const MATRIX_STRIDE = 0x92FF;
pub const IS_ROW_MAJOR = 0x9300;
pub const ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
pub const BUFFER_BINDING = 0x9302;
pub const BUFFER_DATA_SIZE = 0x9303;
pub const NUM_ACTIVE_VARIABLES = 0x9304;
pub const ACTIVE_VARIABLES = 0x9305;
pub const REFERENCED_BY_VERTEX_SHADER = 0x9306;
pub const REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
pub const REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
pub const REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
pub const REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
pub const REFERENCED_BY_COMPUTE_SHADER = 0x930B;
pub const TOP_LEVEL_ARRAY_SIZE = 0x930C;
pub const TOP_LEVEL_ARRAY_STRIDE = 0x930D;
pub const LOCATION = 0x930E;
pub const LOCATION_INDEX = 0x930F;
pub const IS_PER_PATCH = 0x92E7;
pub const SHADER_STORAGE_BUFFER = 0x90D2;
pub const SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
pub const SHADER_STORAGE_BUFFER_START = 0x90D4;
pub const SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
pub const MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
pub const MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
pub const MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
pub const MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
pub const MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
pub const MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
pub const MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
pub const MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
pub const MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
pub const SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
pub const SHADER_STORAGE_BARRIER_BIT = 0x00002000;
pub const MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
pub const DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
pub const TEXTURE_BUFFER_OFFSET = 0x919D;
pub const TEXTURE_BUFFER_SIZE = 0x919E;
pub const TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
pub const TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
pub const TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
pub const TEXTURE_VIEW_MIN_LAYER = 0x82DD;
pub const TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
pub const TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
pub const VERTEX_ATTRIB_BINDING = 0x82D4;
pub const VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
pub const VERTEX_BINDING_DIVISOR = 0x82D6;
pub const VERTEX_BINDING_OFFSET = 0x82D7;
pub const VERTEX_BINDING_STRIDE = 0x82D8;
pub const MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
pub const MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
pub const VERTEX_BINDING_BUFFER = 0x8F4F;
pub const MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
pub const PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
pub const TEXTURE_BUFFER_BINDING = 0x8C2A;
pub const MAP_PERSISTENT_BIT = 0x0040;
pub const MAP_COHERENT_BIT = 0x0080;
pub const DYNAMIC_STORAGE_BIT = 0x0100;
pub const CLIENT_STORAGE_BIT = 0x0200;
pub const CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
pub const BUFFER_IMMUTABLE_STORAGE = 0x821F;
pub const BUFFER_STORAGE_FLAGS = 0x8220;
pub const CLEAR_TEXTURE = 0x9365;
pub const LOCATION_COMPONENT = 0x934A;
pub const TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
pub const TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
pub const QUERY_BUFFER = 0x9192;
pub const QUERY_BUFFER_BARRIER_BIT = 0x00008000;
pub const QUERY_BUFFER_BINDING = 0x9193;
pub const QUERY_RESULT_NO_WAIT = 0x9194;
pub const MIRROR_CLAMP_TO_EDGE = 0x8743;
pub const NEGATIVE_ONE_TO_ONE = 0x935E;
pub const ZERO_TO_ONE = 0x935F;
pub const CLIP_ORIGIN = 0x935C;
pub const CLIP_DEPTH_MODE = 0x935D;
pub const QUERY_WAIT_INVERTED = 0x8E17;
pub const QUERY_NO_WAIT_INVERTED = 0x8E18;
pub const QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
pub const QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
pub const MAX_CULL_DISTANCES = 0x82F9;
pub const MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
pub const TEXTURE_TARGET = 0x1006;
pub const QUERY_TARGET = 0x82EA;
pub const GUILTY_CONTEXT_RESET = 0x8253;
pub const INNOCENT_CONTEXT_RESET = 0x8254;
pub const UNKNOWN_CONTEXT_RESET = 0x8255;
pub const RESET_NOTIFICATION_STRATEGY = 0x8256;
pub const LOSE_CONTEXT_ON_RESET = 0x8252;
pub const NO_RESET_NOTIFICATION = 0x8261;
pub const CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
pub const SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
pub const SPIR_V_BINARY = 0x9552;
pub const PARAMETER_BUFFER = 0x80EE;
pub const PARAMETER_BUFFER_BINDING = 0x80EF;
pub const CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
pub const VERTICES_SUBMITTED = 0x82EE;
pub const PRIMITIVES_SUBMITTED = 0x82EF;
pub const VERTEX_SHADER_INVOCATIONS = 0x82F0;
pub const TESS_CONTROL_SHADER_PATCHES = 0x82F1;
pub const TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
pub const GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
pub const FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
pub const COMPUTE_SHADER_INVOCATIONS = 0x82F5;
pub const CLIPPING_INPUT_PRIMITIVES = 0x82F6;
pub const CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
pub const POLYGON_OFFSET_CLAMP = 0x8E1B;
pub const SPIR_V_EXTENSIONS = 0x9553;
pub const NUM_SPIR_V_EXTENSIONS = 0x9554;
pub const TEXTURE_MAX_ANISOTROPY = 0x84FE;
pub const MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
pub const TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
pub const TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
pub fn BindBufferRange(target: @"enum", index: uint, buffer: uint, offset: intptr, size: sizeiptr) void {
   return FuncTable.current.?.BindBufferRange(target, index, buffer, offset, size);
}
pub fn BindBufferBase(target: @"enum", index: uint, buffer: uint) void {
   return FuncTable.current.?.BindBufferBase(target, index, buffer);
}
pub fn GetIntegeri_v(target: @"enum", index: uint, data: int) void {
   return FuncTable.current.?.GetIntegeri_v(target, index, data);
}
pub fn ProgramParameteri(program: uint, pname: @"enum", value: int) void {
   return FuncTable.current.?.ProgramParameteri(program, pname, value);
}
pub fn GetPointerv(pname: @"enum", params: ?*const anyopaque) void {
   return FuncTable.current.?.GetPointerv(pname, params);
}
pub fn CullFace(mode: @"enum") void {
   return FuncTable.current.?.CullFace(mode);
}
pub fn FrontFace(mode: @"enum") void {
   return FuncTable.current.?.FrontFace(mode);
}
pub fn Hint(target: @"enum", mode: @"enum") void {
   return FuncTable.current.?.Hint(target, mode);
}
pub fn LineWidth(width: float) void {
   return FuncTable.current.?.LineWidth(width);
}
pub fn PointSize(size: float) void {
   return FuncTable.current.?.PointSize(size);
}
pub fn PolygonMode(face: @"enum", mode: @"enum") void {
   return FuncTable.current.?.PolygonMode(face, mode);
}
pub fn Scissor(x: int, y: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.Scissor(x, y, width, height);
}
pub fn TexParameterf(target: @"enum", pname: @"enum", param: float) void {
   return FuncTable.current.?.TexParameterf(target, pname, param);
}
pub fn TexParameterfv(target: @"enum", pname: @"enum", params: [*c]const float) void {
   return FuncTable.current.?.TexParameterfv(target, pname, params);
}
pub fn TexParameteri(target: @"enum", pname: @"enum", param: int) void {
   return FuncTable.current.?.TexParameteri(target, pname, param);
}
pub fn TexParameteriv(target: @"enum", pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.TexParameteriv(target, pname, params);
}
pub fn TexImage1D(target: @"enum", level: int, internalformat: int, width: sizei, border: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TexImage1D(target, level, internalformat, width, border, format, @"type", pixels);
}
pub fn TexImage2D(target: @"enum", level: int, internalformat: int, width: sizei, height: sizei, border: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TexImage2D(target, level, internalformat, width, height, border, format, @"type", pixels);
}
pub fn DrawBuffer(buf: @"enum") void {
   return FuncTable.current.?.DrawBuffer(buf);
}
pub fn Clear(mask: bitfield) void {
   return FuncTable.current.?.Clear(mask);
}
pub fn ClearColor(red: float, green: float, blue: float, alpha: float) void {
   return FuncTable.current.?.ClearColor(red, green, blue, alpha);
}
pub fn ClearStencil(s: int) void {
   return FuncTable.current.?.ClearStencil(s);
}
pub fn ClearDepth(depth: double) void {
   return FuncTable.current.?.ClearDepth(depth);
}
pub fn StencilMask(mask: uint) void {
   return FuncTable.current.?.StencilMask(mask);
}
pub fn ColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean) void {
   return FuncTable.current.?.ColorMask(red, green, blue, alpha);
}
pub fn DepthMask(flag: boolean) void {
   return FuncTable.current.?.DepthMask(flag);
}
pub fn Disable(cap: @"enum") void {
   return FuncTable.current.?.Disable(cap);
}
pub fn Enable(cap: @"enum") void {
   return FuncTable.current.?.Enable(cap);
}
pub fn Finish() void {
   return FuncTable.current.?.Finish();
}
pub fn Flush() void {
   return FuncTable.current.?.Flush();
}
pub fn BlendFunc(sfactor: @"enum", dfactor: @"enum") void {
   return FuncTable.current.?.BlendFunc(sfactor, dfactor);
}
pub fn LogicOp(opcode: @"enum") void {
   return FuncTable.current.?.LogicOp(opcode);
}
pub fn StencilFunc(func: @"enum", ref: int, mask: uint) void {
   return FuncTable.current.?.StencilFunc(func, ref, mask);
}
pub fn StencilOp(fail: @"enum", zfail: @"enum", zpass: @"enum") void {
   return FuncTable.current.?.StencilOp(fail, zfail, zpass);
}
pub fn DepthFunc(func: @"enum") void {
   return FuncTable.current.?.DepthFunc(func);
}
pub fn PixelStoref(pname: @"enum", param: float) void {
   return FuncTable.current.?.PixelStoref(pname, param);
}
pub fn PixelStorei(pname: @"enum", param: int) void {
   return FuncTable.current.?.PixelStorei(pname, param);
}
pub fn ReadBuffer(src: @"enum") void {
   return FuncTable.current.?.ReadBuffer(src);
}
pub fn ReadPixels(x: int, y: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.ReadPixels(x, y, width, height, format, @"type", pixels);
}
pub fn GetBooleanv(pname: @"enum", data: boolean) void {
   return FuncTable.current.?.GetBooleanv(pname, data);
}
pub fn GetDoublev(pname: @"enum", data: double) void {
   return FuncTable.current.?.GetDoublev(pname, data);
}
pub fn GetError() @"enum" {
   return FuncTable.current.?.GetError();
}
pub fn GetFloatv(pname: @"enum", data: float) void {
   return FuncTable.current.?.GetFloatv(pname, data);
}
pub fn GetIntegerv(pname: @"enum", data: int) void {
   return FuncTable.current.?.GetIntegerv(pname, data);
}
pub fn GetString(name: @"enum") ubyte {
   return FuncTable.current.?.GetString(name);
}
pub fn GetTexImage(target: @"enum", level: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.GetTexImage(target, level, format, @"type", pixels);
}
pub fn GetTexParameterfv(target: @"enum", pname: @"enum", params: float) void {
   return FuncTable.current.?.GetTexParameterfv(target, pname, params);
}
pub fn GetTexParameteriv(target: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetTexParameteriv(target, pname, params);
}
pub fn GetTexLevelParameterfv(target: @"enum", level: int, pname: @"enum", params: float) void {
   return FuncTable.current.?.GetTexLevelParameterfv(target, level, pname, params);
}
pub fn GetTexLevelParameteriv(target: @"enum", level: int, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetTexLevelParameteriv(target, level, pname, params);
}
pub fn IsEnabled(cap: @"enum") boolean {
   return FuncTable.current.?.IsEnabled(cap);
}
pub fn DepthRange(n: double, f: double) void {
   return FuncTable.current.?.DepthRange(n, f);
}
pub fn Viewport(x: int, y: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.Viewport(x, y, width, height);
}
pub fn NewList(list: uint, mode: @"enum") void {
   return FuncTable.current.?.NewList(list, mode);
}
pub fn EndList() void {
   return FuncTable.current.?.EndList();
}
pub fn CallList(list: uint) void {
   return FuncTable.current.?.CallList(list);
}
pub fn CallLists(n: sizei, @"type": @"enum", lists: ?*const anyopaque) void {
   return FuncTable.current.?.CallLists(n, @"type", lists);
}
pub fn DeleteLists(list: uint, range: sizei) void {
   return FuncTable.current.?.DeleteLists(list, range);
}
pub fn GenLists(range: sizei) uint {
   return FuncTable.current.?.GenLists(range);
}
pub fn ListBase(base: uint) void {
   return FuncTable.current.?.ListBase(base);
}
pub fn Begin(mode: @"enum") void {
   return FuncTable.current.?.Begin(mode);
}
pub fn Bitmap(width: sizei, height: sizei, xorig: float, yorig: float, xmove: float, ymove: float, bitmap: [*c]const ubyte) void {
   return FuncTable.current.?.Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}
pub fn Color3b(red: byte, green: byte, blue: byte) void {
   return FuncTable.current.?.Color3b(red, green, blue);
}
pub fn Color3bv(v: [*c]const byte) void {
   return FuncTable.current.?.Color3bv(v);
}
pub fn Color3d(red: double, green: double, blue: double) void {
   return FuncTable.current.?.Color3d(red, green, blue);
}
pub fn Color3dv(v: [*c]const double) void {
   return FuncTable.current.?.Color3dv(v);
}
pub fn Color3f(red: float, green: float, blue: float) void {
   return FuncTable.current.?.Color3f(red, green, blue);
}
pub fn Color3fv(v: [*c]const float) void {
   return FuncTable.current.?.Color3fv(v);
}
pub fn Color3i(red: int, green: int, blue: int) void {
   return FuncTable.current.?.Color3i(red, green, blue);
}
pub fn Color3iv(v: [*c]const int) void {
   return FuncTable.current.?.Color3iv(v);
}
pub fn Color3s(red: short, green: short, blue: short) void {
   return FuncTable.current.?.Color3s(red, green, blue);
}
pub fn Color3sv(v: [*c]const short) void {
   return FuncTable.current.?.Color3sv(v);
}
pub fn Color3ub(red: ubyte, green: ubyte, blue: ubyte) void {
   return FuncTable.current.?.Color3ub(red, green, blue);
}
pub fn Color3ubv(v: [*c]const ubyte) void {
   return FuncTable.current.?.Color3ubv(v);
}
pub fn Color3ui(red: uint, green: uint, blue: uint) void {
   return FuncTable.current.?.Color3ui(red, green, blue);
}
pub fn Color3uiv(v: [*c]const uint) void {
   return FuncTable.current.?.Color3uiv(v);
}
pub fn Color3us(red: ushort, green: ushort, blue: ushort) void {
   return FuncTable.current.?.Color3us(red, green, blue);
}
pub fn Color3usv(v: [*c]const ushort) void {
   return FuncTable.current.?.Color3usv(v);
}
pub fn Color4b(red: byte, green: byte, blue: byte, alpha: byte) void {
   return FuncTable.current.?.Color4b(red, green, blue, alpha);
}
pub fn Color4bv(v: [*c]const byte) void {
   return FuncTable.current.?.Color4bv(v);
}
pub fn Color4d(red: double, green: double, blue: double, alpha: double) void {
   return FuncTable.current.?.Color4d(red, green, blue, alpha);
}
pub fn Color4dv(v: [*c]const double) void {
   return FuncTable.current.?.Color4dv(v);
}
pub fn Color4f(red: float, green: float, blue: float, alpha: float) void {
   return FuncTable.current.?.Color4f(red, green, blue, alpha);
}
pub fn Color4fv(v: [*c]const float) void {
   return FuncTable.current.?.Color4fv(v);
}
pub fn Color4i(red: int, green: int, blue: int, alpha: int) void {
   return FuncTable.current.?.Color4i(red, green, blue, alpha);
}
pub fn Color4iv(v: [*c]const int) void {
   return FuncTable.current.?.Color4iv(v);
}
pub fn Color4s(red: short, green: short, blue: short, alpha: short) void {
   return FuncTable.current.?.Color4s(red, green, blue, alpha);
}
pub fn Color4sv(v: [*c]const short) void {
   return FuncTable.current.?.Color4sv(v);
}
pub fn Color4ub(red: ubyte, green: ubyte, blue: ubyte, alpha: ubyte) void {
   return FuncTable.current.?.Color4ub(red, green, blue, alpha);
}
pub fn Color4ubv(v: [*c]const ubyte) void {
   return FuncTable.current.?.Color4ubv(v);
}
pub fn Color4ui(red: uint, green: uint, blue: uint, alpha: uint) void {
   return FuncTable.current.?.Color4ui(red, green, blue, alpha);
}
pub fn Color4uiv(v: [*c]const uint) void {
   return FuncTable.current.?.Color4uiv(v);
}
pub fn Color4us(red: ushort, green: ushort, blue: ushort, alpha: ushort) void {
   return FuncTable.current.?.Color4us(red, green, blue, alpha);
}
pub fn Color4usv(v: [*c]const ushort) void {
   return FuncTable.current.?.Color4usv(v);
}
pub fn EdgeFlag(flag: boolean) void {
   return FuncTable.current.?.EdgeFlag(flag);
}
pub fn EdgeFlagv(flag: [*c]const boolean) void {
   return FuncTable.current.?.EdgeFlagv(flag);
}
pub fn End() void {
   return FuncTable.current.?.End();
}
pub fn Indexd(c: double) void {
   return FuncTable.current.?.Indexd(c);
}
pub fn Indexdv(c: [*c]const double) void {
   return FuncTable.current.?.Indexdv(c);
}
pub fn Indexf(c: float) void {
   return FuncTable.current.?.Indexf(c);
}
pub fn Indexfv(c: [*c]const float) void {
   return FuncTable.current.?.Indexfv(c);
}
pub fn Indexi(c: int) void {
   return FuncTable.current.?.Indexi(c);
}
pub fn Indexiv(c: [*c]const int) void {
   return FuncTable.current.?.Indexiv(c);
}
pub fn Indexs(c: short) void {
   return FuncTable.current.?.Indexs(c);
}
pub fn Indexsv(c: [*c]const short) void {
   return FuncTable.current.?.Indexsv(c);
}
pub fn Normal3b(nx: byte, ny: byte, nz: byte) void {
   return FuncTable.current.?.Normal3b(nx, ny, nz);
}
pub fn Normal3bv(v: [*c]const byte) void {
   return FuncTable.current.?.Normal3bv(v);
}
pub fn Normal3d(nx: double, ny: double, nz: double) void {
   return FuncTable.current.?.Normal3d(nx, ny, nz);
}
pub fn Normal3dv(v: [*c]const double) void {
   return FuncTable.current.?.Normal3dv(v);
}
pub fn Normal3f(nx: float, ny: float, nz: float) void {
   return FuncTable.current.?.Normal3f(nx, ny, nz);
}
pub fn Normal3fv(v: [*c]const float) void {
   return FuncTable.current.?.Normal3fv(v);
}
pub fn Normal3i(nx: int, ny: int, nz: int) void {
   return FuncTable.current.?.Normal3i(nx, ny, nz);
}
pub fn Normal3iv(v: [*c]const int) void {
   return FuncTable.current.?.Normal3iv(v);
}
pub fn Normal3s(nx: short, ny: short, nz: short) void {
   return FuncTable.current.?.Normal3s(nx, ny, nz);
}
pub fn Normal3sv(v: [*c]const short) void {
   return FuncTable.current.?.Normal3sv(v);
}
pub fn RasterPos2d(x: double, y: double) void {
   return FuncTable.current.?.RasterPos2d(x, y);
}
pub fn RasterPos2dv(v: [*c]const double) void {
   return FuncTable.current.?.RasterPos2dv(v);
}
pub fn RasterPos2f(x: float, y: float) void {
   return FuncTable.current.?.RasterPos2f(x, y);
}
pub fn RasterPos2fv(v: [*c]const float) void {
   return FuncTable.current.?.RasterPos2fv(v);
}
pub fn RasterPos2i(x: int, y: int) void {
   return FuncTable.current.?.RasterPos2i(x, y);
}
pub fn RasterPos2iv(v: [*c]const int) void {
   return FuncTable.current.?.RasterPos2iv(v);
}
pub fn RasterPos2s(x: short, y: short) void {
   return FuncTable.current.?.RasterPos2s(x, y);
}
pub fn RasterPos2sv(v: [*c]const short) void {
   return FuncTable.current.?.RasterPos2sv(v);
}
pub fn RasterPos3d(x: double, y: double, z: double) void {
   return FuncTable.current.?.RasterPos3d(x, y, z);
}
pub fn RasterPos3dv(v: [*c]const double) void {
   return FuncTable.current.?.RasterPos3dv(v);
}
pub fn RasterPos3f(x: float, y: float, z: float) void {
   return FuncTable.current.?.RasterPos3f(x, y, z);
}
pub fn RasterPos3fv(v: [*c]const float) void {
   return FuncTable.current.?.RasterPos3fv(v);
}
pub fn RasterPos3i(x: int, y: int, z: int) void {
   return FuncTable.current.?.RasterPos3i(x, y, z);
}
pub fn RasterPos3iv(v: [*c]const int) void {
   return FuncTable.current.?.RasterPos3iv(v);
}
pub fn RasterPos3s(x: short, y: short, z: short) void {
   return FuncTable.current.?.RasterPos3s(x, y, z);
}
pub fn RasterPos3sv(v: [*c]const short) void {
   return FuncTable.current.?.RasterPos3sv(v);
}
pub fn RasterPos4d(x: double, y: double, z: double, w: double) void {
   return FuncTable.current.?.RasterPos4d(x, y, z, w);
}
pub fn RasterPos4dv(v: [*c]const double) void {
   return FuncTable.current.?.RasterPos4dv(v);
}
pub fn RasterPos4f(x: float, y: float, z: float, w: float) void {
   return FuncTable.current.?.RasterPos4f(x, y, z, w);
}
pub fn RasterPos4fv(v: [*c]const float) void {
   return FuncTable.current.?.RasterPos4fv(v);
}
pub fn RasterPos4i(x: int, y: int, z: int, w: int) void {
   return FuncTable.current.?.RasterPos4i(x, y, z, w);
}
pub fn RasterPos4iv(v: [*c]const int) void {
   return FuncTable.current.?.RasterPos4iv(v);
}
pub fn RasterPos4s(x: short, y: short, z: short, w: short) void {
   return FuncTable.current.?.RasterPos4s(x, y, z, w);
}
pub fn RasterPos4sv(v: [*c]const short) void {
   return FuncTable.current.?.RasterPos4sv(v);
}
pub fn Rectd(x1: double, y1: double, x2: double, y2: double) void {
   return FuncTable.current.?.Rectd(x1, y1, x2, y2);
}
pub fn Rectdv(v1: [*c]const double, v2: [*c]const double) void {
   return FuncTable.current.?.Rectdv(v1, v2);
}
pub fn Rectf(x1: float, y1: float, x2: float, y2: float) void {
   return FuncTable.current.?.Rectf(x1, y1, x2, y2);
}
pub fn Rectfv(v1: [*c]const float, v2: [*c]const float) void {
   return FuncTable.current.?.Rectfv(v1, v2);
}
pub fn Recti(x1: int, y1: int, x2: int, y2: int) void {
   return FuncTable.current.?.Recti(x1, y1, x2, y2);
}
pub fn Rectiv(v1: [*c]const int, v2: [*c]const int) void {
   return FuncTable.current.?.Rectiv(v1, v2);
}
pub fn Rects(x1: short, y1: short, x2: short, y2: short) void {
   return FuncTable.current.?.Rects(x1, y1, x2, y2);
}
pub fn Rectsv(v1: [*c]const short, v2: [*c]const short) void {
   return FuncTable.current.?.Rectsv(v1, v2);
}
pub fn TexCoord1d(s: double) void {
   return FuncTable.current.?.TexCoord1d(s);
}
pub fn TexCoord1dv(v: [*c]const double) void {
   return FuncTable.current.?.TexCoord1dv(v);
}
pub fn TexCoord1f(s: float) void {
   return FuncTable.current.?.TexCoord1f(s);
}
pub fn TexCoord1fv(v: [*c]const float) void {
   return FuncTable.current.?.TexCoord1fv(v);
}
pub fn TexCoord1i(s: int) void {
   return FuncTable.current.?.TexCoord1i(s);
}
pub fn TexCoord1iv(v: [*c]const int) void {
   return FuncTable.current.?.TexCoord1iv(v);
}
pub fn TexCoord1s(s: short) void {
   return FuncTable.current.?.TexCoord1s(s);
}
pub fn TexCoord1sv(v: [*c]const short) void {
   return FuncTable.current.?.TexCoord1sv(v);
}
pub fn TexCoord2d(s: double, t: double) void {
   return FuncTable.current.?.TexCoord2d(s, t);
}
pub fn TexCoord2dv(v: [*c]const double) void {
   return FuncTable.current.?.TexCoord2dv(v);
}
pub fn TexCoord2f(s: float, t: float) void {
   return FuncTable.current.?.TexCoord2f(s, t);
}
pub fn TexCoord2fv(v: [*c]const float) void {
   return FuncTable.current.?.TexCoord2fv(v);
}
pub fn TexCoord2i(s: int, t: int) void {
   return FuncTable.current.?.TexCoord2i(s, t);
}
pub fn TexCoord2iv(v: [*c]const int) void {
   return FuncTable.current.?.TexCoord2iv(v);
}
pub fn TexCoord2s(s: short, t: short) void {
   return FuncTable.current.?.TexCoord2s(s, t);
}
pub fn TexCoord2sv(v: [*c]const short) void {
   return FuncTable.current.?.TexCoord2sv(v);
}
pub fn TexCoord3d(s: double, t: double, r: double) void {
   return FuncTable.current.?.TexCoord3d(s, t, r);
}
pub fn TexCoord3dv(v: [*c]const double) void {
   return FuncTable.current.?.TexCoord3dv(v);
}
pub fn TexCoord3f(s: float, t: float, r: float) void {
   return FuncTable.current.?.TexCoord3f(s, t, r);
}
pub fn TexCoord3fv(v: [*c]const float) void {
   return FuncTable.current.?.TexCoord3fv(v);
}
pub fn TexCoord3i(s: int, t: int, r: int) void {
   return FuncTable.current.?.TexCoord3i(s, t, r);
}
pub fn TexCoord3iv(v: [*c]const int) void {
   return FuncTable.current.?.TexCoord3iv(v);
}
pub fn TexCoord3s(s: short, t: short, r: short) void {
   return FuncTable.current.?.TexCoord3s(s, t, r);
}
pub fn TexCoord3sv(v: [*c]const short) void {
   return FuncTable.current.?.TexCoord3sv(v);
}
pub fn TexCoord4d(s: double, t: double, r: double, q: double) void {
   return FuncTable.current.?.TexCoord4d(s, t, r, q);
}
pub fn TexCoord4dv(v: [*c]const double) void {
   return FuncTable.current.?.TexCoord4dv(v);
}
pub fn TexCoord4f(s: float, t: float, r: float, q: float) void {
   return FuncTable.current.?.TexCoord4f(s, t, r, q);
}
pub fn TexCoord4fv(v: [*c]const float) void {
   return FuncTable.current.?.TexCoord4fv(v);
}
pub fn TexCoord4i(s: int, t: int, r: int, q: int) void {
   return FuncTable.current.?.TexCoord4i(s, t, r, q);
}
pub fn TexCoord4iv(v: [*c]const int) void {
   return FuncTable.current.?.TexCoord4iv(v);
}
pub fn TexCoord4s(s: short, t: short, r: short, q: short) void {
   return FuncTable.current.?.TexCoord4s(s, t, r, q);
}
pub fn TexCoord4sv(v: [*c]const short) void {
   return FuncTable.current.?.TexCoord4sv(v);
}
pub fn Vertex2d(x: double, y: double) void {
   return FuncTable.current.?.Vertex2d(x, y);
}
pub fn Vertex2dv(v: [*c]const double) void {
   return FuncTable.current.?.Vertex2dv(v);
}
pub fn Vertex2f(x: float, y: float) void {
   return FuncTable.current.?.Vertex2f(x, y);
}
pub fn Vertex2fv(v: [*c]const float) void {
   return FuncTable.current.?.Vertex2fv(v);
}
pub fn Vertex2i(x: int, y: int) void {
   return FuncTable.current.?.Vertex2i(x, y);
}
pub fn Vertex2iv(v: [*c]const int) void {
   return FuncTable.current.?.Vertex2iv(v);
}
pub fn Vertex2s(x: short, y: short) void {
   return FuncTable.current.?.Vertex2s(x, y);
}
pub fn Vertex2sv(v: [*c]const short) void {
   return FuncTable.current.?.Vertex2sv(v);
}
pub fn Vertex3d(x: double, y: double, z: double) void {
   return FuncTable.current.?.Vertex3d(x, y, z);
}
pub fn Vertex3dv(v: [*c]const double) void {
   return FuncTable.current.?.Vertex3dv(v);
}
pub fn Vertex3f(x: float, y: float, z: float) void {
   return FuncTable.current.?.Vertex3f(x, y, z);
}
pub fn Vertex3fv(v: [*c]const float) void {
   return FuncTable.current.?.Vertex3fv(v);
}
pub fn Vertex3i(x: int, y: int, z: int) void {
   return FuncTable.current.?.Vertex3i(x, y, z);
}
pub fn Vertex3iv(v: [*c]const int) void {
   return FuncTable.current.?.Vertex3iv(v);
}
pub fn Vertex3s(x: short, y: short, z: short) void {
   return FuncTable.current.?.Vertex3s(x, y, z);
}
pub fn Vertex3sv(v: [*c]const short) void {
   return FuncTable.current.?.Vertex3sv(v);
}
pub fn Vertex4d(x: double, y: double, z: double, w: double) void {
   return FuncTable.current.?.Vertex4d(x, y, z, w);
}
pub fn Vertex4dv(v: [*c]const double) void {
   return FuncTable.current.?.Vertex4dv(v);
}
pub fn Vertex4f(x: float, y: float, z: float, w: float) void {
   return FuncTable.current.?.Vertex4f(x, y, z, w);
}
pub fn Vertex4fv(v: [*c]const float) void {
   return FuncTable.current.?.Vertex4fv(v);
}
pub fn Vertex4i(x: int, y: int, z: int, w: int) void {
   return FuncTable.current.?.Vertex4i(x, y, z, w);
}
pub fn Vertex4iv(v: [*c]const int) void {
   return FuncTable.current.?.Vertex4iv(v);
}
pub fn Vertex4s(x: short, y: short, z: short, w: short) void {
   return FuncTable.current.?.Vertex4s(x, y, z, w);
}
pub fn Vertex4sv(v: [*c]const short) void {
   return FuncTable.current.?.Vertex4sv(v);
}
pub fn ClipPlane(plane: @"enum", equation: [*c]const double) void {
   return FuncTable.current.?.ClipPlane(plane, equation);
}
pub fn ColorMaterial(face: @"enum", mode: @"enum") void {
   return FuncTable.current.?.ColorMaterial(face, mode);
}
pub fn Fogf(pname: @"enum", param: float) void {
   return FuncTable.current.?.Fogf(pname, param);
}
pub fn Fogfv(pname: @"enum", params: [*c]const float) void {
   return FuncTable.current.?.Fogfv(pname, params);
}
pub fn Fogi(pname: @"enum", param: int) void {
   return FuncTable.current.?.Fogi(pname, param);
}
pub fn Fogiv(pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.Fogiv(pname, params);
}
pub fn Lightf(light: @"enum", pname: @"enum", param: float) void {
   return FuncTable.current.?.Lightf(light, pname, param);
}
pub fn Lightfv(light: @"enum", pname: @"enum", params: [*c]const float) void {
   return FuncTable.current.?.Lightfv(light, pname, params);
}
pub fn Lighti(light: @"enum", pname: @"enum", param: int) void {
   return FuncTable.current.?.Lighti(light, pname, param);
}
pub fn Lightiv(light: @"enum", pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.Lightiv(light, pname, params);
}
pub fn LightModelf(pname: @"enum", param: float) void {
   return FuncTable.current.?.LightModelf(pname, param);
}
pub fn LightModelfv(pname: @"enum", params: [*c]const float) void {
   return FuncTable.current.?.LightModelfv(pname, params);
}
pub fn LightModeli(pname: @"enum", param: int) void {
   return FuncTable.current.?.LightModeli(pname, param);
}
pub fn LightModeliv(pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.LightModeliv(pname, params);
}
pub fn LineStipple(factor: int, pattern: ushort) void {
   return FuncTable.current.?.LineStipple(factor, pattern);
}
pub fn Materialf(face: @"enum", pname: @"enum", param: float) void {
   return FuncTable.current.?.Materialf(face, pname, param);
}
pub fn Materialfv(face: @"enum", pname: @"enum", params: [*c]const float) void {
   return FuncTable.current.?.Materialfv(face, pname, params);
}
pub fn Materiali(face: @"enum", pname: @"enum", param: int) void {
   return FuncTable.current.?.Materiali(face, pname, param);
}
pub fn Materialiv(face: @"enum", pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.Materialiv(face, pname, params);
}
pub fn PolygonStipple(mask: [*c]const ubyte) void {
   return FuncTable.current.?.PolygonStipple(mask);
}
pub fn ShadeModel(mode: @"enum") void {
   return FuncTable.current.?.ShadeModel(mode);
}
pub fn TexEnvf(target: @"enum", pname: @"enum", param: float) void {
   return FuncTable.current.?.TexEnvf(target, pname, param);
}
pub fn TexEnvfv(target: @"enum", pname: @"enum", params: [*c]const float) void {
   return FuncTable.current.?.TexEnvfv(target, pname, params);
}
pub fn TexEnvi(target: @"enum", pname: @"enum", param: int) void {
   return FuncTable.current.?.TexEnvi(target, pname, param);
}
pub fn TexEnviv(target: @"enum", pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.TexEnviv(target, pname, params);
}
pub fn TexGend(coord: @"enum", pname: @"enum", param: double) void {
   return FuncTable.current.?.TexGend(coord, pname, param);
}
pub fn TexGendv(coord: @"enum", pname: @"enum", params: [*c]const double) void {
   return FuncTable.current.?.TexGendv(coord, pname, params);
}
pub fn TexGenf(coord: @"enum", pname: @"enum", param: float) void {
   return FuncTable.current.?.TexGenf(coord, pname, param);
}
pub fn TexGenfv(coord: @"enum", pname: @"enum", params: [*c]const float) void {
   return FuncTable.current.?.TexGenfv(coord, pname, params);
}
pub fn TexGeni(coord: @"enum", pname: @"enum", param: int) void {
   return FuncTable.current.?.TexGeni(coord, pname, param);
}
pub fn TexGeniv(coord: @"enum", pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.TexGeniv(coord, pname, params);
}
pub fn FeedbackBuffer(size: sizei, @"type": @"enum", buffer: float) void {
   return FuncTable.current.?.FeedbackBuffer(size, @"type", buffer);
}
pub fn SelectBuffer(size: sizei, buffer: uint) void {
   return FuncTable.current.?.SelectBuffer(size, buffer);
}
pub fn RenderMode(mode: @"enum") int {
   return FuncTable.current.?.RenderMode(mode);
}
pub fn InitNames() void {
   return FuncTable.current.?.InitNames();
}
pub fn LoadName(name: uint) void {
   return FuncTable.current.?.LoadName(name);
}
pub fn PassThrough(token: float) void {
   return FuncTable.current.?.PassThrough(token);
}
pub fn PopName() void {
   return FuncTable.current.?.PopName();
}
pub fn PushName(name: uint) void {
   return FuncTable.current.?.PushName(name);
}
pub fn ClearAccum(red: float, green: float, blue: float, alpha: float) void {
   return FuncTable.current.?.ClearAccum(red, green, blue, alpha);
}
pub fn ClearIndex(c: float) void {
   return FuncTable.current.?.ClearIndex(c);
}
pub fn IndexMask(mask: uint) void {
   return FuncTable.current.?.IndexMask(mask);
}
pub fn Accum(op: @"enum", value: float) void {
   return FuncTable.current.?.Accum(op, value);
}
pub fn PopAttrib() void {
   return FuncTable.current.?.PopAttrib();
}
pub fn PushAttrib(mask: bitfield) void {
   return FuncTable.current.?.PushAttrib(mask);
}
pub fn Map1d(target: @"enum", u1: double, u2: double, stride: int, order: int, points: [*c]const double) void {
   return FuncTable.current.?.Map1d(target, u1, u2, stride, order, points);
}
pub fn Map1f(target: @"enum", u1: float, u2: float, stride: int, order: int, points: [*c]const float) void {
   return FuncTable.current.?.Map1f(target, u1, u2, stride, order, points);
}
pub fn Map2d(target: @"enum", u1: double, u2: double, ustride: int, uorder: int, v1: double, v2: double, vstride: int, vorder: int, points: [*c]const double) void {
   return FuncTable.current.?.Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
pub fn Map2f(target: @"enum", u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: [*c]const float) void {
   return FuncTable.current.?.Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
pub fn MapGrid1d(un: int, u1: double, u2: double) void {
   return FuncTable.current.?.MapGrid1d(un, u1, u2);
}
pub fn MapGrid1f(un: int, u1: float, u2: float) void {
   return FuncTable.current.?.MapGrid1f(un, u1, u2);
}
pub fn MapGrid2d(un: int, u1: double, u2: double, vn: int, v1: double, v2: double) void {
   return FuncTable.current.?.MapGrid2d(un, u1, u2, vn, v1, v2);
}
pub fn MapGrid2f(un: int, u1: float, u2: float, vn: int, v1: float, v2: float) void {
   return FuncTable.current.?.MapGrid2f(un, u1, u2, vn, v1, v2);
}
pub fn EvalCoord1d(u: double) void {
   return FuncTable.current.?.EvalCoord1d(u);
}
pub fn EvalCoord1dv(u: [*c]const double) void {
   return FuncTable.current.?.EvalCoord1dv(u);
}
pub fn EvalCoord1f(u: float) void {
   return FuncTable.current.?.EvalCoord1f(u);
}
pub fn EvalCoord1fv(u: [*c]const float) void {
   return FuncTable.current.?.EvalCoord1fv(u);
}
pub fn EvalCoord2d(u: double, v: double) void {
   return FuncTable.current.?.EvalCoord2d(u, v);
}
pub fn EvalCoord2dv(u: [*c]const double) void {
   return FuncTable.current.?.EvalCoord2dv(u);
}
pub fn EvalCoord2f(u: float, v: float) void {
   return FuncTable.current.?.EvalCoord2f(u, v);
}
pub fn EvalCoord2fv(u: [*c]const float) void {
   return FuncTable.current.?.EvalCoord2fv(u);
}
pub fn EvalMesh1(mode: @"enum", i1: int, i2: int) void {
   return FuncTable.current.?.EvalMesh1(mode, i1, i2);
}
pub fn EvalPoint1(i: int) void {
   return FuncTable.current.?.EvalPoint1(i);
}
pub fn EvalMesh2(mode: @"enum", i1: int, i2: int, j1: int, j2: int) void {
   return FuncTable.current.?.EvalMesh2(mode, i1, i2, j1, j2);
}
pub fn EvalPoint2(i: int, j: int) void {
   return FuncTable.current.?.EvalPoint2(i, j);
}
pub fn AlphaFunc(func: @"enum", ref: float) void {
   return FuncTable.current.?.AlphaFunc(func, ref);
}
pub fn PixelZoom(xfactor: float, yfactor: float) void {
   return FuncTable.current.?.PixelZoom(xfactor, yfactor);
}
pub fn PixelTransferf(pname: @"enum", param: float) void {
   return FuncTable.current.?.PixelTransferf(pname, param);
}
pub fn PixelTransferi(pname: @"enum", param: int) void {
   return FuncTable.current.?.PixelTransferi(pname, param);
}
pub fn PixelMapfv(map: @"enum", mapsize: sizei, values: [*c]const float) void {
   return FuncTable.current.?.PixelMapfv(map, mapsize, values);
}
pub fn PixelMapuiv(map: @"enum", mapsize: sizei, values: [*c]const uint) void {
   return FuncTable.current.?.PixelMapuiv(map, mapsize, values);
}
pub fn PixelMapusv(map: @"enum", mapsize: sizei, values: [*c]const ushort) void {
   return FuncTable.current.?.PixelMapusv(map, mapsize, values);
}
pub fn CopyPixels(x: int, y: int, width: sizei, height: sizei, @"type": @"enum") void {
   return FuncTable.current.?.CopyPixels(x, y, width, height, @"type");
}
pub fn DrawPixels(width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.DrawPixels(width, height, format, @"type", pixels);
}
pub fn GetClipPlane(plane: @"enum", equation: double) void {
   return FuncTable.current.?.GetClipPlane(plane, equation);
}
pub fn GetLightfv(light: @"enum", pname: @"enum", params: float) void {
   return FuncTable.current.?.GetLightfv(light, pname, params);
}
pub fn GetLightiv(light: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetLightiv(light, pname, params);
}
pub fn GetMapdv(target: @"enum", query: @"enum", v: double) void {
   return FuncTable.current.?.GetMapdv(target, query, v);
}
pub fn GetMapfv(target: @"enum", query: @"enum", v: float) void {
   return FuncTable.current.?.GetMapfv(target, query, v);
}
pub fn GetMapiv(target: @"enum", query: @"enum", v: int) void {
   return FuncTable.current.?.GetMapiv(target, query, v);
}
pub fn GetMaterialfv(face: @"enum", pname: @"enum", params: float) void {
   return FuncTable.current.?.GetMaterialfv(face, pname, params);
}
pub fn GetMaterialiv(face: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetMaterialiv(face, pname, params);
}
pub fn GetPixelMapfv(map: @"enum", values: float) void {
   return FuncTable.current.?.GetPixelMapfv(map, values);
}
pub fn GetPixelMapuiv(map: @"enum", values: uint) void {
   return FuncTable.current.?.GetPixelMapuiv(map, values);
}
pub fn GetPixelMapusv(map: @"enum", values: ushort) void {
   return FuncTable.current.?.GetPixelMapusv(map, values);
}
pub fn GetPolygonStipple(mask: ubyte) void {
   return FuncTable.current.?.GetPolygonStipple(mask);
}
pub fn GetTexEnvfv(target: @"enum", pname: @"enum", params: float) void {
   return FuncTable.current.?.GetTexEnvfv(target, pname, params);
}
pub fn GetTexEnviv(target: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetTexEnviv(target, pname, params);
}
pub fn GetTexGendv(coord: @"enum", pname: @"enum", params: double) void {
   return FuncTable.current.?.GetTexGendv(coord, pname, params);
}
pub fn GetTexGenfv(coord: @"enum", pname: @"enum", params: float) void {
   return FuncTable.current.?.GetTexGenfv(coord, pname, params);
}
pub fn GetTexGeniv(coord: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetTexGeniv(coord, pname, params);
}
pub fn IsList(list: uint) boolean {
   return FuncTable.current.?.IsList(list);
}
pub fn Frustum(left: double, right: double, bottom: double, top: double, zNear: double, zFar: double) void {
   return FuncTable.current.?.Frustum(left, right, bottom, top, zNear, zFar);
}
pub fn LoadIdentity() void {
   return FuncTable.current.?.LoadIdentity();
}
pub fn LoadMatrixf(m: [*c]const float) void {
   return FuncTable.current.?.LoadMatrixf(m);
}
pub fn LoadMatrixd(m: [*c]const double) void {
   return FuncTable.current.?.LoadMatrixd(m);
}
pub fn MatrixMode(mode: @"enum") void {
   return FuncTable.current.?.MatrixMode(mode);
}
pub fn MultMatrixf(m: [*c]const float) void {
   return FuncTable.current.?.MultMatrixf(m);
}
pub fn MultMatrixd(m: [*c]const double) void {
   return FuncTable.current.?.MultMatrixd(m);
}
pub fn Ortho(left: double, right: double, bottom: double, top: double, zNear: double, zFar: double) void {
   return FuncTable.current.?.Ortho(left, right, bottom, top, zNear, zFar);
}
pub fn PopMatrix() void {
   return FuncTable.current.?.PopMatrix();
}
pub fn PushMatrix() void {
   return FuncTable.current.?.PushMatrix();
}
pub fn Rotated(angle: double, x: double, y: double, z: double) void {
   return FuncTable.current.?.Rotated(angle, x, y, z);
}
pub fn Rotatef(angle: float, x: float, y: float, z: float) void {
   return FuncTable.current.?.Rotatef(angle, x, y, z);
}
pub fn Scaled(x: double, y: double, z: double) void {
   return FuncTable.current.?.Scaled(x, y, z);
}
pub fn Scalef(x: float, y: float, z: float) void {
   return FuncTable.current.?.Scalef(x, y, z);
}
pub fn Translated(x: double, y: double, z: double) void {
   return FuncTable.current.?.Translated(x, y, z);
}
pub fn Translatef(x: float, y: float, z: float) void {
   return FuncTable.current.?.Translatef(x, y, z);
}
pub fn DrawArrays(mode: @"enum", first: int, count: sizei) void {
   return FuncTable.current.?.DrawArrays(mode, first, count);
}
pub fn DrawElements(mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque) void {
   return FuncTable.current.?.DrawElements(mode, count, @"type", indices);
}
pub fn PolygonOffset(factor: float, units: float) void {
   return FuncTable.current.?.PolygonOffset(factor, units);
}
pub fn CopyTexImage1D(target: @"enum", level: int, internalformat: @"enum", x: int, y: int, width: sizei, border: int) void {
   return FuncTable.current.?.CopyTexImage1D(target, level, internalformat, x, y, width, border);
}
pub fn CopyTexImage2D(target: @"enum", level: int, internalformat: @"enum", x: int, y: int, width: sizei, height: sizei, border: int) void {
   return FuncTable.current.?.CopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}
pub fn CopyTexSubImage1D(target: @"enum", level: int, xoffset: int, x: int, y: int, width: sizei) void {
   return FuncTable.current.?.CopyTexSubImage1D(target, level, xoffset, x, y, width);
}
pub fn CopyTexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}
pub fn TexSubImage1D(target: @"enum", level: int, xoffset: int, width: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TexSubImage1D(target, level, xoffset, width, format, @"type", pixels);
}
pub fn TexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, @"type", pixels);
}
pub fn BindTexture(target: @"enum", texture: uint) void {
   return FuncTable.current.?.BindTexture(target, texture);
}
pub fn DeleteTextures(n: sizei, textures: [*c]const uint) void {
   return FuncTable.current.?.DeleteTextures(n, textures);
}
pub fn GenTextures(n: sizei, textures: uint) void {
   return FuncTable.current.?.GenTextures(n, textures);
}
pub fn IsTexture(texture: uint) boolean {
   return FuncTable.current.?.IsTexture(texture);
}
pub fn ArrayElement(i: int) void {
   return FuncTable.current.?.ArrayElement(i);
}
pub fn ColorPointer(size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.ColorPointer(size, @"type", stride, pointer);
}
pub fn DisableClientState(array: @"enum") void {
   return FuncTable.current.?.DisableClientState(array);
}
pub fn EdgeFlagPointer(stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.EdgeFlagPointer(stride, pointer);
}
pub fn EnableClientState(array: @"enum") void {
   return FuncTable.current.?.EnableClientState(array);
}
pub fn IndexPointer(@"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.IndexPointer(@"type", stride, pointer);
}
pub fn InterleavedArrays(format: @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.InterleavedArrays(format, stride, pointer);
}
pub fn NormalPointer(@"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.NormalPointer(@"type", stride, pointer);
}
pub fn TexCoordPointer(size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.TexCoordPointer(size, @"type", stride, pointer);
}
pub fn VertexPointer(size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.VertexPointer(size, @"type", stride, pointer);
}
pub fn AreTexturesResident(n: sizei, textures: [*c]const uint, residences: boolean) boolean {
   return FuncTable.current.?.AreTexturesResident(n, textures, residences);
}
pub fn PrioritizeTextures(n: sizei, textures: [*c]const uint, priorities: [*c]const float) void {
   return FuncTable.current.?.PrioritizeTextures(n, textures, priorities);
}
pub fn Indexub(c: ubyte) void {
   return FuncTable.current.?.Indexub(c);
}
pub fn Indexubv(c: [*c]const ubyte) void {
   return FuncTable.current.?.Indexubv(c);
}
pub fn PopClientAttrib() void {
   return FuncTable.current.?.PopClientAttrib();
}
pub fn PushClientAttrib(mask: bitfield) void {
   return FuncTable.current.?.PushClientAttrib(mask);
}
pub fn DrawRangeElements(mode: @"enum", start: uint, end: uint, count: sizei, @"type": @"enum", indices: ?*const anyopaque) void {
   return FuncTable.current.?.DrawRangeElements(mode, start, end, count, @"type", indices);
}
pub fn TexImage3D(target: @"enum", level: int, internalformat: int, width: sizei, height: sizei, depth: sizei, border: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TexImage3D(target, level, internalformat, width, height, depth, border, format, @"type", pixels);
}
pub fn TexSubImage3D(target: @"enum", level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, @"type", pixels);
}
pub fn CopyTexSubImage3D(target: @"enum", level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
pub fn ActiveTexture(texture: @"enum") void {
   return FuncTable.current.?.ActiveTexture(texture);
}
pub fn SampleCoverage(value: float, invert: boolean) void {
   return FuncTable.current.?.SampleCoverage(value, invert);
}
pub fn CompressedTexImage3D(target: @"enum", level: int, internalformat: @"enum", width: sizei, height: sizei, depth: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}
pub fn CompressedTexImage2D(target: @"enum", level: int, internalformat: @"enum", width: sizei, height: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}
pub fn CompressedTexImage1D(target: @"enum", level: int, internalformat: @"enum", width: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}
pub fn CompressedTexSubImage3D(target: @"enum", level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
pub fn CompressedTexSubImage2D(target: @"enum", level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
pub fn CompressedTexSubImage1D(target: @"enum", level: int, xoffset: int, width: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}
pub fn GetCompressedTexImage(target: @"enum", level: int, img: ?*const anyopaque) void {
   return FuncTable.current.?.GetCompressedTexImage(target, level, img);
}
pub fn ClientActiveTexture(texture: @"enum") void {
   return FuncTable.current.?.ClientActiveTexture(texture);
}
pub fn MultiTexCoord1d(target: @"enum", s: double) void {
   return FuncTable.current.?.MultiTexCoord1d(target, s);
}
pub fn MultiTexCoord1dv(target: @"enum", v: [*c]const double) void {
   return FuncTable.current.?.MultiTexCoord1dv(target, v);
}
pub fn MultiTexCoord1f(target: @"enum", s: float) void {
   return FuncTable.current.?.MultiTexCoord1f(target, s);
}
pub fn MultiTexCoord1fv(target: @"enum", v: [*c]const float) void {
   return FuncTable.current.?.MultiTexCoord1fv(target, v);
}
pub fn MultiTexCoord1i(target: @"enum", s: int) void {
   return FuncTable.current.?.MultiTexCoord1i(target, s);
}
pub fn MultiTexCoord1iv(target: @"enum", v: [*c]const int) void {
   return FuncTable.current.?.MultiTexCoord1iv(target, v);
}
pub fn MultiTexCoord1s(target: @"enum", s: short) void {
   return FuncTable.current.?.MultiTexCoord1s(target, s);
}
pub fn MultiTexCoord1sv(target: @"enum", v: [*c]const short) void {
   return FuncTable.current.?.MultiTexCoord1sv(target, v);
}
pub fn MultiTexCoord2d(target: @"enum", s: double, t: double) void {
   return FuncTable.current.?.MultiTexCoord2d(target, s, t);
}
pub fn MultiTexCoord2dv(target: @"enum", v: [*c]const double) void {
   return FuncTable.current.?.MultiTexCoord2dv(target, v);
}
pub fn MultiTexCoord2f(target: @"enum", s: float, t: float) void {
   return FuncTable.current.?.MultiTexCoord2f(target, s, t);
}
pub fn MultiTexCoord2fv(target: @"enum", v: [*c]const float) void {
   return FuncTable.current.?.MultiTexCoord2fv(target, v);
}
pub fn MultiTexCoord2i(target: @"enum", s: int, t: int) void {
   return FuncTable.current.?.MultiTexCoord2i(target, s, t);
}
pub fn MultiTexCoord2iv(target: @"enum", v: [*c]const int) void {
   return FuncTable.current.?.MultiTexCoord2iv(target, v);
}
pub fn MultiTexCoord2s(target: @"enum", s: short, t: short) void {
   return FuncTable.current.?.MultiTexCoord2s(target, s, t);
}
pub fn MultiTexCoord2sv(target: @"enum", v: [*c]const short) void {
   return FuncTable.current.?.MultiTexCoord2sv(target, v);
}
pub fn MultiTexCoord3d(target: @"enum", s: double, t: double, r: double) void {
   return FuncTable.current.?.MultiTexCoord3d(target, s, t, r);
}
pub fn MultiTexCoord3dv(target: @"enum", v: [*c]const double) void {
   return FuncTable.current.?.MultiTexCoord3dv(target, v);
}
pub fn MultiTexCoord3f(target: @"enum", s: float, t: float, r: float) void {
   return FuncTable.current.?.MultiTexCoord3f(target, s, t, r);
}
pub fn MultiTexCoord3fv(target: @"enum", v: [*c]const float) void {
   return FuncTable.current.?.MultiTexCoord3fv(target, v);
}
pub fn MultiTexCoord3i(target: @"enum", s: int, t: int, r: int) void {
   return FuncTable.current.?.MultiTexCoord3i(target, s, t, r);
}
pub fn MultiTexCoord3iv(target: @"enum", v: [*c]const int) void {
   return FuncTable.current.?.MultiTexCoord3iv(target, v);
}
pub fn MultiTexCoord3s(target: @"enum", s: short, t: short, r: short) void {
   return FuncTable.current.?.MultiTexCoord3s(target, s, t, r);
}
pub fn MultiTexCoord3sv(target: @"enum", v: [*c]const short) void {
   return FuncTable.current.?.MultiTexCoord3sv(target, v);
}
pub fn MultiTexCoord4d(target: @"enum", s: double, t: double, r: double, q: double) void {
   return FuncTable.current.?.MultiTexCoord4d(target, s, t, r, q);
}
pub fn MultiTexCoord4dv(target: @"enum", v: [*c]const double) void {
   return FuncTable.current.?.MultiTexCoord4dv(target, v);
}
pub fn MultiTexCoord4f(target: @"enum", s: float, t: float, r: float, q: float) void {
   return FuncTable.current.?.MultiTexCoord4f(target, s, t, r, q);
}
pub fn MultiTexCoord4fv(target: @"enum", v: [*c]const float) void {
   return FuncTable.current.?.MultiTexCoord4fv(target, v);
}
pub fn MultiTexCoord4i(target: @"enum", s: int, t: int, r: int, q: int) void {
   return FuncTable.current.?.MultiTexCoord4i(target, s, t, r, q);
}
pub fn MultiTexCoord4iv(target: @"enum", v: [*c]const int) void {
   return FuncTable.current.?.MultiTexCoord4iv(target, v);
}
pub fn MultiTexCoord4s(target: @"enum", s: short, t: short, r: short, q: short) void {
   return FuncTable.current.?.MultiTexCoord4s(target, s, t, r, q);
}
pub fn MultiTexCoord4sv(target: @"enum", v: [*c]const short) void {
   return FuncTable.current.?.MultiTexCoord4sv(target, v);
}
pub fn LoadTransposeMatrixf(m: [*c]const float) void {
   return FuncTable.current.?.LoadTransposeMatrixf(m);
}
pub fn LoadTransposeMatrixd(m: [*c]const double) void {
   return FuncTable.current.?.LoadTransposeMatrixd(m);
}
pub fn MultTransposeMatrixf(m: [*c]const float) void {
   return FuncTable.current.?.MultTransposeMatrixf(m);
}
pub fn MultTransposeMatrixd(m: [*c]const double) void {
   return FuncTable.current.?.MultTransposeMatrixd(m);
}
pub fn BlendFuncSeparate(sfactorRGB: @"enum", dfactorRGB: @"enum", sfactorAlpha: @"enum", dfactorAlpha: @"enum") void {
   return FuncTable.current.?.BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
pub fn MultiDrawArrays(mode: @"enum", first: [*c]const int, count: [*c]const sizei, drawcount: sizei) void {
   return FuncTable.current.?.MultiDrawArrays(mode, first, count, drawcount);
}
pub fn MultiDrawElements(mode: @"enum", count: [*c]const sizei, @"type": @"enum", indices: ?*const anyopaque, drawcount: sizei) void {
   return FuncTable.current.?.MultiDrawElements(mode, count, @"type", indices, drawcount);
}
pub fn PointParameterf(pname: @"enum", param: float) void {
   return FuncTable.current.?.PointParameterf(pname, param);
}
pub fn PointParameterfv(pname: @"enum", params: [*c]const float) void {
   return FuncTable.current.?.PointParameterfv(pname, params);
}
pub fn PointParameteri(pname: @"enum", param: int) void {
   return FuncTable.current.?.PointParameteri(pname, param);
}
pub fn PointParameteriv(pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.PointParameteriv(pname, params);
}
pub fn FogCoordf(coord: float) void {
   return FuncTable.current.?.FogCoordf(coord);
}
pub fn FogCoordfv(coord: [*c]const float) void {
   return FuncTable.current.?.FogCoordfv(coord);
}
pub fn FogCoordd(coord: double) void {
   return FuncTable.current.?.FogCoordd(coord);
}
pub fn FogCoorddv(coord: [*c]const double) void {
   return FuncTable.current.?.FogCoorddv(coord);
}
pub fn FogCoordPointer(@"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.FogCoordPointer(@"type", stride, pointer);
}
pub fn SecondaryColor3b(red: byte, green: byte, blue: byte) void {
   return FuncTable.current.?.SecondaryColor3b(red, green, blue);
}
pub fn SecondaryColor3bv(v: [*c]const byte) void {
   return FuncTable.current.?.SecondaryColor3bv(v);
}
pub fn SecondaryColor3d(red: double, green: double, blue: double) void {
   return FuncTable.current.?.SecondaryColor3d(red, green, blue);
}
pub fn SecondaryColor3dv(v: [*c]const double) void {
   return FuncTable.current.?.SecondaryColor3dv(v);
}
pub fn SecondaryColor3f(red: float, green: float, blue: float) void {
   return FuncTable.current.?.SecondaryColor3f(red, green, blue);
}
pub fn SecondaryColor3fv(v: [*c]const float) void {
   return FuncTable.current.?.SecondaryColor3fv(v);
}
pub fn SecondaryColor3i(red: int, green: int, blue: int) void {
   return FuncTable.current.?.SecondaryColor3i(red, green, blue);
}
pub fn SecondaryColor3iv(v: [*c]const int) void {
   return FuncTable.current.?.SecondaryColor3iv(v);
}
pub fn SecondaryColor3s(red: short, green: short, blue: short) void {
   return FuncTable.current.?.SecondaryColor3s(red, green, blue);
}
pub fn SecondaryColor3sv(v: [*c]const short) void {
   return FuncTable.current.?.SecondaryColor3sv(v);
}
pub fn SecondaryColor3ub(red: ubyte, green: ubyte, blue: ubyte) void {
   return FuncTable.current.?.SecondaryColor3ub(red, green, blue);
}
pub fn SecondaryColor3ubv(v: [*c]const ubyte) void {
   return FuncTable.current.?.SecondaryColor3ubv(v);
}
pub fn SecondaryColor3ui(red: uint, green: uint, blue: uint) void {
   return FuncTable.current.?.SecondaryColor3ui(red, green, blue);
}
pub fn SecondaryColor3uiv(v: [*c]const uint) void {
   return FuncTable.current.?.SecondaryColor3uiv(v);
}
pub fn SecondaryColor3us(red: ushort, green: ushort, blue: ushort) void {
   return FuncTable.current.?.SecondaryColor3us(red, green, blue);
}
pub fn SecondaryColor3usv(v: [*c]const ushort) void {
   return FuncTable.current.?.SecondaryColor3usv(v);
}
pub fn SecondaryColorPointer(size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.SecondaryColorPointer(size, @"type", stride, pointer);
}
pub fn WindowPos2d(x: double, y: double) void {
   return FuncTable.current.?.WindowPos2d(x, y);
}
pub fn WindowPos2dv(v: [*c]const double) void {
   return FuncTable.current.?.WindowPos2dv(v);
}
pub fn WindowPos2f(x: float, y: float) void {
   return FuncTable.current.?.WindowPos2f(x, y);
}
pub fn WindowPos2fv(v: [*c]const float) void {
   return FuncTable.current.?.WindowPos2fv(v);
}
pub fn WindowPos2i(x: int, y: int) void {
   return FuncTable.current.?.WindowPos2i(x, y);
}
pub fn WindowPos2iv(v: [*c]const int) void {
   return FuncTable.current.?.WindowPos2iv(v);
}
pub fn WindowPos2s(x: short, y: short) void {
   return FuncTable.current.?.WindowPos2s(x, y);
}
pub fn WindowPos2sv(v: [*c]const short) void {
   return FuncTable.current.?.WindowPos2sv(v);
}
pub fn WindowPos3d(x: double, y: double, z: double) void {
   return FuncTable.current.?.WindowPos3d(x, y, z);
}
pub fn WindowPos3dv(v: [*c]const double) void {
   return FuncTable.current.?.WindowPos3dv(v);
}
pub fn WindowPos3f(x: float, y: float, z: float) void {
   return FuncTable.current.?.WindowPos3f(x, y, z);
}
pub fn WindowPos3fv(v: [*c]const float) void {
   return FuncTable.current.?.WindowPos3fv(v);
}
pub fn WindowPos3i(x: int, y: int, z: int) void {
   return FuncTable.current.?.WindowPos3i(x, y, z);
}
pub fn WindowPos3iv(v: [*c]const int) void {
   return FuncTable.current.?.WindowPos3iv(v);
}
pub fn WindowPos3s(x: short, y: short, z: short) void {
   return FuncTable.current.?.WindowPos3s(x, y, z);
}
pub fn WindowPos3sv(v: [*c]const short) void {
   return FuncTable.current.?.WindowPos3sv(v);
}
pub fn BlendColor(red: float, green: float, blue: float, alpha: float) void {
   return FuncTable.current.?.BlendColor(red, green, blue, alpha);
}
pub fn BlendEquation(mode: @"enum") void {
   return FuncTable.current.?.BlendEquation(mode);
}
pub fn GenQueries(n: sizei, ids: uint) void {
   return FuncTable.current.?.GenQueries(n, ids);
}
pub fn DeleteQueries(n: sizei, ids: [*c]const uint) void {
   return FuncTable.current.?.DeleteQueries(n, ids);
}
pub fn IsQuery(id: uint) boolean {
   return FuncTable.current.?.IsQuery(id);
}
pub fn BeginQuery(target: @"enum", id: uint) void {
   return FuncTable.current.?.BeginQuery(target, id);
}
pub fn EndQuery(target: @"enum") void {
   return FuncTable.current.?.EndQuery(target);
}
pub fn GetQueryiv(target: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetQueryiv(target, pname, params);
}
pub fn GetQueryObjectiv(id: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetQueryObjectiv(id, pname, params);
}
pub fn GetQueryObjectuiv(id: uint, pname: @"enum", params: uint) void {
   return FuncTable.current.?.GetQueryObjectuiv(id, pname, params);
}
pub fn BindBuffer(target: @"enum", buffer: uint) void {
   return FuncTable.current.?.BindBuffer(target, buffer);
}
pub fn DeleteBuffers(n: sizei, buffers: [*]uint) void {
   return FuncTable.current.?.DeleteBuffers(n, buffers);
}
pub fn GenBuffers(n: sizei, buffers: uint) void {
   return FuncTable.current.?.GenBuffers(n, buffers);
}
pub fn IsBuffer(buffer: uint) boolean {
   return FuncTable.current.?.IsBuffer(buffer);
}
pub fn BufferData(target: @"enum", size: sizeiptr, data: ?*const anyopaque, usage: @"enum") void {
   return FuncTable.current.?.BufferData(target, size, data, usage);
}
pub fn BufferSubData(target: @"enum", offset: intptr, size: sizeiptr, data: ?*const anyopaque) void {
   return FuncTable.current.?.BufferSubData(target, offset, size, data);
}
pub fn GetBufferSubData(target: @"enum", offset: intptr, size: sizeiptr, data: ?*const anyopaque) void {
   return FuncTable.current.?.GetBufferSubData(target, offset, size, data);
}
pub fn MapBuffer(target: @"enum", access: @"enum") void {
   return FuncTable.current.?.MapBuffer(target, access);
}
pub fn UnmapBuffer(target: @"enum") boolean {
   return FuncTable.current.?.UnmapBuffer(target);
}
pub fn GetBufferParameteriv(target: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetBufferParameteriv(target, pname, params);
}
pub fn GetBufferPointerv(target: @"enum", pname: @"enum", params: ?*const anyopaque) void {
   return FuncTable.current.?.GetBufferPointerv(target, pname, params);
}
pub fn BlendEquationSeparate(modeRGB: @"enum", modeAlpha: @"enum") void {
   return FuncTable.current.?.BlendEquationSeparate(modeRGB, modeAlpha);
}
pub fn DrawBuffers(n: sizei, bufs: [*c]const @"enum") void {
   return FuncTable.current.?.DrawBuffers(n, bufs);
}
pub fn StencilOpSeparate(face: @"enum", sfail: @"enum", dpfail: @"enum", dppass: @"enum") void {
   return FuncTable.current.?.StencilOpSeparate(face, sfail, dpfail, dppass);
}
pub fn StencilFuncSeparate(face: @"enum", func: @"enum", ref: int, mask: uint) void {
   return FuncTable.current.?.StencilFuncSeparate(face, func, ref, mask);
}
pub fn StencilMaskSeparate(face: @"enum", mask: uint) void {
   return FuncTable.current.?.StencilMaskSeparate(face, mask);
}
pub fn AttachShader(program: uint, shader: uint) void {
   return FuncTable.current.?.AttachShader(program, shader);
}
pub fn BindAttribLocation(program: uint, index: uint, name: [*c]const char) void {
   return FuncTable.current.?.BindAttribLocation(program, index, name);
}
pub fn CompileShader(shader: uint) void {
   return FuncTable.current.?.CompileShader(shader);
}
pub fn CreateProgram() uint {
   return FuncTable.current.?.CreateProgram();
}
pub fn CreateShader(@"type": @"enum") uint {
   return FuncTable.current.?.CreateShader(@"type");
}
pub fn DeleteProgram(program: uint) void {
   return FuncTable.current.?.DeleteProgram(program);
}
pub fn DeleteShader(shader: uint) void {
   return FuncTable.current.?.DeleteShader(shader);
}
pub fn DetachShader(program: uint, shader: uint) void {
   return FuncTable.current.?.DetachShader(program, shader);
}
pub fn DisableVertexAttribArray(index: uint) void {
   return FuncTable.current.?.DisableVertexAttribArray(index);
}
pub fn EnableVertexAttribArray(index: uint) void {
   return FuncTable.current.?.EnableVertexAttribArray(index);
}
pub fn GetActiveAttrib(program: uint, index: uint, bufSize: sizei, length: sizei, size: int, @"type": @"enum", name: char) void {
   return FuncTable.current.?.GetActiveAttrib(program, index, bufSize, length, size, @"type", name);
}
pub fn GetActiveUniform(program: uint, index: uint, bufSize: sizei, length: sizei, size: int, @"type": @"enum", name: char) void {
   return FuncTable.current.?.GetActiveUniform(program, index, bufSize, length, size, @"type", name);
}
pub fn GetAttachedShaders(program: uint, maxCount: sizei, count: sizei, shaders: uint) void {
   return FuncTable.current.?.GetAttachedShaders(program, maxCount, count, shaders);
}
pub fn GetAttribLocation(program: uint, name: [*c]const char) int {
   return FuncTable.current.?.GetAttribLocation(program, name);
}
pub fn GetProgramiv(program: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetProgramiv(program, pname, params);
}
pub fn GetProgramInfoLog(program: uint, bufSize: sizei, length: sizei, infoLog: char) void {
   return FuncTable.current.?.GetProgramInfoLog(program, bufSize, length, infoLog);
}
pub fn GetShaderiv(shader: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetShaderiv(shader, pname, params);
}
pub fn GetShaderInfoLog(shader: uint, bufSize: sizei, length: sizei, infoLog: char) void {
   return FuncTable.current.?.GetShaderInfoLog(shader, bufSize, length, infoLog);
}
pub fn GetShaderSource(shader: uint, bufSize: sizei, length: sizei, source: char) void {
   return FuncTable.current.?.GetShaderSource(shader, bufSize, length, source);
}
pub fn GetUniformLocation(program: uint, name: [*c]const char) int {
   return FuncTable.current.?.GetUniformLocation(program, name);
}
pub fn GetUniformfv(program: uint, location: int, params: float) void {
   return FuncTable.current.?.GetUniformfv(program, location, params);
}
pub fn GetUniformiv(program: uint, location: int, params: int) void {
   return FuncTable.current.?.GetUniformiv(program, location, params);
}
pub fn GetVertexAttribdv(index: uint, pname: @"enum", params: double) void {
   return FuncTable.current.?.GetVertexAttribdv(index, pname, params);
}
pub fn GetVertexAttribfv(index: uint, pname: @"enum", params: float) void {
   return FuncTable.current.?.GetVertexAttribfv(index, pname, params);
}
pub fn GetVertexAttribiv(index: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetVertexAttribiv(index, pname, params);
}
pub fn GetVertexAttribPointerv(index: uint, pname: @"enum", pointer: ?*const anyopaque) void {
   return FuncTable.current.?.GetVertexAttribPointerv(index, pname, pointer);
}
pub fn IsProgram(program: uint) boolean {
   return FuncTable.current.?.IsProgram(program);
}
pub fn IsShader(shader: uint) boolean {
   return FuncTable.current.?.IsShader(shader);
}
pub fn LinkProgram(program: uint) void {
   return FuncTable.current.?.LinkProgram(program);
}
pub fn ShaderSource(shader: uint, count: sizei, string: [*c]const [*c]const char, length: [*c]const int) void {
   return FuncTable.current.?.ShaderSource(shader, count, string, length);
}
pub fn UseProgram(program: uint) void {
   return FuncTable.current.?.UseProgram(program);
}
pub fn Uniform1f(location: int, v0: float) void {
   return FuncTable.current.?.Uniform1f(location, v0);
}
pub fn Uniform2f(location: int, v0: float, v1: float) void {
   return FuncTable.current.?.Uniform2f(location, v0, v1);
}
pub fn Uniform3f(location: int, v0: float, v1: float, v2: float) void {
   return FuncTable.current.?.Uniform3f(location, v0, v1, v2);
}
pub fn Uniform4f(location: int, v0: float, v1: float, v2: float, v3: float) void {
   return FuncTable.current.?.Uniform4f(location, v0, v1, v2, v3);
}
pub fn Uniform1i(location: int, v0: int) void {
   return FuncTable.current.?.Uniform1i(location, v0);
}
pub fn Uniform2i(location: int, v0: int, v1: int) void {
   return FuncTable.current.?.Uniform2i(location, v0, v1);
}
pub fn Uniform3i(location: int, v0: int, v1: int, v2: int) void {
   return FuncTable.current.?.Uniform3i(location, v0, v1, v2);
}
pub fn Uniform4i(location: int, v0: int, v1: int, v2: int, v3: int) void {
   return FuncTable.current.?.Uniform4i(location, v0, v1, v2, v3);
}
pub fn Uniform1fv(location: int, count: sizei, value: [*c]const float) void {
   return FuncTable.current.?.Uniform1fv(location, count, value);
}
pub fn Uniform2fv(location: int, count: sizei, value: [*c]const float) void {
   return FuncTable.current.?.Uniform2fv(location, count, value);
}
pub fn Uniform3fv(location: int, count: sizei, value: [*c]const float) void {
   return FuncTable.current.?.Uniform3fv(location, count, value);
}
pub fn Uniform4fv(location: int, count: sizei, value: [*c]const float) void {
   return FuncTable.current.?.Uniform4fv(location, count, value);
}
pub fn Uniform1iv(location: int, count: sizei, value: [*c]const int) void {
   return FuncTable.current.?.Uniform1iv(location, count, value);
}
pub fn Uniform2iv(location: int, count: sizei, value: [*c]const int) void {
   return FuncTable.current.?.Uniform2iv(location, count, value);
}
pub fn Uniform3iv(location: int, count: sizei, value: [*c]const int) void {
   return FuncTable.current.?.Uniform3iv(location, count, value);
}
pub fn Uniform4iv(location: int, count: sizei, value: [*c]const int) void {
   return FuncTable.current.?.Uniform4iv(location, count, value);
}
pub fn UniformMatrix2fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix2fv(location, count, transpose, value);
}
pub fn UniformMatrix3fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix3fv(location, count, transpose, value);
}
pub fn UniformMatrix4fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix4fv(location, count, transpose, value);
}
pub fn ValidateProgram(program: uint) void {
   return FuncTable.current.?.ValidateProgram(program);
}
pub fn VertexAttrib1d(index: uint, x: double) void {
   return FuncTable.current.?.VertexAttrib1d(index, x);
}
pub fn VertexAttrib1dv(index: uint, v: [*c]const double) void {
   return FuncTable.current.?.VertexAttrib1dv(index, v);
}
pub fn VertexAttrib1f(index: uint, x: float) void {
   return FuncTable.current.?.VertexAttrib1f(index, x);
}
pub fn VertexAttrib1fv(index: uint, v: [*c]const float) void {
   return FuncTable.current.?.VertexAttrib1fv(index, v);
}
pub fn VertexAttrib1s(index: uint, x: short) void {
   return FuncTable.current.?.VertexAttrib1s(index, x);
}
pub fn VertexAttrib1sv(index: uint, v: [*c]const short) void {
   return FuncTable.current.?.VertexAttrib1sv(index, v);
}
pub fn VertexAttrib2d(index: uint, x: double, y: double) void {
   return FuncTable.current.?.VertexAttrib2d(index, x, y);
}
pub fn VertexAttrib2dv(index: uint, v: [*c]const double) void {
   return FuncTable.current.?.VertexAttrib2dv(index, v);
}
pub fn VertexAttrib2f(index: uint, x: float, y: float) void {
   return FuncTable.current.?.VertexAttrib2f(index, x, y);
}
pub fn VertexAttrib2fv(index: uint, v: [*c]const float) void {
   return FuncTable.current.?.VertexAttrib2fv(index, v);
}
pub fn VertexAttrib2s(index: uint, x: short, y: short) void {
   return FuncTable.current.?.VertexAttrib2s(index, x, y);
}
pub fn VertexAttrib2sv(index: uint, v: [*c]const short) void {
   return FuncTable.current.?.VertexAttrib2sv(index, v);
}
pub fn VertexAttrib3d(index: uint, x: double, y: double, z: double) void {
   return FuncTable.current.?.VertexAttrib3d(index, x, y, z);
}
pub fn VertexAttrib3dv(index: uint, v: [*c]const double) void {
   return FuncTable.current.?.VertexAttrib3dv(index, v);
}
pub fn VertexAttrib3f(index: uint, x: float, y: float, z: float) void {
   return FuncTable.current.?.VertexAttrib3f(index, x, y, z);
}
pub fn VertexAttrib3fv(index: uint, v: [*c]const float) void {
   return FuncTable.current.?.VertexAttrib3fv(index, v);
}
pub fn VertexAttrib3s(index: uint, x: short, y: short, z: short) void {
   return FuncTable.current.?.VertexAttrib3s(index, x, y, z);
}
pub fn VertexAttrib3sv(index: uint, v: [*c]const short) void {
   return FuncTable.current.?.VertexAttrib3sv(index, v);
}
pub fn VertexAttrib4Nbv(index: uint, v: [*c]const byte) void {
   return FuncTable.current.?.VertexAttrib4Nbv(index, v);
}
pub fn VertexAttrib4Niv(index: uint, v: [*c]const int) void {
   return FuncTable.current.?.VertexAttrib4Niv(index, v);
}
pub fn VertexAttrib4Nsv(index: uint, v: [*c]const short) void {
   return FuncTable.current.?.VertexAttrib4Nsv(index, v);
}
pub fn VertexAttrib4Nub(index: uint, x: ubyte, y: ubyte, z: ubyte, w: ubyte) void {
   return FuncTable.current.?.VertexAttrib4Nub(index, x, y, z, w);
}
pub fn VertexAttrib4Nubv(index: uint, v: [*c]const ubyte) void {
   return FuncTable.current.?.VertexAttrib4Nubv(index, v);
}
pub fn VertexAttrib4Nuiv(index: uint, v: [*c]const uint) void {
   return FuncTable.current.?.VertexAttrib4Nuiv(index, v);
}
pub fn VertexAttrib4Nusv(index: uint, v: [*c]const ushort) void {
   return FuncTable.current.?.VertexAttrib4Nusv(index, v);
}
pub fn VertexAttrib4bv(index: uint, v: [*c]const byte) void {
   return FuncTable.current.?.VertexAttrib4bv(index, v);
}
pub fn VertexAttrib4d(index: uint, x: double, y: double, z: double, w: double) void {
   return FuncTable.current.?.VertexAttrib4d(index, x, y, z, w);
}
pub fn VertexAttrib4dv(index: uint, v: [*c]const double) void {
   return FuncTable.current.?.VertexAttrib4dv(index, v);
}
pub fn VertexAttrib4f(index: uint, x: float, y: float, z: float, w: float) void {
   return FuncTable.current.?.VertexAttrib4f(index, x, y, z, w);
}
pub fn VertexAttrib4fv(index: uint, v: [*c]const float) void {
   return FuncTable.current.?.VertexAttrib4fv(index, v);
}
pub fn VertexAttrib4iv(index: uint, v: [*c]const int) void {
   return FuncTable.current.?.VertexAttrib4iv(index, v);
}
pub fn VertexAttrib4s(index: uint, x: short, y: short, z: short, w: short) void {
   return FuncTable.current.?.VertexAttrib4s(index, x, y, z, w);
}
pub fn VertexAttrib4sv(index: uint, v: [*c]const short) void {
   return FuncTable.current.?.VertexAttrib4sv(index, v);
}
pub fn VertexAttrib4ubv(index: uint, v: [*c]const ubyte) void {
   return FuncTable.current.?.VertexAttrib4ubv(index, v);
}
pub fn VertexAttrib4uiv(index: uint, v: [*c]const uint) void {
   return FuncTable.current.?.VertexAttrib4uiv(index, v);
}
pub fn VertexAttrib4usv(index: uint, v: [*c]const ushort) void {
   return FuncTable.current.?.VertexAttrib4usv(index, v);
}
pub fn VertexAttribPointer(index: uint, size: int, @"type": @"enum", normalized: boolean, stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.VertexAttribPointer(index, size, @"type", normalized, stride, pointer);
}
pub fn UniformMatrix2x3fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix2x3fv(location, count, transpose, value);
}
pub fn UniformMatrix3x2fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix3x2fv(location, count, transpose, value);
}
pub fn UniformMatrix2x4fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix2x4fv(location, count, transpose, value);
}
pub fn UniformMatrix4x2fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix4x2fv(location, count, transpose, value);
}
pub fn UniformMatrix3x4fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix3x4fv(location, count, transpose, value);
}
pub fn UniformMatrix4x3fv(location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.UniformMatrix4x3fv(location, count, transpose, value);
}
pub fn ColorMaski(index: uint, r: boolean, g: boolean, b: boolean, a: boolean) void {
   return FuncTable.current.?.ColorMaski(index, r, g, b, a);
}
pub fn GetBooleani_v(target: @"enum", index: uint, data: boolean) void {
   return FuncTable.current.?.GetBooleani_v(target, index, data);
}
pub fn Enablei(target: @"enum", index: uint) void {
   return FuncTable.current.?.Enablei(target, index);
}
pub fn Disablei(target: @"enum", index: uint) void {
   return FuncTable.current.?.Disablei(target, index);
}
pub fn IsEnabledi(target: @"enum", index: uint) boolean {
   return FuncTable.current.?.IsEnabledi(target, index);
}
pub fn BeginTransformFeedback(primitiveMode: @"enum") void {
   return FuncTable.current.?.BeginTransformFeedback(primitiveMode);
}
pub fn EndTransformFeedback() void {
   return FuncTable.current.?.EndTransformFeedback();
}
pub fn TransformFeedbackVaryings(program: uint, count: sizei, varyings: [*c]const [*c]const char, bufferMode: @"enum") void {
   return FuncTable.current.?.TransformFeedbackVaryings(program, count, varyings, bufferMode);
}
pub fn GetTransformFeedbackVarying(program: uint, index: uint, bufSize: sizei, length: sizei, size: sizei, @"type": @"enum", name: char) void {
   return FuncTable.current.?.GetTransformFeedbackVarying(program, index, bufSize, length, size, @"type", name);
}
pub fn ClampColor(target: @"enum", clamp: @"enum") void {
   return FuncTable.current.?.ClampColor(target, clamp);
}
pub fn BeginConditionalRender(id: uint, mode: @"enum") void {
   return FuncTable.current.?.BeginConditionalRender(id, mode);
}
pub fn EndConditionalRender() void {
   return FuncTable.current.?.EndConditionalRender();
}
pub fn VertexAttribIPointer(index: uint, size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.VertexAttribIPointer(index, size, @"type", stride, pointer);
}
pub fn GetVertexAttribIiv(index: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetVertexAttribIiv(index, pname, params);
}
pub fn GetVertexAttribIuiv(index: uint, pname: @"enum", params: uint) void {
   return FuncTable.current.?.GetVertexAttribIuiv(index, pname, params);
}
pub fn VertexAttribI1i(index: uint, x: int) void {
   return FuncTable.current.?.VertexAttribI1i(index, x);
}
pub fn VertexAttribI2i(index: uint, x: int, y: int) void {
   return FuncTable.current.?.VertexAttribI2i(index, x, y);
}
pub fn VertexAttribI3i(index: uint, x: int, y: int, z: int) void {
   return FuncTable.current.?.VertexAttribI3i(index, x, y, z);
}
pub fn VertexAttribI4i(index: uint, x: int, y: int, z: int, w: int) void {
   return FuncTable.current.?.VertexAttribI4i(index, x, y, z, w);
}
pub fn VertexAttribI1ui(index: uint, x: uint) void {
   return FuncTable.current.?.VertexAttribI1ui(index, x);
}
pub fn VertexAttribI2ui(index: uint, x: uint, y: uint) void {
   return FuncTable.current.?.VertexAttribI2ui(index, x, y);
}
pub fn VertexAttribI3ui(index: uint, x: uint, y: uint, z: uint) void {
   return FuncTable.current.?.VertexAttribI3ui(index, x, y, z);
}
pub fn VertexAttribI4ui(index: uint, x: uint, y: uint, z: uint, w: uint) void {
   return FuncTable.current.?.VertexAttribI4ui(index, x, y, z, w);
}
pub fn VertexAttribI1iv(index: uint, v: [*c]const int) void {
   return FuncTable.current.?.VertexAttribI1iv(index, v);
}
pub fn VertexAttribI2iv(index: uint, v: [*c]const int) void {
   return FuncTable.current.?.VertexAttribI2iv(index, v);
}
pub fn VertexAttribI3iv(index: uint, v: [*c]const int) void {
   return FuncTable.current.?.VertexAttribI3iv(index, v);
}
pub fn VertexAttribI4iv(index: uint, v: [*c]const int) void {
   return FuncTable.current.?.VertexAttribI4iv(index, v);
}
pub fn VertexAttribI1uiv(index: uint, v: [*c]const uint) void {
   return FuncTable.current.?.VertexAttribI1uiv(index, v);
}
pub fn VertexAttribI2uiv(index: uint, v: [*c]const uint) void {
   return FuncTable.current.?.VertexAttribI2uiv(index, v);
}
pub fn VertexAttribI3uiv(index: uint, v: [*c]const uint) void {
   return FuncTable.current.?.VertexAttribI3uiv(index, v);
}
pub fn VertexAttribI4uiv(index: uint, v: [*c]const uint) void {
   return FuncTable.current.?.VertexAttribI4uiv(index, v);
}
pub fn VertexAttribI4bv(index: uint, v: [*c]const byte) void {
   return FuncTable.current.?.VertexAttribI4bv(index, v);
}
pub fn VertexAttribI4sv(index: uint, v: [*c]const short) void {
   return FuncTable.current.?.VertexAttribI4sv(index, v);
}
pub fn VertexAttribI4ubv(index: uint, v: [*c]const ubyte) void {
   return FuncTable.current.?.VertexAttribI4ubv(index, v);
}
pub fn VertexAttribI4usv(index: uint, v: [*c]const ushort) void {
   return FuncTable.current.?.VertexAttribI4usv(index, v);
}
pub fn GetUniformuiv(program: uint, location: int, params: uint) void {
   return FuncTable.current.?.GetUniformuiv(program, location, params);
}
pub fn BindFragDataLocation(program: uint, color: uint, name: [*c]const char) void {
   return FuncTable.current.?.BindFragDataLocation(program, color, name);
}
pub fn GetFragDataLocation(program: uint, name: [*c]const char) int {
   return FuncTable.current.?.GetFragDataLocation(program, name);
}
pub fn Uniform1ui(location: int, v0: uint) void {
   return FuncTable.current.?.Uniform1ui(location, v0);
}
pub fn Uniform2ui(location: int, v0: uint, v1: uint) void {
   return FuncTable.current.?.Uniform2ui(location, v0, v1);
}
pub fn Uniform3ui(location: int, v0: uint, v1: uint, v2: uint) void {
   return FuncTable.current.?.Uniform3ui(location, v0, v1, v2);
}
pub fn Uniform4ui(location: int, v0: uint, v1: uint, v2: uint, v3: uint) void {
   return FuncTable.current.?.Uniform4ui(location, v0, v1, v2, v3);
}
pub fn Uniform1uiv(location: int, count: sizei, value: [*c]const uint) void {
   return FuncTable.current.?.Uniform1uiv(location, count, value);
}
pub fn Uniform2uiv(location: int, count: sizei, value: [*c]const uint) void {
   return FuncTable.current.?.Uniform2uiv(location, count, value);
}
pub fn Uniform3uiv(location: int, count: sizei, value: [*c]const uint) void {
   return FuncTable.current.?.Uniform3uiv(location, count, value);
}
pub fn Uniform4uiv(location: int, count: sizei, value: [*c]const uint) void {
   return FuncTable.current.?.Uniform4uiv(location, count, value);
}
pub fn TexParameterIiv(target: @"enum", pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.TexParameterIiv(target, pname, params);
}
pub fn TexParameterIuiv(target: @"enum", pname: @"enum", params: [*c]const uint) void {
   return FuncTable.current.?.TexParameterIuiv(target, pname, params);
}
pub fn GetTexParameterIiv(target: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetTexParameterIiv(target, pname, params);
}
pub fn GetTexParameterIuiv(target: @"enum", pname: @"enum", params: uint) void {
   return FuncTable.current.?.GetTexParameterIuiv(target, pname, params);
}
pub fn ClearBufferiv(buffer: @"enum", drawbuffer: int, value: [*c]const int) void {
   return FuncTable.current.?.ClearBufferiv(buffer, drawbuffer, value);
}
pub fn ClearBufferuiv(buffer: @"enum", drawbuffer: int, value: [*c]const uint) void {
   return FuncTable.current.?.ClearBufferuiv(buffer, drawbuffer, value);
}
pub fn ClearBufferfv(buffer: @"enum", drawbuffer: int, value: [*c]const float) void {
   return FuncTable.current.?.ClearBufferfv(buffer, drawbuffer, value);
}
pub fn ClearBufferfi(buffer: @"enum", drawbuffer: int, depth: float, stencil: int) void {
   return FuncTable.current.?.ClearBufferfi(buffer, drawbuffer, depth, stencil);
}
pub fn GetStringi(name: @"enum", index: uint) ubyte {
   return FuncTable.current.?.GetStringi(name, index);
}
pub fn IsRenderbuffer(renderbuffer: uint) boolean {
   return FuncTable.current.?.IsRenderbuffer(renderbuffer);
}
pub fn BindRenderbuffer(target: @"enum", renderbuffer: uint) void {
   return FuncTable.current.?.BindRenderbuffer(target, renderbuffer);
}
pub fn DeleteRenderbuffers(n: sizei, renderbuffers: [*c]const uint) void {
   return FuncTable.current.?.DeleteRenderbuffers(n, renderbuffers);
}
pub fn GenRenderbuffers(n: sizei, renderbuffers: uint) void {
   return FuncTable.current.?.GenRenderbuffers(n, renderbuffers);
}
pub fn RenderbufferStorage(target: @"enum", internalformat: @"enum", width: sizei, height: sizei) void {
   return FuncTable.current.?.RenderbufferStorage(target, internalformat, width, height);
}
pub fn GetRenderbufferParameteriv(target: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetRenderbufferParameteriv(target, pname, params);
}
pub fn IsFramebuffer(framebuffer: uint) boolean {
   return FuncTable.current.?.IsFramebuffer(framebuffer);
}
pub fn BindFramebuffer(target: @"enum", framebuffer: uint) void {
   return FuncTable.current.?.BindFramebuffer(target, framebuffer);
}
pub fn DeleteFramebuffers(n: sizei, framebuffers: [*c]const uint) void {
   return FuncTable.current.?.DeleteFramebuffers(n, framebuffers);
}
pub fn GenFramebuffers(n: sizei, framebuffers: uint) void {
   return FuncTable.current.?.GenFramebuffers(n, framebuffers);
}
pub fn CheckFramebufferStatus(target: @"enum") @"enum" {
   return FuncTable.current.?.CheckFramebufferStatus(target);
}
pub fn FramebufferTexture1D(target: @"enum", attachment: @"enum", textarget: @"enum", texture: uint, level: int) void {
   return FuncTable.current.?.FramebufferTexture1D(target, attachment, textarget, texture, level);
}
pub fn FramebufferTexture2D(target: @"enum", attachment: @"enum", textarget: @"enum", texture: uint, level: int) void {
   return FuncTable.current.?.FramebufferTexture2D(target, attachment, textarget, texture, level);
}
pub fn FramebufferTexture3D(target: @"enum", attachment: @"enum", textarget: @"enum", texture: uint, level: int, zoffset: int) void {
   return FuncTable.current.?.FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
}
pub fn FramebufferRenderbuffer(target: @"enum", attachment: @"enum", renderbuffertarget: @"enum", renderbuffer: uint) void {
   return FuncTable.current.?.FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}
pub fn GetFramebufferAttachmentParameteriv(target: @"enum", attachment: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}
pub fn GenerateMipmap(target: @"enum") void {
   return FuncTable.current.?.GenerateMipmap(target);
}
pub fn BlitFramebuffer(srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: @"enum") void {
   return FuncTable.current.?.BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
pub fn RenderbufferStorageMultisample(target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei) void {
   return FuncTable.current.?.RenderbufferStorageMultisample(target, samples, internalformat, width, height);
}
pub fn FramebufferTextureLayer(target: @"enum", attachment: @"enum", texture: uint, level: int, layer: int) void {
   return FuncTable.current.?.FramebufferTextureLayer(target, attachment, texture, level, layer);
}
pub fn MapBufferRange(target: @"enum", offset: intptr, length: sizeiptr, access: bitfield) void {
   return FuncTable.current.?.MapBufferRange(target, offset, length, access);
}
pub fn FlushMappedBufferRange(target: @"enum", offset: intptr, length: sizeiptr) void {
   return FuncTable.current.?.FlushMappedBufferRange(target, offset, length);
}
pub fn BindVertexArray(array: uint) void {
   return FuncTable.current.?.BindVertexArray(array);
}
pub fn DeleteVertexArrays(n: sizei, arrays: [*c]const uint) void {
   return FuncTable.current.?.DeleteVertexArrays(n, arrays);
}
pub fn GenVertexArrays(n: sizei, arrays: uint) void {
   return FuncTable.current.?.GenVertexArrays(n, arrays);
}
pub fn IsVertexArray(array: uint) boolean {
   return FuncTable.current.?.IsVertexArray(array);
}
pub fn DrawArraysInstanced(mode: @"enum", first: int, count: sizei, instancecount: sizei) void {
   return FuncTable.current.?.DrawArraysInstanced(mode, first, count, instancecount);
}
pub fn DrawElementsInstanced(mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, instancecount: sizei) void {
   return FuncTable.current.?.DrawElementsInstanced(mode, count, @"type", indices, instancecount);
}
pub fn TexBuffer(target: @"enum", internalformat: @"enum", buffer: uint) void {
   return FuncTable.current.?.TexBuffer(target, internalformat, buffer);
}
pub fn PrimitiveRestartIndex(index: uint) void {
   return FuncTable.current.?.PrimitiveRestartIndex(index);
}
pub fn CopyBufferSubData(readTarget: @"enum", writeTarget: @"enum", readOffset: intptr, writeOffset: intptr, size: sizeiptr) void {
   return FuncTable.current.?.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
}
pub fn GetUniformIndices(program: uint, uniformCount: sizei, uniformNames: [*c]const [*c]const char, uniformIndices: uint) void {
   return FuncTable.current.?.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}
pub fn GetActiveUniformsiv(program: uint, uniformCount: sizei, uniformIndices: [*c]const uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}
pub fn GetActiveUniformName(program: uint, uniformIndex: uint, bufSize: sizei, length: sizei, uniformName: char) void {
   return FuncTable.current.?.GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}
pub fn GetUniformBlockIndex(program: uint, uniformBlockName: [*c]const char) uint {
   return FuncTable.current.?.GetUniformBlockIndex(program, uniformBlockName);
}
pub fn GetActiveUniformBlockiv(program: uint, uniformBlockIndex: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}
pub fn GetActiveUniformBlockName(program: uint, uniformBlockIndex: uint, bufSize: sizei, length: sizei, uniformBlockName: char) void {
   return FuncTable.current.?.GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
pub fn UniformBlockBinding(program: uint, uniformBlockIndex: uint, uniformBlockBinding: uint) void {
   return FuncTable.current.?.UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}
pub fn DrawElementsBaseVertex(mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, basevertex: int) void {
   return FuncTable.current.?.DrawElementsBaseVertex(mode, count, @"type", indices, basevertex);
}
pub fn DrawRangeElementsBaseVertex(mode: @"enum", start: uint, end: uint, count: sizei, @"type": @"enum", indices: ?*const anyopaque, basevertex: int) void {
   return FuncTable.current.?.DrawRangeElementsBaseVertex(mode, start, end, count, @"type", indices, basevertex);
}
pub fn DrawElementsInstancedBaseVertex(mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, instancecount: sizei, basevertex: int) void {
   return FuncTable.current.?.DrawElementsInstancedBaseVertex(mode, count, @"type", indices, instancecount, basevertex);
}
pub fn MultiDrawElementsBaseVertex(mode: @"enum", count: [*c]const sizei, @"type": @"enum", indices: ?*const anyopaque, drawcount: sizei, basevertex: [*c]const int) void {
   return FuncTable.current.?.MultiDrawElementsBaseVertex(mode, count, @"type", indices, drawcount, basevertex);
}
pub fn ProvokingVertex(mode: @"enum") void {
   return FuncTable.current.?.ProvokingVertex(mode);
}
pub fn FenceSync(condition: @"enum", flags: bitfield) sync {
   return FuncTable.current.?.FenceSync(condition, flags);
}
pub fn IsSync(_sync: sync) boolean {
   return FuncTable.current.?.IsSync(_sync);
}
pub fn DeleteSync(_sync: sync) void {
   return FuncTable.current.?.DeleteSync(_sync);
}
pub fn ClientWaitSync(_sync: sync, flags: bitfield, timeout: uint64) @"enum" {
   return FuncTable.current.?.ClientWaitSync(_sync, flags, timeout);
}
pub fn WaitSync(_sync: sync, flags: bitfield, timeout: uint64) void {
   return FuncTable.current.?.WaitSync(_sync, flags, timeout);
}
pub fn GetInteger64v(pname: @"enum", data: int64) void {
   return FuncTable.current.?.GetInteger64v(pname, data);
}
pub fn GetSynciv(_sync: sync, pname: @"enum", count: sizei, length: sizei, values: int) void {
   return FuncTable.current.?.GetSynciv(_sync, pname, count, length, values);
}
pub fn GetInteger64i_v(target: @"enum", index: uint, data: int64) void {
   return FuncTable.current.?.GetInteger64i_v(target, index, data);
}
pub fn GetBufferParameteri64v(target: @"enum", pname: @"enum", params: int64) void {
   return FuncTable.current.?.GetBufferParameteri64v(target, pname, params);
}
pub fn FramebufferTexture(target: @"enum", attachment: @"enum", texture: uint, level: int) void {
   return FuncTable.current.?.FramebufferTexture(target, attachment, texture, level);
}
pub fn TexImage2DMultisample(target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei, fixedsamplelocations: boolean) void {
   return FuncTable.current.?.TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
pub fn TexImage3DMultisample(target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) void {
   return FuncTable.current.?.TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
pub fn GetMultisamplefv(pname: @"enum", index: uint, val: float) void {
   return FuncTable.current.?.GetMultisamplefv(pname, index, val);
}
pub fn SampleMaski(maskNumber: uint, mask: bitfield) void {
   return FuncTable.current.?.SampleMaski(maskNumber, mask);
}
pub fn BindFragDataLocationIndexed(program: uint, colorNumber: uint, index: uint, name: [*c]const char) void {
   return FuncTable.current.?.BindFragDataLocationIndexed(program, colorNumber, index, name);
}
pub fn GetFragDataIndex(program: uint, name: [*c]const char) int {
   return FuncTable.current.?.GetFragDataIndex(program, name);
}
pub fn GenSamplers(count: sizei, samplers: uint) void {
   return FuncTable.current.?.GenSamplers(count, samplers);
}
pub fn DeleteSamplers(count: sizei, samplers: [*c]const uint) void {
   return FuncTable.current.?.DeleteSamplers(count, samplers);
}
pub fn IsSampler(sampler: uint) boolean {
   return FuncTable.current.?.IsSampler(sampler);
}
pub fn BindSampler(unit: uint, sampler: uint) void {
   return FuncTable.current.?.BindSampler(unit, sampler);
}
pub fn SamplerParameteri(sampler: uint, pname: @"enum", param: int) void {
   return FuncTable.current.?.SamplerParameteri(sampler, pname, param);
}
pub fn SamplerParameteriv(sampler: uint, pname: @"enum", param: [*c]const int) void {
   return FuncTable.current.?.SamplerParameteriv(sampler, pname, param);
}
pub fn SamplerParameterf(sampler: uint, pname: @"enum", param: float) void {
   return FuncTable.current.?.SamplerParameterf(sampler, pname, param);
}
pub fn SamplerParameterfv(sampler: uint, pname: @"enum", param: [*c]const float) void {
   return FuncTable.current.?.SamplerParameterfv(sampler, pname, param);
}
pub fn SamplerParameterIiv(sampler: uint, pname: @"enum", param: [*c]const int) void {
   return FuncTable.current.?.SamplerParameterIiv(sampler, pname, param);
}
pub fn SamplerParameterIuiv(sampler: uint, pname: @"enum", param: [*c]const uint) void {
   return FuncTable.current.?.SamplerParameterIuiv(sampler, pname, param);
}
pub fn GetSamplerParameteriv(sampler: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetSamplerParameteriv(sampler, pname, params);
}
pub fn GetSamplerParameterIiv(sampler: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetSamplerParameterIiv(sampler, pname, params);
}
pub fn GetSamplerParameterfv(sampler: uint, pname: @"enum", params: float) void {
   return FuncTable.current.?.GetSamplerParameterfv(sampler, pname, params);
}
pub fn GetSamplerParameterIuiv(sampler: uint, pname: @"enum", params: uint) void {
   return FuncTable.current.?.GetSamplerParameterIuiv(sampler, pname, params);
}
pub fn QueryCounter(id: uint, target: @"enum") void {
   return FuncTable.current.?.QueryCounter(id, target);
}
pub fn GetQueryObjecti64v(id: uint, pname: @"enum", params: int64) void {
   return FuncTable.current.?.GetQueryObjecti64v(id, pname, params);
}
pub fn GetQueryObjectui64v(id: uint, pname: @"enum", params: uint64) void {
   return FuncTable.current.?.GetQueryObjectui64v(id, pname, params);
}
pub fn VertexAttribDivisor(index: uint, divisor: uint) void {
   return FuncTable.current.?.VertexAttribDivisor(index, divisor);
}
pub fn VertexAttribP1ui(index: uint, @"type": @"enum", normalized: boolean, value: uint) void {
   return FuncTable.current.?.VertexAttribP1ui(index, @"type", normalized, value);
}
pub fn VertexAttribP1uiv(index: uint, @"type": @"enum", normalized: boolean, value: [*c]const uint) void {
   return FuncTable.current.?.VertexAttribP1uiv(index, @"type", normalized, value);
}
pub fn VertexAttribP2ui(index: uint, @"type": @"enum", normalized: boolean, value: uint) void {
   return FuncTable.current.?.VertexAttribP2ui(index, @"type", normalized, value);
}
pub fn VertexAttribP2uiv(index: uint, @"type": @"enum", normalized: boolean, value: [*c]const uint) void {
   return FuncTable.current.?.VertexAttribP2uiv(index, @"type", normalized, value);
}
pub fn VertexAttribP3ui(index: uint, @"type": @"enum", normalized: boolean, value: uint) void {
   return FuncTable.current.?.VertexAttribP3ui(index, @"type", normalized, value);
}
pub fn VertexAttribP3uiv(index: uint, @"type": @"enum", normalized: boolean, value: [*c]const uint) void {
   return FuncTable.current.?.VertexAttribP3uiv(index, @"type", normalized, value);
}
pub fn VertexAttribP4ui(index: uint, @"type": @"enum", normalized: boolean, value: uint) void {
   return FuncTable.current.?.VertexAttribP4ui(index, @"type", normalized, value);
}
pub fn VertexAttribP4uiv(index: uint, @"type": @"enum", normalized: boolean, value: [*c]const uint) void {
   return FuncTable.current.?.VertexAttribP4uiv(index, @"type", normalized, value);
}
pub fn MinSampleShading(value: float) void {
   return FuncTable.current.?.MinSampleShading(value);
}
pub fn BlendEquationi(buf: uint, mode: @"enum") void {
   return FuncTable.current.?.BlendEquationi(buf, mode);
}
pub fn BlendEquationSeparatei(buf: uint, modeRGB: @"enum", modeAlpha: @"enum") void {
   return FuncTable.current.?.BlendEquationSeparatei(buf, modeRGB, modeAlpha);
}
pub fn BlendFunci(buf: uint, src: @"enum", dst: @"enum") void {
   return FuncTable.current.?.BlendFunci(buf, src, dst);
}
pub fn BlendFuncSeparatei(buf: uint, srcRGB: @"enum", dstRGB: @"enum", srcAlpha: @"enum", dstAlpha: @"enum") void {
   return FuncTable.current.?.BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
pub fn DrawArraysIndirect(mode: @"enum", indirect: ?*const anyopaque) void {
   return FuncTable.current.?.DrawArraysIndirect(mode, indirect);
}
pub fn DrawElementsIndirect(mode: @"enum", @"type": @"enum", indirect: ?*const anyopaque) void {
   return FuncTable.current.?.DrawElementsIndirect(mode, @"type", indirect);
}
pub fn Uniform1d(location: int, x: double) void {
   return FuncTable.current.?.Uniform1d(location, x);
}
pub fn Uniform2d(location: int, x: double, y: double) void {
   return FuncTable.current.?.Uniform2d(location, x, y);
}
pub fn Uniform3d(location: int, x: double, y: double, z: double) void {
   return FuncTable.current.?.Uniform3d(location, x, y, z);
}
pub fn Uniform4d(location: int, x: double, y: double, z: double, w: double) void {
   return FuncTable.current.?.Uniform4d(location, x, y, z, w);
}
pub fn Uniform1dv(location: int, count: sizei, value: [*c]const double) void {
   return FuncTable.current.?.Uniform1dv(location, count, value);
}
pub fn Uniform2dv(location: int, count: sizei, value: [*c]const double) void {
   return FuncTable.current.?.Uniform2dv(location, count, value);
}
pub fn Uniform3dv(location: int, count: sizei, value: [*c]const double) void {
   return FuncTable.current.?.Uniform3dv(location, count, value);
}
pub fn Uniform4dv(location: int, count: sizei, value: [*c]const double) void {
   return FuncTable.current.?.Uniform4dv(location, count, value);
}
pub fn UniformMatrix2dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix2dv(location, count, transpose, value);
}
pub fn UniformMatrix3dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix3dv(location, count, transpose, value);
}
pub fn UniformMatrix4dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix4dv(location, count, transpose, value);
}
pub fn UniformMatrix2x3dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix2x3dv(location, count, transpose, value);
}
pub fn UniformMatrix2x4dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix2x4dv(location, count, transpose, value);
}
pub fn UniformMatrix3x2dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix3x2dv(location, count, transpose, value);
}
pub fn UniformMatrix3x4dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix3x4dv(location, count, transpose, value);
}
pub fn UniformMatrix4x2dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix4x2dv(location, count, transpose, value);
}
pub fn UniformMatrix4x3dv(location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.UniformMatrix4x3dv(location, count, transpose, value);
}
pub fn GetUniformdv(program: uint, location: int, params: double) void {
   return FuncTable.current.?.GetUniformdv(program, location, params);
}
pub fn GetSubroutineUniformLocation(program: uint, shadertype: @"enum", name: [*c]const char) int {
   return FuncTable.current.?.GetSubroutineUniformLocation(program, shadertype, name);
}
pub fn GetSubroutineIndex(program: uint, shadertype: @"enum", name: [*c]const char) uint {
   return FuncTable.current.?.GetSubroutineIndex(program, shadertype, name);
}
pub fn GetActiveSubroutineUniformiv(program: uint, shadertype: @"enum", index: uint, pname: @"enum", values: int) void {
   return FuncTable.current.?.GetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}
pub fn GetActiveSubroutineUniformName(program: uint, shadertype: @"enum", index: uint, bufSize: sizei, length: sizei, name: char) void {
   return FuncTable.current.?.GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name);
}
pub fn GetActiveSubroutineName(program: uint, shadertype: @"enum", index: uint, bufSize: sizei, length: sizei, name: char) void {
   return FuncTable.current.?.GetActiveSubroutineName(program, shadertype, index, bufSize, length, name);
}
pub fn UniformSubroutinesuiv(shadertype: @"enum", count: sizei, indices: [*c]const uint) void {
   return FuncTable.current.?.UniformSubroutinesuiv(shadertype, count, indices);
}
pub fn GetUniformSubroutineuiv(shadertype: @"enum", location: int, params: uint) void {
   return FuncTable.current.?.GetUniformSubroutineuiv(shadertype, location, params);
}
pub fn GetProgramStageiv(program: uint, shadertype: @"enum", pname: @"enum", values: int) void {
   return FuncTable.current.?.GetProgramStageiv(program, shadertype, pname, values);
}
pub fn PatchParameteri(pname: @"enum", value: int) void {
   return FuncTable.current.?.PatchParameteri(pname, value);
}
pub fn PatchParameterfv(pname: @"enum", values: [*c]const float) void {
   return FuncTable.current.?.PatchParameterfv(pname, values);
}
pub fn BindTransformFeedback(target: @"enum", id: uint) void {
   return FuncTable.current.?.BindTransformFeedback(target, id);
}
pub fn DeleteTransformFeedbacks(n: sizei, ids: [*c]const uint) void {
   return FuncTable.current.?.DeleteTransformFeedbacks(n, ids);
}
pub fn GenTransformFeedbacks(n: sizei, ids: uint) void {
   return FuncTable.current.?.GenTransformFeedbacks(n, ids);
}
pub fn IsTransformFeedback(id: uint) boolean {
   return FuncTable.current.?.IsTransformFeedback(id);
}
pub fn PauseTransformFeedback() void {
   return FuncTable.current.?.PauseTransformFeedback();
}
pub fn ResumeTransformFeedback() void {
   return FuncTable.current.?.ResumeTransformFeedback();
}
pub fn DrawTransformFeedback(mode: @"enum", id: uint) void {
   return FuncTable.current.?.DrawTransformFeedback(mode, id);
}
pub fn DrawTransformFeedbackStream(mode: @"enum", id: uint, stream: uint) void {
   return FuncTable.current.?.DrawTransformFeedbackStream(mode, id, stream);
}
pub fn BeginQueryIndexed(target: @"enum", index: uint, id: uint) void {
   return FuncTable.current.?.BeginQueryIndexed(target, index, id);
}
pub fn EndQueryIndexed(target: @"enum", index: uint) void {
   return FuncTable.current.?.EndQueryIndexed(target, index);
}
pub fn GetQueryIndexediv(target: @"enum", index: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetQueryIndexediv(target, index, pname, params);
}
pub fn ReleaseShaderCompiler() void {
   return FuncTable.current.?.ReleaseShaderCompiler();
}
pub fn ShaderBinary(count: sizei, shaders: [*c]const uint, binaryFormat: @"enum", binary: ?*const anyopaque, length: sizei) void {
   return FuncTable.current.?.ShaderBinary(count, shaders, binaryFormat, binary, length);
}
pub fn GetShaderPrecisionFormat(shadertype: @"enum", precisiontype: @"enum", range: int, precision: int) void {
   return FuncTable.current.?.GetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}
pub fn DepthRangef(n: float, f: float) void {
   return FuncTable.current.?.DepthRangef(n, f);
}
pub fn ClearDepthf(d: float) void {
   return FuncTable.current.?.ClearDepthf(d);
}
pub fn GetProgramBinary(program: uint, bufSize: sizei, length: sizei, binaryFormat: @"enum", binary: ?*const anyopaque) void {
   return FuncTable.current.?.GetProgramBinary(program, bufSize, length, binaryFormat, binary);
}
pub fn ProgramBinary(program: uint, binaryFormat: @"enum", binary: ?*const anyopaque, length: sizei) void {
   return FuncTable.current.?.ProgramBinary(program, binaryFormat, binary, length);
}
pub fn UseProgramStages(pipeline: uint, stages: bitfield, program: uint) void {
   return FuncTable.current.?.UseProgramStages(pipeline, stages, program);
}
pub fn ActiveShaderProgram(pipeline: uint, program: uint) void {
   return FuncTable.current.?.ActiveShaderProgram(pipeline, program);
}
pub fn CreateShaderProgramv(@"type": @"enum", count: sizei, strings: [*c]const [*c]const char) uint {
   return FuncTable.current.?.CreateShaderProgramv(@"type", count, strings);
}
pub fn BindProgramPipeline(pipeline: uint) void {
   return FuncTable.current.?.BindProgramPipeline(pipeline);
}
pub fn DeleteProgramPipelines(n: sizei, pipelines: [*c]const uint) void {
   return FuncTable.current.?.DeleteProgramPipelines(n, pipelines);
}
pub fn GenProgramPipelines(n: sizei, pipelines: uint) void {
   return FuncTable.current.?.GenProgramPipelines(n, pipelines);
}
pub fn IsProgramPipeline(pipeline: uint) boolean {
   return FuncTable.current.?.IsProgramPipeline(pipeline);
}
pub fn GetProgramPipelineiv(pipeline: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetProgramPipelineiv(pipeline, pname, params);
}
pub fn ProgramUniform1i(program: uint, location: int, v0: int) void {
   return FuncTable.current.?.ProgramUniform1i(program, location, v0);
}
pub fn ProgramUniform1iv(program: uint, location: int, count: sizei, value: [*c]const int) void {
   return FuncTable.current.?.ProgramUniform1iv(program, location, count, value);
}
pub fn ProgramUniform1f(program: uint, location: int, v0: float) void {
   return FuncTable.current.?.ProgramUniform1f(program, location, v0);
}
pub fn ProgramUniform1fv(program: uint, location: int, count: sizei, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniform1fv(program, location, count, value);
}
pub fn ProgramUniform1d(program: uint, location: int, v0: double) void {
   return FuncTable.current.?.ProgramUniform1d(program, location, v0);
}
pub fn ProgramUniform1dv(program: uint, location: int, count: sizei, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniform1dv(program, location, count, value);
}
pub fn ProgramUniform1ui(program: uint, location: int, v0: uint) void {
   return FuncTable.current.?.ProgramUniform1ui(program, location, v0);
}
pub fn ProgramUniform1uiv(program: uint, location: int, count: sizei, value: [*c]const uint) void {
   return FuncTable.current.?.ProgramUniform1uiv(program, location, count, value);
}
pub fn ProgramUniform2i(program: uint, location: int, v0: int, v1: int) void {
   return FuncTable.current.?.ProgramUniform2i(program, location, v0, v1);
}
pub fn ProgramUniform2iv(program: uint, location: int, count: sizei, value: [*c]const int) void {
   return FuncTable.current.?.ProgramUniform2iv(program, location, count, value);
}
pub fn ProgramUniform2f(program: uint, location: int, v0: float, v1: float) void {
   return FuncTable.current.?.ProgramUniform2f(program, location, v0, v1);
}
pub fn ProgramUniform2fv(program: uint, location: int, count: sizei, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniform2fv(program, location, count, value);
}
pub fn ProgramUniform2d(program: uint, location: int, v0: double, v1: double) void {
   return FuncTable.current.?.ProgramUniform2d(program, location, v0, v1);
}
pub fn ProgramUniform2dv(program: uint, location: int, count: sizei, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniform2dv(program, location, count, value);
}
pub fn ProgramUniform2ui(program: uint, location: int, v0: uint, v1: uint) void {
   return FuncTable.current.?.ProgramUniform2ui(program, location, v0, v1);
}
pub fn ProgramUniform2uiv(program: uint, location: int, count: sizei, value: [*c]const uint) void {
   return FuncTable.current.?.ProgramUniform2uiv(program, location, count, value);
}
pub fn ProgramUniform3i(program: uint, location: int, v0: int, v1: int, v2: int) void {
   return FuncTable.current.?.ProgramUniform3i(program, location, v0, v1, v2);
}
pub fn ProgramUniform3iv(program: uint, location: int, count: sizei, value: [*c]const int) void {
   return FuncTable.current.?.ProgramUniform3iv(program, location, count, value);
}
pub fn ProgramUniform3f(program: uint, location: int, v0: float, v1: float, v2: float) void {
   return FuncTable.current.?.ProgramUniform3f(program, location, v0, v1, v2);
}
pub fn ProgramUniform3fv(program: uint, location: int, count: sizei, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniform3fv(program, location, count, value);
}
pub fn ProgramUniform3d(program: uint, location: int, v0: double, v1: double, v2: double) void {
   return FuncTable.current.?.ProgramUniform3d(program, location, v0, v1, v2);
}
pub fn ProgramUniform3dv(program: uint, location: int, count: sizei, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniform3dv(program, location, count, value);
}
pub fn ProgramUniform3ui(program: uint, location: int, v0: uint, v1: uint, v2: uint) void {
   return FuncTable.current.?.ProgramUniform3ui(program, location, v0, v1, v2);
}
pub fn ProgramUniform3uiv(program: uint, location: int, count: sizei, value: [*c]const uint) void {
   return FuncTable.current.?.ProgramUniform3uiv(program, location, count, value);
}
pub fn ProgramUniform4i(program: uint, location: int, v0: int, v1: int, v2: int, v3: int) void {
   return FuncTable.current.?.ProgramUniform4i(program, location, v0, v1, v2, v3);
}
pub fn ProgramUniform4iv(program: uint, location: int, count: sizei, value: [*c]const int) void {
   return FuncTable.current.?.ProgramUniform4iv(program, location, count, value);
}
pub fn ProgramUniform4f(program: uint, location: int, v0: float, v1: float, v2: float, v3: float) void {
   return FuncTable.current.?.ProgramUniform4f(program, location, v0, v1, v2, v3);
}
pub fn ProgramUniform4fv(program: uint, location: int, count: sizei, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniform4fv(program, location, count, value);
}
pub fn ProgramUniform4d(program: uint, location: int, v0: double, v1: double, v2: double, v3: double) void {
   return FuncTable.current.?.ProgramUniform4d(program, location, v0, v1, v2, v3);
}
pub fn ProgramUniform4dv(program: uint, location: int, count: sizei, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniform4dv(program, location, count, value);
}
pub fn ProgramUniform4ui(program: uint, location: int, v0: uint, v1: uint, v2: uint, v3: uint) void {
   return FuncTable.current.?.ProgramUniform4ui(program, location, v0, v1, v2, v3);
}
pub fn ProgramUniform4uiv(program: uint, location: int, count: sizei, value: [*c]const uint) void {
   return FuncTable.current.?.ProgramUniform4uiv(program, location, count, value);
}
pub fn ProgramUniformMatrix2fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix2fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix3fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix3fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix4fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix4fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix2dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix2dv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix3dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix3dv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix4dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix4dv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix2x3fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix3x2fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix2x4fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix4x2fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix3x4fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix4x3fv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) void {
   return FuncTable.current.?.ProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix2x3dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix3x2dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix2x4dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix4x2dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix3x4dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}
pub fn ProgramUniformMatrix4x3dv(program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) void {
   return FuncTable.current.?.ProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}
pub fn ValidateProgramPipeline(pipeline: uint) void {
   return FuncTable.current.?.ValidateProgramPipeline(pipeline);
}
pub fn GetProgramPipelineInfoLog(pipeline: uint, bufSize: sizei, length: sizei, infoLog: char) void {
   return FuncTable.current.?.GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}
pub fn VertexAttribL1d(index: uint, x: double) void {
   return FuncTable.current.?.VertexAttribL1d(index, x);
}
pub fn VertexAttribL2d(index: uint, x: double, y: double) void {
   return FuncTable.current.?.VertexAttribL2d(index, x, y);
}
pub fn VertexAttribL3d(index: uint, x: double, y: double, z: double) void {
   return FuncTable.current.?.VertexAttribL3d(index, x, y, z);
}
pub fn VertexAttribL4d(index: uint, x: double, y: double, z: double, w: double) void {
   return FuncTable.current.?.VertexAttribL4d(index, x, y, z, w);
}
pub fn VertexAttribL1dv(index: uint, v: [*c]const double) void {
   return FuncTable.current.?.VertexAttribL1dv(index, v);
}
pub fn VertexAttribL2dv(index: uint, v: [*c]const double) void {
   return FuncTable.current.?.VertexAttribL2dv(index, v);
}
pub fn VertexAttribL3dv(index: uint, v: [*c]const double) void {
   return FuncTable.current.?.VertexAttribL3dv(index, v);
}
pub fn VertexAttribL4dv(index: uint, v: [*c]const double) void {
   return FuncTable.current.?.VertexAttribL4dv(index, v);
}
pub fn VertexAttribLPointer(index: uint, size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) void {
   return FuncTable.current.?.VertexAttribLPointer(index, size, @"type", stride, pointer);
}
pub fn GetVertexAttribLdv(index: uint, pname: @"enum", params: double) void {
   return FuncTable.current.?.GetVertexAttribLdv(index, pname, params);
}
pub fn ViewportArrayv(first: uint, count: sizei, v: [*c]const float) void {
   return FuncTable.current.?.ViewportArrayv(first, count, v);
}
pub fn ViewportIndexedf(index: uint, x: float, y: float, w: float, h: float) void {
   return FuncTable.current.?.ViewportIndexedf(index, x, y, w, h);
}
pub fn ViewportIndexedfv(index: uint, v: [*c]const float) void {
   return FuncTable.current.?.ViewportIndexedfv(index, v);
}
pub fn ScissorArrayv(first: uint, count: sizei, v: [*c]const int) void {
   return FuncTable.current.?.ScissorArrayv(first, count, v);
}
pub fn ScissorIndexed(index: uint, left: int, bottom: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.ScissorIndexed(index, left, bottom, width, height);
}
pub fn ScissorIndexedv(index: uint, v: [*c]const int) void {
   return FuncTable.current.?.ScissorIndexedv(index, v);
}
pub fn DepthRangeArrayv(first: uint, count: sizei, v: [*c]const double) void {
   return FuncTable.current.?.DepthRangeArrayv(first, count, v);
}
pub fn DepthRangeIndexed(index: uint, n: double, f: double) void {
   return FuncTable.current.?.DepthRangeIndexed(index, n, f);
}
pub fn GetFloati_v(target: @"enum", index: uint, data: float) void {
   return FuncTable.current.?.GetFloati_v(target, index, data);
}
pub fn GetDoublei_v(target: @"enum", index: uint, data: double) void {
   return FuncTable.current.?.GetDoublei_v(target, index, data);
}
pub fn DrawArraysInstancedBaseInstance(mode: @"enum", first: int, count: sizei, instancecount: sizei, baseinstance: uint) void {
   return FuncTable.current.?.DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
}
pub fn DrawElementsInstancedBaseInstance(mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, instancecount: sizei, baseinstance: uint) void {
   return FuncTable.current.?.DrawElementsInstancedBaseInstance(mode, count, @"type", indices, instancecount, baseinstance);
}
pub fn DrawElementsInstancedBaseVertexBaseInstance(mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, instancecount: sizei, basevertex: int, baseinstance: uint) void {
   return FuncTable.current.?.DrawElementsInstancedBaseVertexBaseInstance(mode, count, @"type", indices, instancecount, basevertex, baseinstance);
}
pub fn GetInternalformativ(target: @"enum", internalformat: @"enum", pname: @"enum", count: sizei, params: int) void {
   return FuncTable.current.?.GetInternalformativ(target, internalformat, pname, count, params);
}
pub fn GetActiveAtomicCounterBufferiv(program: uint, bufferIndex: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}
pub fn BindImageTexture(unit: uint, texture: uint, level: int, layered: boolean, layer: int, access: @"enum", format: @"enum") void {
   return FuncTable.current.?.BindImageTexture(unit, texture, level, layered, layer, access, format);
}
pub fn MemoryBarrier(barriers: bitfield) void {
   return FuncTable.current.?.MemoryBarrier(barriers);
}
pub fn TexStorage1D(target: @"enum", levels: sizei, internalformat: @"enum", width: sizei) void {
   return FuncTable.current.?.TexStorage1D(target, levels, internalformat, width);
}
pub fn TexStorage2D(target: @"enum", levels: sizei, internalformat: @"enum", width: sizei, height: sizei) void {
   return FuncTable.current.?.TexStorage2D(target, levels, internalformat, width, height);
}
pub fn TexStorage3D(target: @"enum", levels: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei) void {
   return FuncTable.current.?.TexStorage3D(target, levels, internalformat, width, height, depth);
}
pub fn DrawTransformFeedbackInstanced(mode: @"enum", id: uint, instancecount: sizei) void {
   return FuncTable.current.?.DrawTransformFeedbackInstanced(mode, id, instancecount);
}
pub fn DrawTransformFeedbackStreamInstanced(mode: @"enum", id: uint, stream: uint, instancecount: sizei) void {
   return FuncTable.current.?.DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
}
pub fn ClearBufferData(target: @"enum", internalformat: @"enum", format: @"enum", @"type": @"enum", data: ?*const anyopaque) void {
   return FuncTable.current.?.ClearBufferData(target, internalformat, format, @"type", data);
}
pub fn ClearBufferSubData(target: @"enum", internalformat: @"enum", offset: intptr, size: sizeiptr, format: @"enum", @"type": @"enum", data: ?*const anyopaque) void {
   return FuncTable.current.?.ClearBufferSubData(target, internalformat, offset, size, format, @"type", data);
}
pub fn DispatchCompute(num_groups_x: uint, num_groups_y: uint, num_groups_z: uint) void {
   return FuncTable.current.?.DispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}
pub fn DispatchComputeIndirect(indirect: intptr) void {
   return FuncTable.current.?.DispatchComputeIndirect(indirect);
}
pub fn CopyImageSubData(srcName: uint, srcTarget: @"enum", srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: uint, dstTarget: @"enum", dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: sizei, srcHeight: sizei, srcDepth: sizei) void {
   return FuncTable.current.?.CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
pub fn FramebufferParameteri(target: @"enum", pname: @"enum", param: int) void {
   return FuncTable.current.?.FramebufferParameteri(target, pname, param);
}
pub fn GetFramebufferParameteriv(target: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetFramebufferParameteriv(target, pname, params);
}
pub fn GetInternalformati64v(target: @"enum", internalformat: @"enum", pname: @"enum", count: sizei, params: int64) void {
   return FuncTable.current.?.GetInternalformati64v(target, internalformat, pname, count, params);
}
pub fn InvalidateTexSubImage(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei) void {
   return FuncTable.current.?.InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
pub fn InvalidateTexImage(texture: uint, level: int) void {
   return FuncTable.current.?.InvalidateTexImage(texture, level);
}
pub fn InvalidateBufferSubData(buffer: uint, offset: intptr, length: sizeiptr) void {
   return FuncTable.current.?.InvalidateBufferSubData(buffer, offset, length);
}
pub fn InvalidateBufferData(buffer: uint) void {
   return FuncTable.current.?.InvalidateBufferData(buffer);
}
pub fn InvalidateFramebuffer(target: @"enum", numAttachments: sizei, attachments: [*c]const @"enum") void {
   return FuncTable.current.?.InvalidateFramebuffer(target, numAttachments, attachments);
}
pub fn InvalidateSubFramebuffer(target: @"enum", numAttachments: sizei, attachments: [*c]const @"enum", x: int, y: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}
pub fn MultiDrawArraysIndirect(mode: @"enum", indirect: ?*const anyopaque, drawcount: sizei, stride: sizei) void {
   return FuncTable.current.?.MultiDrawArraysIndirect(mode, indirect, drawcount, stride);
}
pub fn MultiDrawElementsIndirect(mode: @"enum", @"type": @"enum", indirect: ?*const anyopaque, drawcount: sizei, stride: sizei) void {
   return FuncTable.current.?.MultiDrawElementsIndirect(mode, @"type", indirect, drawcount, stride);
}
pub fn GetProgramInterfaceiv(program: uint, programInterface: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetProgramInterfaceiv(program, programInterface, pname, params);
}
pub fn GetProgramResourceIndex(program: uint, programInterface: @"enum", name: [*c]const char) uint {
   return FuncTable.current.?.GetProgramResourceIndex(program, programInterface, name);
}
pub fn GetProgramResourceName(program: uint, programInterface: @"enum", index: uint, bufSize: sizei, length: sizei, name: char) void {
   return FuncTable.current.?.GetProgramResourceName(program, programInterface, index, bufSize, length, name);
}
pub fn GetProgramResourceiv(program: uint, programInterface: @"enum", index: uint, propCount: sizei, props: [*c]const @"enum", count: sizei, length: sizei, params: int) void {
   return FuncTable.current.?.GetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params);
}
pub fn GetProgramResourceLocation(program: uint, programInterface: @"enum", name: [*c]const char) int {
   return FuncTable.current.?.GetProgramResourceLocation(program, programInterface, name);
}
pub fn GetProgramResourceLocationIndex(program: uint, programInterface: @"enum", name: [*c]const char) int {
   return FuncTable.current.?.GetProgramResourceLocationIndex(program, programInterface, name);
}
pub fn ShaderStorageBlockBinding(program: uint, storageBlockIndex: uint, storageBlockBinding: uint) void {
   return FuncTable.current.?.ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}
pub fn TexBufferRange(target: @"enum", internalformat: @"enum", buffer: uint, offset: intptr, size: sizeiptr) void {
   return FuncTable.current.?.TexBufferRange(target, internalformat, buffer, offset, size);
}
pub fn TexStorage2DMultisample(target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei, fixedsamplelocations: boolean) void {
   return FuncTable.current.?.TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
pub fn TexStorage3DMultisample(target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) void {
   return FuncTable.current.?.TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
pub fn TextureView(texture: uint, target: @"enum", origtexture: uint, internalformat: @"enum", minlevel: uint, numlevels: uint, minlayer: uint, numlayers: uint) void {
   return FuncTable.current.?.TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
pub fn BindVertexBuffer(bindingindex: uint, buffer: uint, offset: intptr, stride: sizei) void {
   return FuncTable.current.?.BindVertexBuffer(bindingindex, buffer, offset, stride);
}
pub fn VertexAttribFormat(attribindex: uint, size: int, @"type": @"enum", normalized: boolean, relativeoffset: uint) void {
   return FuncTable.current.?.VertexAttribFormat(attribindex, size, @"type", normalized, relativeoffset);
}
pub fn VertexAttribIFormat(attribindex: uint, size: int, @"type": @"enum", relativeoffset: uint) void {
   return FuncTable.current.?.VertexAttribIFormat(attribindex, size, @"type", relativeoffset);
}
pub fn VertexAttribLFormat(attribindex: uint, size: int, @"type": @"enum", relativeoffset: uint) void {
   return FuncTable.current.?.VertexAttribLFormat(attribindex, size, @"type", relativeoffset);
}
pub fn VertexAttribBinding(attribindex: uint, bindingindex: uint) void {
   return FuncTable.current.?.VertexAttribBinding(attribindex, bindingindex);
}
pub fn VertexBindingDivisor(bindingindex: uint, divisor: uint) void {
   return FuncTable.current.?.VertexBindingDivisor(bindingindex, divisor);
}
pub fn DebugMessageControl(source: @"enum", @"type": @"enum", severity: @"enum", count: sizei, ids: [*c]const uint, enabled: boolean) void {
   return FuncTable.current.?.DebugMessageControl(source, @"type", severity, count, ids, enabled);
}
pub fn DebugMessageInsert(source: @"enum", @"type": @"enum", id: uint, severity: @"enum", length: sizei, buf: [*c]const char) void {
   return FuncTable.current.?.DebugMessageInsert(source, @"type", id, severity, length, buf);
}
pub fn DebugMessageCallback(callback: ?DEBUGPROC, userParam: ?*const anyopaque) void {
   return FuncTable.current.?.DebugMessageCallback(callback, userParam);
}
pub fn GetDebugMessageLog(count: uint, bufSize: sizei, sources: @"enum", types: @"enum", ids: uint, severities: @"enum", lengths: sizei, messageLog: char) uint {
   return FuncTable.current.?.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
pub fn PushDebugGroup(source: @"enum", id: uint, length: sizei, message: [*c]const char) void {
   return FuncTable.current.?.PushDebugGroup(source, id, length, message);
}
pub fn PopDebugGroup() void {
   return FuncTable.current.?.PopDebugGroup();
}
pub fn ObjectLabel(identifier: @"enum", name: uint, length: sizei, label: [*c]const char) void {
   return FuncTable.current.?.ObjectLabel(identifier, name, length, label);
}
pub fn GetObjectLabel(identifier: @"enum", name: uint, bufSize: sizei, length: sizei, label: char) void {
   return FuncTable.current.?.GetObjectLabel(identifier, name, bufSize, length, label);
}
pub fn ObjectPtrLabel(ptr: ?*const anyopaque, length: sizei, label: [*c]const char) void {
   return FuncTable.current.?.ObjectPtrLabel(ptr, length, label);
}
pub fn GetObjectPtrLabel(ptr: ?*const anyopaque, bufSize: sizei, length: sizei, label: char) void {
   return FuncTable.current.?.GetObjectPtrLabel(ptr, bufSize, length, label);
}
pub fn BufferStorage(target: @"enum", size: sizeiptr, data: ?*const anyopaque, flags: bitfield) void {
   return FuncTable.current.?.BufferStorage(target, size, data, flags);
}
pub fn ClearTexImage(texture: uint, level: int, format: @"enum", @"type": @"enum", data: ?*const anyopaque) void {
   return FuncTable.current.?.ClearTexImage(texture, level, format, @"type", data);
}
pub fn ClearTexSubImage(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", @"type": @"enum", data: ?*const anyopaque) void {
   return FuncTable.current.?.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, @"type", data);
}
pub fn BindBuffersBase(target: @"enum", first: uint, count: sizei, buffers: [*]uint) void {
   return FuncTable.current.?.BindBuffersBase(target, first, count, buffers);
}
pub fn BindBuffersRange(target: @"enum", first: uint, count: sizei, buffers: [*]uint, offsets: [*c]const intptr, sizes: [*c]const sizeiptr) void {
   return FuncTable.current.?.BindBuffersRange(target, first, count, buffers, offsets, sizes);
}
pub fn BindTextures(first: uint, count: sizei, textures: [*c]const uint) void {
   return FuncTable.current.?.BindTextures(first, count, textures);
}
pub fn BindSamplers(first: uint, count: sizei, samplers: [*c]const uint) void {
   return FuncTable.current.?.BindSamplers(first, count, samplers);
}
pub fn BindImageTextures(first: uint, count: sizei, textures: [*c]const uint) void {
   return FuncTable.current.?.BindImageTextures(first, count, textures);
}
pub fn BindVertexBuffers(first: uint, count: sizei, buffers: [*]uint, offsets: [*c]const intptr, strides: [*c]const sizei) void {
   return FuncTable.current.?.BindVertexBuffers(first, count, buffers, offsets, strides);
}
pub fn ClipControl(origin: @"enum", depth: @"enum") void {
   return FuncTable.current.?.ClipControl(origin, depth);
}
pub fn CreateTransformFeedbacks(n: sizei, ids: uint) void {
   return FuncTable.current.?.CreateTransformFeedbacks(n, ids);
}
pub fn TransformFeedbackBufferBase(xfb: uint, index: uint, buffer: uint) void {
   return FuncTable.current.?.TransformFeedbackBufferBase(xfb, index, buffer);
}
pub fn TransformFeedbackBufferRange(xfb: uint, index: uint, buffer: uint, offset: intptr, size: sizeiptr) void {
   return FuncTable.current.?.TransformFeedbackBufferRange(xfb, index, buffer, offset, size);
}
pub fn GetTransformFeedbackiv(xfb: uint, pname: @"enum", param: int) void {
   return FuncTable.current.?.GetTransformFeedbackiv(xfb, pname, param);
}
pub fn GetTransformFeedbacki_v(xfb: uint, pname: @"enum", index: uint, param: int) void {
   return FuncTable.current.?.GetTransformFeedbacki_v(xfb, pname, index, param);
}
pub fn GetTransformFeedbacki64_v(xfb: uint, pname: @"enum", index: uint, param: int64) void {
   return FuncTable.current.?.GetTransformFeedbacki64_v(xfb, pname, index, param);
}
pub fn CreateBuffers(n: sizei, buffers: uint) void {
   return FuncTable.current.?.CreateBuffers(n, buffers);
}
pub fn NamedBufferStorage(buffer: uint, size: sizeiptr, data: ?*const anyopaque, flags: bitfield) void {
   return FuncTable.current.?.NamedBufferStorage(buffer, size, data, flags);
}
pub fn NamedBufferData(buffer: uint, size: sizeiptr, data: ?*const anyopaque, usage: @"enum") void {
   return FuncTable.current.?.NamedBufferData(buffer, size, data, usage);
}
pub fn NamedBufferSubData(buffer: uint, offset: intptr, size: sizeiptr, data: ?*const anyopaque) void {
   return FuncTable.current.?.NamedBufferSubData(buffer, offset, size, data);
}
pub fn CopyNamedBufferSubData(readBuffer: uint, writeBuffer: uint, readOffset: intptr, writeOffset: intptr, size: sizeiptr) void {
   return FuncTable.current.?.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
pub fn ClearNamedBufferData(buffer: uint, internalformat: @"enum", format: @"enum", @"type": @"enum", data: ?*const anyopaque) void {
   return FuncTable.current.?.ClearNamedBufferData(buffer, internalformat, format, @"type", data);
}
pub fn ClearNamedBufferSubData(buffer: uint, internalformat: @"enum", offset: intptr, size: sizeiptr, format: @"enum", @"type": @"enum", data: ?*const anyopaque) void {
   return FuncTable.current.?.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, @"type", data);
}
pub fn MapNamedBuffer(buffer: uint, access: @"enum") void {
   return FuncTable.current.?.MapNamedBuffer(buffer, access);
}
pub fn MapNamedBufferRange(buffer: uint, offset: intptr, length: sizeiptr, access: bitfield) void {
   return FuncTable.current.?.MapNamedBufferRange(buffer, offset, length, access);
}
pub fn UnmapNamedBuffer(buffer: uint) boolean {
   return FuncTable.current.?.UnmapNamedBuffer(buffer);
}
pub fn FlushMappedNamedBufferRange(buffer: uint, offset: intptr, length: sizeiptr) void {
   return FuncTable.current.?.FlushMappedNamedBufferRange(buffer, offset, length);
}
pub fn GetNamedBufferParameteriv(buffer: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetNamedBufferParameteriv(buffer, pname, params);
}
pub fn GetNamedBufferParameteri64v(buffer: uint, pname: @"enum", params: int64) void {
   return FuncTable.current.?.GetNamedBufferParameteri64v(buffer, pname, params);
}
pub fn GetNamedBufferPointerv(buffer: uint, pname: @"enum", params: ?*const anyopaque) void {
   return FuncTable.current.?.GetNamedBufferPointerv(buffer, pname, params);
}
pub fn GetNamedBufferSubData(buffer: uint, offset: intptr, size: sizeiptr, data: ?*const anyopaque) void {
   return FuncTable.current.?.GetNamedBufferSubData(buffer, offset, size, data);
}
pub fn CreateFramebuffers(n: sizei, framebuffers: uint) void {
   return FuncTable.current.?.CreateFramebuffers(n, framebuffers);
}
pub fn NamedFramebufferRenderbuffer(framebuffer: uint, attachment: @"enum", renderbuffertarget: @"enum", renderbuffer: uint) void {
   return FuncTable.current.?.NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
pub fn NamedFramebufferParameteri(framebuffer: uint, pname: @"enum", param: int) void {
   return FuncTable.current.?.NamedFramebufferParameteri(framebuffer, pname, param);
}
pub fn NamedFramebufferTexture(framebuffer: uint, attachment: @"enum", texture: uint, level: int) void {
   return FuncTable.current.?.NamedFramebufferTexture(framebuffer, attachment, texture, level);
}
pub fn NamedFramebufferTextureLayer(framebuffer: uint, attachment: @"enum", texture: uint, level: int, layer: int) void {
   return FuncTable.current.?.NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
}
pub fn NamedFramebufferDrawBuffer(framebuffer: uint, buf: @"enum") void {
   return FuncTable.current.?.NamedFramebufferDrawBuffer(framebuffer, buf);
}
pub fn NamedFramebufferDrawBuffers(framebuffer: uint, n: sizei, bufs: [*c]const @"enum") void {
   return FuncTable.current.?.NamedFramebufferDrawBuffers(framebuffer, n, bufs);
}
pub fn NamedFramebufferReadBuffer(framebuffer: uint, src: @"enum") void {
   return FuncTable.current.?.NamedFramebufferReadBuffer(framebuffer, src);
}
pub fn InvalidateNamedFramebufferData(framebuffer: uint, numAttachments: sizei, attachments: [*c]const @"enum") void {
   return FuncTable.current.?.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
}
pub fn InvalidateNamedFramebufferSubData(framebuffer: uint, numAttachments: sizei, attachments: [*c]const @"enum", x: int, y: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
}
pub fn ClearNamedFramebufferiv(framebuffer: uint, buffer: @"enum", drawbuffer: int, value: [*c]const int) void {
   return FuncTable.current.?.ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
}
pub fn ClearNamedFramebufferuiv(framebuffer: uint, buffer: @"enum", drawbuffer: int, value: [*c]const uint) void {
   return FuncTable.current.?.ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
}
pub fn ClearNamedFramebufferfv(framebuffer: uint, buffer: @"enum", drawbuffer: int, value: [*c]const float) void {
   return FuncTable.current.?.ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
}
pub fn ClearNamedFramebufferfi(framebuffer: uint, buffer: @"enum", drawbuffer: int, depth: float, stencil: int) void {
   return FuncTable.current.?.ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
}
pub fn BlitNamedFramebuffer(readFramebuffer: uint, drawFramebuffer: uint, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: @"enum") void {
   return FuncTable.current.?.BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
pub fn CheckNamedFramebufferStatus(framebuffer: uint, target: @"enum") @"enum" {
   return FuncTable.current.?.CheckNamedFramebufferStatus(framebuffer, target);
}
pub fn GetNamedFramebufferParameteriv(framebuffer: uint, pname: @"enum", param: int) void {
   return FuncTable.current.?.GetNamedFramebufferParameteriv(framebuffer, pname, param);
}
pub fn GetNamedFramebufferAttachmentParameteriv(framebuffer: uint, attachment: @"enum", pname: @"enum", params: int) void {
   return FuncTable.current.?.GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
}
pub fn CreateRenderbuffers(n: sizei, renderbuffers: uint) void {
   return FuncTable.current.?.CreateRenderbuffers(n, renderbuffers);
}
pub fn NamedRenderbufferStorage(renderbuffer: uint, internalformat: @"enum", width: sizei, height: sizei) void {
   return FuncTable.current.?.NamedRenderbufferStorage(renderbuffer, internalformat, width, height);
}
pub fn NamedRenderbufferStorageMultisample(renderbuffer: uint, samples: sizei, internalformat: @"enum", width: sizei, height: sizei) void {
   return FuncTable.current.?.NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
}
pub fn GetNamedRenderbufferParameteriv(renderbuffer: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetNamedRenderbufferParameteriv(renderbuffer, pname, params);
}
pub fn CreateTextures(target: @"enum", n: sizei, textures: uint) void {
   return FuncTable.current.?.CreateTextures(target, n, textures);
}
pub fn TextureBuffer(texture: uint, internalformat: @"enum", buffer: uint) void {
   return FuncTable.current.?.TextureBuffer(texture, internalformat, buffer);
}
pub fn TextureBufferRange(texture: uint, internalformat: @"enum", buffer: uint, offset: intptr, size: sizeiptr) void {
   return FuncTable.current.?.TextureBufferRange(texture, internalformat, buffer, offset, size);
}
pub fn TextureStorage1D(texture: uint, levels: sizei, internalformat: @"enum", width: sizei) void {
   return FuncTable.current.?.TextureStorage1D(texture, levels, internalformat, width);
}
pub fn TextureStorage2D(texture: uint, levels: sizei, internalformat: @"enum", width: sizei, height: sizei) void {
   return FuncTable.current.?.TextureStorage2D(texture, levels, internalformat, width, height);
}
pub fn TextureStorage3D(texture: uint, levels: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei) void {
   return FuncTable.current.?.TextureStorage3D(texture, levels, internalformat, width, height, depth);
}
pub fn TextureStorage2DMultisample(texture: uint, samples: sizei, internalformat: @"enum", width: sizei, height: sizei, fixedsamplelocations: boolean) void {
   return FuncTable.current.?.TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
}
pub fn TextureStorage3DMultisample(texture: uint, samples: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) void {
   return FuncTable.current.?.TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}
pub fn TextureSubImage1D(texture: uint, level: int, xoffset: int, width: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TextureSubImage1D(texture, level, xoffset, width, format, @"type", pixels);
}
pub fn TextureSubImage2D(texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, @"type", pixels);
}
pub fn TextureSubImage3D(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) void {
   return FuncTable.current.?.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, @"type", pixels);
}
pub fn CompressedTextureSubImage1D(texture: uint, level: int, xoffset: int, width: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
}
pub fn CompressedTextureSubImage2D(texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}
pub fn CompressedTextureSubImage3D(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
pub fn CopyTextureSubImage1D(texture: uint, level: int, xoffset: int, x: int, y: int, width: sizei) void {
   return FuncTable.current.?.CopyTextureSubImage1D(texture, level, xoffset, x, y, width);
}
pub fn CopyTextureSubImage2D(texture: uint, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
}
pub fn CopyTextureSubImage3D(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei) void {
   return FuncTable.current.?.CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}
pub fn TextureParameterf(texture: uint, pname: @"enum", param: float) void {
   return FuncTable.current.?.TextureParameterf(texture, pname, param);
}
pub fn TextureParameterfv(texture: uint, pname: @"enum", param: [*c]const float) void {
   return FuncTable.current.?.TextureParameterfv(texture, pname, param);
}
pub fn TextureParameteri(texture: uint, pname: @"enum", param: int) void {
   return FuncTable.current.?.TextureParameteri(texture, pname, param);
}
pub fn TextureParameterIiv(texture: uint, pname: @"enum", params: [*c]const int) void {
   return FuncTable.current.?.TextureParameterIiv(texture, pname, params);
}
pub fn TextureParameterIuiv(texture: uint, pname: @"enum", params: [*c]const uint) void {
   return FuncTable.current.?.TextureParameterIuiv(texture, pname, params);
}
pub fn TextureParameteriv(texture: uint, pname: @"enum", param: [*c]const int) void {
   return FuncTable.current.?.TextureParameteriv(texture, pname, param);
}
pub fn GenerateTextureMipmap(texture: uint) void {
   return FuncTable.current.?.GenerateTextureMipmap(texture);
}
pub fn BindTextureUnit(unit: uint, texture: uint) void {
   return FuncTable.current.?.BindTextureUnit(unit, texture);
}
pub fn GetTextureImage(texture: uint, level: int, format: @"enum", @"type": @"enum", bufSize: sizei, pixels: ?*const anyopaque) void {
   return FuncTable.current.?.GetTextureImage(texture, level, format, @"type", bufSize, pixels);
}
pub fn GetCompressedTextureImage(texture: uint, level: int, bufSize: sizei, pixels: ?*const anyopaque) void {
   return FuncTable.current.?.GetCompressedTextureImage(texture, level, bufSize, pixels);
}
pub fn GetTextureLevelParameterfv(texture: uint, level: int, pname: @"enum", params: float) void {
   return FuncTable.current.?.GetTextureLevelParameterfv(texture, level, pname, params);
}
pub fn GetTextureLevelParameteriv(texture: uint, level: int, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetTextureLevelParameteriv(texture, level, pname, params);
}
pub fn GetTextureParameterfv(texture: uint, pname: @"enum", params: float) void {
   return FuncTable.current.?.GetTextureParameterfv(texture, pname, params);
}
pub fn GetTextureParameterIiv(texture: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetTextureParameterIiv(texture, pname, params);
}
pub fn GetTextureParameterIuiv(texture: uint, pname: @"enum", params: uint) void {
   return FuncTable.current.?.GetTextureParameterIuiv(texture, pname, params);
}
pub fn GetTextureParameteriv(texture: uint, pname: @"enum", params: int) void {
   return FuncTable.current.?.GetTextureParameteriv(texture, pname, params);
}
pub fn CreateVertexArrays(n: sizei, arrays: uint) void {
   return FuncTable.current.?.CreateVertexArrays(n, arrays);
}
pub fn DisableVertexArrayAttrib(vaobj: uint, index: uint) void {
   return FuncTable.current.?.DisableVertexArrayAttrib(vaobj, index);
}
pub fn EnableVertexArrayAttrib(vaobj: uint, index: uint) void {
   return FuncTable.current.?.EnableVertexArrayAttrib(vaobj, index);
}
pub fn VertexArrayElementBuffer(vaobj: uint, buffer: uint) void {
   return FuncTable.current.?.VertexArrayElementBuffer(vaobj, buffer);
}
pub fn VertexArrayVertexBuffer(vaobj: uint, bindingindex: uint, buffer: uint, offset: intptr, stride: sizei) void {
   return FuncTable.current.?.VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
}
pub fn VertexArrayVertexBuffers(vaobj: uint, first: uint, count: sizei, buffers: [*]uint, offsets: [*c]const intptr, strides: [*c]const sizei) void {
   return FuncTable.current.?.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
}
pub fn VertexArrayAttribBinding(vaobj: uint, attribindex: uint, bindingindex: uint) void {
   return FuncTable.current.?.VertexArrayAttribBinding(vaobj, attribindex, bindingindex);
}
pub fn VertexArrayAttribFormat(vaobj: uint, attribindex: uint, size: int, @"type": @"enum", normalized: boolean, relativeoffset: uint) void {
   return FuncTable.current.?.VertexArrayAttribFormat(vaobj, attribindex, size, @"type", normalized, relativeoffset);
}
pub fn VertexArrayAttribIFormat(vaobj: uint, attribindex: uint, size: int, @"type": @"enum", relativeoffset: uint) void {
   return FuncTable.current.?.VertexArrayAttribIFormat(vaobj, attribindex, size, @"type", relativeoffset);
}
pub fn VertexArrayAttribLFormat(vaobj: uint, attribindex: uint, size: int, @"type": @"enum", relativeoffset: uint) void {
   return FuncTable.current.?.VertexArrayAttribLFormat(vaobj, attribindex, size, @"type", relativeoffset);
}
pub fn VertexArrayBindingDivisor(vaobj: uint, bindingindex: uint, divisor: uint) void {
   return FuncTable.current.?.VertexArrayBindingDivisor(vaobj, bindingindex, divisor);
}
pub fn GetVertexArrayiv(vaobj: uint, pname: @"enum", param: int) void {
   return FuncTable.current.?.GetVertexArrayiv(vaobj, pname, param);
}
pub fn GetVertexArrayIndexediv(vaobj: uint, index: uint, pname: @"enum", param: int) void {
   return FuncTable.current.?.GetVertexArrayIndexediv(vaobj, index, pname, param);
}
pub fn GetVertexArrayIndexed64iv(vaobj: uint, index: uint, pname: @"enum", param: int64) void {
   return FuncTable.current.?.GetVertexArrayIndexed64iv(vaobj, index, pname, param);
}
pub fn CreateSamplers(n: sizei, samplers: uint) void {
   return FuncTable.current.?.CreateSamplers(n, samplers);
}
pub fn CreateProgramPipelines(n: sizei, pipelines: uint) void {
   return FuncTable.current.?.CreateProgramPipelines(n, pipelines);
}
pub fn CreateQueries(target: @"enum", n: sizei, ids: uint) void {
   return FuncTable.current.?.CreateQueries(target, n, ids);
}
pub fn GetQueryBufferObjecti64v(id: uint, buffer: uint, pname: @"enum", offset: intptr) void {
   return FuncTable.current.?.GetQueryBufferObjecti64v(id, buffer, pname, offset);
}
pub fn GetQueryBufferObjectiv(id: uint, buffer: uint, pname: @"enum", offset: intptr) void {
   return FuncTable.current.?.GetQueryBufferObjectiv(id, buffer, pname, offset);
}
pub fn GetQueryBufferObjectui64v(id: uint, buffer: uint, pname: @"enum", offset: intptr) void {
   return FuncTable.current.?.GetQueryBufferObjectui64v(id, buffer, pname, offset);
}
pub fn GetQueryBufferObjectuiv(id: uint, buffer: uint, pname: @"enum", offset: intptr) void {
   return FuncTable.current.?.GetQueryBufferObjectuiv(id, buffer, pname, offset);
}
pub fn MemoryBarrierByRegion(barriers: bitfield) void {
   return FuncTable.current.?.MemoryBarrierByRegion(barriers);
}
pub fn GetTextureSubImage(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", @"type": @"enum", bufSize: sizei, pixels: ?*const anyopaque) void {
   return FuncTable.current.?.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, @"type", bufSize, pixels);
}
pub fn GetCompressedTextureSubImage(texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, bufSize: sizei, pixels: ?*const anyopaque) void {
   return FuncTable.current.?.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}
pub fn GetGraphicsResetStatus() @"enum" {
   return FuncTable.current.?.GetGraphicsResetStatus();
}
pub fn GetnCompressedTexImage(target: @"enum", lod: int, bufSize: sizei, pixels: ?*const anyopaque) void {
   return FuncTable.current.?.GetnCompressedTexImage(target, lod, bufSize, pixels);
}
pub fn GetnTexImage(target: @"enum", level: int, format: @"enum", @"type": @"enum", bufSize: sizei, pixels: ?*const anyopaque) void {
   return FuncTable.current.?.GetnTexImage(target, level, format, @"type", bufSize, pixels);
}
pub fn GetnUniformdv(program: uint, location: int, bufSize: sizei, params: double) void {
   return FuncTable.current.?.GetnUniformdv(program, location, bufSize, params);
}
pub fn GetnUniformfv(program: uint, location: int, bufSize: sizei, params: float) void {
   return FuncTable.current.?.GetnUniformfv(program, location, bufSize, params);
}
pub fn GetnUniformiv(program: uint, location: int, bufSize: sizei, params: int) void {
   return FuncTable.current.?.GetnUniformiv(program, location, bufSize, params);
}
pub fn GetnUniformuiv(program: uint, location: int, bufSize: sizei, params: uint) void {
   return FuncTable.current.?.GetnUniformuiv(program, location, bufSize, params);
}
pub fn ReadnPixels(x: int, y: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", bufSize: sizei, data: ?*const anyopaque) void {
   return FuncTable.current.?.ReadnPixels(x, y, width, height, format, @"type", bufSize, data);
}
pub fn TextureBarrier() void {
   return FuncTable.current.?.TextureBarrier();
}
pub fn SpecializeShader(shader: uint, pEntryPoint: [*c]const char, numSpecializationConstants: uint, pConstantIndex: [*c]const uint, pConstantValue: [*c]const uint) void {
   return FuncTable.current.?.SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}
pub fn MultiDrawArraysIndirectCount(mode: @"enum", indirect: ?*const anyopaque, drawcount: intptr, maxdrawcount: sizei, stride: sizei) void {
   return FuncTable.current.?.MultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
}
pub fn MultiDrawElementsIndirectCount(mode: @"enum", @"type": @"enum", indirect: ?*const anyopaque, drawcount: intptr, maxdrawcount: sizei, stride: sizei) void {
   return FuncTable.current.?.MultiDrawElementsIndirectCount(mode, @"type", indirect, drawcount, maxdrawcount, stride);
}
pub fn PolygonOffsetClamp(factor: float, units: float, clamp: float) void {
   return FuncTable.current.?.PolygonOffsetClamp(factor, units, clamp);
}
pub const FuncTable = struct {
   threadlocal var current: ?*const FuncTable = null;
   BindBufferRange: *const fn (target: @"enum", index: uint, buffer: uint, offset: intptr, size: sizeiptr) callconv(APIENTRY) void,
   BindBufferBase: *const fn (target: @"enum", index: uint, buffer: uint) callconv(APIENTRY) void,
   GetIntegeri_v: *const fn (target: @"enum", index: uint, data: int) callconv(APIENTRY) void,
   ProgramParameteri: *const fn (program: uint, pname: @"enum", value: int) callconv(APIENTRY) void,
   GetPointerv: *const fn (pname: @"enum", params: ?*const anyopaque) callconv(APIENTRY) void,
   CullFace: *const fn (mode: @"enum") callconv(APIENTRY) void,
   FrontFace: *const fn (mode: @"enum") callconv(APIENTRY) void,
   Hint: *const fn (target: @"enum", mode: @"enum") callconv(APIENTRY) void,
   LineWidth: *const fn (width: float) callconv(APIENTRY) void,
   PointSize: *const fn (size: float) callconv(APIENTRY) void,
   PolygonMode: *const fn (face: @"enum", mode: @"enum") callconv(APIENTRY) void,
   Scissor: *const fn (x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   TexParameterf: *const fn (target: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void,
   TexParameterfv: *const fn (target: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void,
   TexParameteri: *const fn (target: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void,
   TexParameteriv: *const fn (target: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   TexImage1D: *const fn (target: @"enum", level: int, internalformat: int, width: sizei, border: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   TexImage2D: *const fn (target: @"enum", level: int, internalformat: int, width: sizei, height: sizei, border: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   DrawBuffer: *const fn (buf: @"enum") callconv(APIENTRY) void,
   Clear: *const fn (mask: bitfield) callconv(APIENTRY) void,
   ClearColor: *const fn (red: float, green: float, blue: float, alpha: float) callconv(APIENTRY) void,
   ClearStencil: *const fn (s: int) callconv(APIENTRY) void,
   ClearDepth: *const fn (depth: double) callconv(APIENTRY) void,
   StencilMask: *const fn (mask: uint) callconv(APIENTRY) void,
   ColorMask: *const fn (red: boolean, green: boolean, blue: boolean, alpha: boolean) callconv(APIENTRY) void,
   DepthMask: *const fn (flag: boolean) callconv(APIENTRY) void,
   Disable: *const fn (cap: @"enum") callconv(APIENTRY) void,
   Enable: *const fn (cap: @"enum") callconv(APIENTRY) void,
   Finish: *const fn () callconv(APIENTRY) void,
   Flush: *const fn () callconv(APIENTRY) void,
   BlendFunc: *const fn (sfactor: @"enum", dfactor: @"enum") callconv(APIENTRY) void,
   LogicOp: *const fn (opcode: @"enum") callconv(APIENTRY) void,
   StencilFunc: *const fn (func: @"enum", ref: int, mask: uint) callconv(APIENTRY) void,
   StencilOp: *const fn (fail: @"enum", zfail: @"enum", zpass: @"enum") callconv(APIENTRY) void,
   DepthFunc: *const fn (func: @"enum") callconv(APIENTRY) void,
   PixelStoref: *const fn (pname: @"enum", param: float) callconv(APIENTRY) void,
   PixelStorei: *const fn (pname: @"enum", param: int) callconv(APIENTRY) void,
   ReadBuffer: *const fn (src: @"enum") callconv(APIENTRY) void,
   ReadPixels: *const fn (x: int, y: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetBooleanv: *const fn (pname: @"enum", data: boolean) callconv(APIENTRY) void,
   GetDoublev: *const fn (pname: @"enum", data: double) callconv(APIENTRY) void,
   GetError: *const fn () callconv(APIENTRY) @"enum",
   GetFloatv: *const fn (pname: @"enum", data: float) callconv(APIENTRY) void,
   GetIntegerv: *const fn (pname: @"enum", data: int) callconv(APIENTRY) void,
   GetString: *const fn (name: @"enum") callconv(APIENTRY) ubyte,
   GetTexImage: *const fn (target: @"enum", level: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetTexParameterfv: *const fn (target: @"enum", pname: @"enum", params: float) callconv(APIENTRY) void,
   GetTexParameteriv: *const fn (target: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetTexLevelParameterfv: *const fn (target: @"enum", level: int, pname: @"enum", params: float) callconv(APIENTRY) void,
   GetTexLevelParameteriv: *const fn (target: @"enum", level: int, pname: @"enum", params: int) callconv(APIENTRY) void,
   IsEnabled: *const fn (cap: @"enum") callconv(APIENTRY) boolean,
   DepthRange: *const fn (n: double, f: double) callconv(APIENTRY) void,
   Viewport: *const fn (x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   NewList: *const fn (list: uint, mode: @"enum") callconv(APIENTRY) void,
   EndList: *const fn () callconv(APIENTRY) void,
   CallList: *const fn (list: uint) callconv(APIENTRY) void,
   CallLists: *const fn (n: sizei, @"type": @"enum", lists: ?*const anyopaque) callconv(APIENTRY) void,
   DeleteLists: *const fn (list: uint, range: sizei) callconv(APIENTRY) void,
   GenLists: *const fn (range: sizei) callconv(APIENTRY) uint,
   ListBase: *const fn (base: uint) callconv(APIENTRY) void,
   Begin: *const fn (mode: @"enum") callconv(APIENTRY) void,
   Bitmap: *const fn (width: sizei, height: sizei, xorig: float, yorig: float, xmove: float, ymove: float, bitmap: [*c]const ubyte) callconv(APIENTRY) void,
   Color3b: *const fn (red: byte, green: byte, blue: byte) callconv(APIENTRY) void,
   Color3bv: *const fn (v: [*c]const byte) callconv(APIENTRY) void,
   Color3d: *const fn (red: double, green: double, blue: double) callconv(APIENTRY) void,
   Color3dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   Color3f: *const fn (red: float, green: float, blue: float) callconv(APIENTRY) void,
   Color3fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   Color3i: *const fn (red: int, green: int, blue: int) callconv(APIENTRY) void,
   Color3iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   Color3s: *const fn (red: short, green: short, blue: short) callconv(APIENTRY) void,
   Color3sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   Color3ub: *const fn (red: ubyte, green: ubyte, blue: ubyte) callconv(APIENTRY) void,
   Color3ubv: *const fn (v: [*c]const ubyte) callconv(APIENTRY) void,
   Color3ui: *const fn (red: uint, green: uint, blue: uint) callconv(APIENTRY) void,
   Color3uiv: *const fn (v: [*c]const uint) callconv(APIENTRY) void,
   Color3us: *const fn (red: ushort, green: ushort, blue: ushort) callconv(APIENTRY) void,
   Color3usv: *const fn (v: [*c]const ushort) callconv(APIENTRY) void,
   Color4b: *const fn (red: byte, green: byte, blue: byte, alpha: byte) callconv(APIENTRY) void,
   Color4bv: *const fn (v: [*c]const byte) callconv(APIENTRY) void,
   Color4d: *const fn (red: double, green: double, blue: double, alpha: double) callconv(APIENTRY) void,
   Color4dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   Color4f: *const fn (red: float, green: float, blue: float, alpha: float) callconv(APIENTRY) void,
   Color4fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   Color4i: *const fn (red: int, green: int, blue: int, alpha: int) callconv(APIENTRY) void,
   Color4iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   Color4s: *const fn (red: short, green: short, blue: short, alpha: short) callconv(APIENTRY) void,
   Color4sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   Color4ub: *const fn (red: ubyte, green: ubyte, blue: ubyte, alpha: ubyte) callconv(APIENTRY) void,
   Color4ubv: *const fn (v: [*c]const ubyte) callconv(APIENTRY) void,
   Color4ui: *const fn (red: uint, green: uint, blue: uint, alpha: uint) callconv(APIENTRY) void,
   Color4uiv: *const fn (v: [*c]const uint) callconv(APIENTRY) void,
   Color4us: *const fn (red: ushort, green: ushort, blue: ushort, alpha: ushort) callconv(APIENTRY) void,
   Color4usv: *const fn (v: [*c]const ushort) callconv(APIENTRY) void,
   EdgeFlag: *const fn (flag: boolean) callconv(APIENTRY) void,
   EdgeFlagv: *const fn (flag: [*c]const boolean) callconv(APIENTRY) void,
   End: *const fn () callconv(APIENTRY) void,
   Indexd: *const fn (c: double) callconv(APIENTRY) void,
   Indexdv: *const fn (c: [*c]const double) callconv(APIENTRY) void,
   Indexf: *const fn (c: float) callconv(APIENTRY) void,
   Indexfv: *const fn (c: [*c]const float) callconv(APIENTRY) void,
   Indexi: *const fn (c: int) callconv(APIENTRY) void,
   Indexiv: *const fn (c: [*c]const int) callconv(APIENTRY) void,
   Indexs: *const fn (c: short) callconv(APIENTRY) void,
   Indexsv: *const fn (c: [*c]const short) callconv(APIENTRY) void,
   Normal3b: *const fn (nx: byte, ny: byte, nz: byte) callconv(APIENTRY) void,
   Normal3bv: *const fn (v: [*c]const byte) callconv(APIENTRY) void,
   Normal3d: *const fn (nx: double, ny: double, nz: double) callconv(APIENTRY) void,
   Normal3dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   Normal3f: *const fn (nx: float, ny: float, nz: float) callconv(APIENTRY) void,
   Normal3fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   Normal3i: *const fn (nx: int, ny: int, nz: int) callconv(APIENTRY) void,
   Normal3iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   Normal3s: *const fn (nx: short, ny: short, nz: short) callconv(APIENTRY) void,
   Normal3sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   RasterPos2d: *const fn (x: double, y: double) callconv(APIENTRY) void,
   RasterPos2dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   RasterPos2f: *const fn (x: float, y: float) callconv(APIENTRY) void,
   RasterPos2fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   RasterPos2i: *const fn (x: int, y: int) callconv(APIENTRY) void,
   RasterPos2iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   RasterPos2s: *const fn (x: short, y: short) callconv(APIENTRY) void,
   RasterPos2sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   RasterPos3d: *const fn (x: double, y: double, z: double) callconv(APIENTRY) void,
   RasterPos3dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   RasterPos3f: *const fn (x: float, y: float, z: float) callconv(APIENTRY) void,
   RasterPos3fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   RasterPos3i: *const fn (x: int, y: int, z: int) callconv(APIENTRY) void,
   RasterPos3iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   RasterPos3s: *const fn (x: short, y: short, z: short) callconv(APIENTRY) void,
   RasterPos3sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   RasterPos4d: *const fn (x: double, y: double, z: double, w: double) callconv(APIENTRY) void,
   RasterPos4dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   RasterPos4f: *const fn (x: float, y: float, z: float, w: float) callconv(APIENTRY) void,
   RasterPos4fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   RasterPos4i: *const fn (x: int, y: int, z: int, w: int) callconv(APIENTRY) void,
   RasterPos4iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   RasterPos4s: *const fn (x: short, y: short, z: short, w: short) callconv(APIENTRY) void,
   RasterPos4sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   Rectd: *const fn (x1: double, y1: double, x2: double, y2: double) callconv(APIENTRY) void,
   Rectdv: *const fn (v1: [*c]const double, v2: [*c]const double) callconv(APIENTRY) void,
   Rectf: *const fn (x1: float, y1: float, x2: float, y2: float) callconv(APIENTRY) void,
   Rectfv: *const fn (v1: [*c]const float, v2: [*c]const float) callconv(APIENTRY) void,
   Recti: *const fn (x1: int, y1: int, x2: int, y2: int) callconv(APIENTRY) void,
   Rectiv: *const fn (v1: [*c]const int, v2: [*c]const int) callconv(APIENTRY) void,
   Rects: *const fn (x1: short, y1: short, x2: short, y2: short) callconv(APIENTRY) void,
   Rectsv: *const fn (v1: [*c]const short, v2: [*c]const short) callconv(APIENTRY) void,
   TexCoord1d: *const fn (s: double) callconv(APIENTRY) void,
   TexCoord1dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   TexCoord1f: *const fn (s: float) callconv(APIENTRY) void,
   TexCoord1fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   TexCoord1i: *const fn (s: int) callconv(APIENTRY) void,
   TexCoord1iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   TexCoord1s: *const fn (s: short) callconv(APIENTRY) void,
   TexCoord1sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   TexCoord2d: *const fn (s: double, t: double) callconv(APIENTRY) void,
   TexCoord2dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   TexCoord2f: *const fn (s: float, t: float) callconv(APIENTRY) void,
   TexCoord2fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   TexCoord2i: *const fn (s: int, t: int) callconv(APIENTRY) void,
   TexCoord2iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   TexCoord2s: *const fn (s: short, t: short) callconv(APIENTRY) void,
   TexCoord2sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   TexCoord3d: *const fn (s: double, t: double, r: double) callconv(APIENTRY) void,
   TexCoord3dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   TexCoord3f: *const fn (s: float, t: float, r: float) callconv(APIENTRY) void,
   TexCoord3fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   TexCoord3i: *const fn (s: int, t: int, r: int) callconv(APIENTRY) void,
   TexCoord3iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   TexCoord3s: *const fn (s: short, t: short, r: short) callconv(APIENTRY) void,
   TexCoord3sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   TexCoord4d: *const fn (s: double, t: double, r: double, q: double) callconv(APIENTRY) void,
   TexCoord4dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   TexCoord4f: *const fn (s: float, t: float, r: float, q: float) callconv(APIENTRY) void,
   TexCoord4fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   TexCoord4i: *const fn (s: int, t: int, r: int, q: int) callconv(APIENTRY) void,
   TexCoord4iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   TexCoord4s: *const fn (s: short, t: short, r: short, q: short) callconv(APIENTRY) void,
   TexCoord4sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   Vertex2d: *const fn (x: double, y: double) callconv(APIENTRY) void,
   Vertex2dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   Vertex2f: *const fn (x: float, y: float) callconv(APIENTRY) void,
   Vertex2fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   Vertex2i: *const fn (x: int, y: int) callconv(APIENTRY) void,
   Vertex2iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   Vertex2s: *const fn (x: short, y: short) callconv(APIENTRY) void,
   Vertex2sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   Vertex3d: *const fn (x: double, y: double, z: double) callconv(APIENTRY) void,
   Vertex3dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   Vertex3f: *const fn (x: float, y: float, z: float) callconv(APIENTRY) void,
   Vertex3fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   Vertex3i: *const fn (x: int, y: int, z: int) callconv(APIENTRY) void,
   Vertex3iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   Vertex3s: *const fn (x: short, y: short, z: short) callconv(APIENTRY) void,
   Vertex3sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   Vertex4d: *const fn (x: double, y: double, z: double, w: double) callconv(APIENTRY) void,
   Vertex4dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   Vertex4f: *const fn (x: float, y: float, z: float, w: float) callconv(APIENTRY) void,
   Vertex4fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   Vertex4i: *const fn (x: int, y: int, z: int, w: int) callconv(APIENTRY) void,
   Vertex4iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   Vertex4s: *const fn (x: short, y: short, z: short, w: short) callconv(APIENTRY) void,
   Vertex4sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   ClipPlane: *const fn (plane: @"enum", equation: [*c]const double) callconv(APIENTRY) void,
   ColorMaterial: *const fn (face: @"enum", mode: @"enum") callconv(APIENTRY) void,
   Fogf: *const fn (pname: @"enum", param: float) callconv(APIENTRY) void,
   Fogfv: *const fn (pname: @"enum", params: [*c]const float) callconv(APIENTRY) void,
   Fogi: *const fn (pname: @"enum", param: int) callconv(APIENTRY) void,
   Fogiv: *const fn (pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   Lightf: *const fn (light: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void,
   Lightfv: *const fn (light: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void,
   Lighti: *const fn (light: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void,
   Lightiv: *const fn (light: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   LightModelf: *const fn (pname: @"enum", param: float) callconv(APIENTRY) void,
   LightModelfv: *const fn (pname: @"enum", params: [*c]const float) callconv(APIENTRY) void,
   LightModeli: *const fn (pname: @"enum", param: int) callconv(APIENTRY) void,
   LightModeliv: *const fn (pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   LineStipple: *const fn (factor: int, pattern: ushort) callconv(APIENTRY) void,
   Materialf: *const fn (face: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void,
   Materialfv: *const fn (face: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void,
   Materiali: *const fn (face: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void,
   Materialiv: *const fn (face: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   PolygonStipple: *const fn (mask: [*c]const ubyte) callconv(APIENTRY) void,
   ShadeModel: *const fn (mode: @"enum") callconv(APIENTRY) void,
   TexEnvf: *const fn (target: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void,
   TexEnvfv: *const fn (target: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void,
   TexEnvi: *const fn (target: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void,
   TexEnviv: *const fn (target: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   TexGend: *const fn (coord: @"enum", pname: @"enum", param: double) callconv(APIENTRY) void,
   TexGendv: *const fn (coord: @"enum", pname: @"enum", params: [*c]const double) callconv(APIENTRY) void,
   TexGenf: *const fn (coord: @"enum", pname: @"enum", param: float) callconv(APIENTRY) void,
   TexGenfv: *const fn (coord: @"enum", pname: @"enum", params: [*c]const float) callconv(APIENTRY) void,
   TexGeni: *const fn (coord: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void,
   TexGeniv: *const fn (coord: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   FeedbackBuffer: *const fn (size: sizei, @"type": @"enum", buffer: float) callconv(APIENTRY) void,
   SelectBuffer: *const fn (size: sizei, buffer: uint) callconv(APIENTRY) void,
   RenderMode: *const fn (mode: @"enum") callconv(APIENTRY) int,
   InitNames: *const fn () callconv(APIENTRY) void,
   LoadName: *const fn (name: uint) callconv(APIENTRY) void,
   PassThrough: *const fn (token: float) callconv(APIENTRY) void,
   PopName: *const fn () callconv(APIENTRY) void,
   PushName: *const fn (name: uint) callconv(APIENTRY) void,
   ClearAccum: *const fn (red: float, green: float, blue: float, alpha: float) callconv(APIENTRY) void,
   ClearIndex: *const fn (c: float) callconv(APIENTRY) void,
   IndexMask: *const fn (mask: uint) callconv(APIENTRY) void,
   Accum: *const fn (op: @"enum", value: float) callconv(APIENTRY) void,
   PopAttrib: *const fn () callconv(APIENTRY) void,
   PushAttrib: *const fn (mask: bitfield) callconv(APIENTRY) void,
   Map1d: *const fn (target: @"enum", u1: double, u2: double, stride: int, order: int, points: [*c]const double) callconv(APIENTRY) void,
   Map1f: *const fn (target: @"enum", u1: float, u2: float, stride: int, order: int, points: [*c]const float) callconv(APIENTRY) void,
   Map2d: *const fn (target: @"enum", u1: double, u2: double, ustride: int, uorder: int, v1: double, v2: double, vstride: int, vorder: int, points: [*c]const double) callconv(APIENTRY) void,
   Map2f: *const fn (target: @"enum", u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: [*c]const float) callconv(APIENTRY) void,
   MapGrid1d: *const fn (un: int, u1: double, u2: double) callconv(APIENTRY) void,
   MapGrid1f: *const fn (un: int, u1: float, u2: float) callconv(APIENTRY) void,
   MapGrid2d: *const fn (un: int, u1: double, u2: double, vn: int, v1: double, v2: double) callconv(APIENTRY) void,
   MapGrid2f: *const fn (un: int, u1: float, u2: float, vn: int, v1: float, v2: float) callconv(APIENTRY) void,
   EvalCoord1d: *const fn (u: double) callconv(APIENTRY) void,
   EvalCoord1dv: *const fn (u: [*c]const double) callconv(APIENTRY) void,
   EvalCoord1f: *const fn (u: float) callconv(APIENTRY) void,
   EvalCoord1fv: *const fn (u: [*c]const float) callconv(APIENTRY) void,
   EvalCoord2d: *const fn (u: double, v: double) callconv(APIENTRY) void,
   EvalCoord2dv: *const fn (u: [*c]const double) callconv(APIENTRY) void,
   EvalCoord2f: *const fn (u: float, v: float) callconv(APIENTRY) void,
   EvalCoord2fv: *const fn (u: [*c]const float) callconv(APIENTRY) void,
   EvalMesh1: *const fn (mode: @"enum", i1: int, i2: int) callconv(APIENTRY) void,
   EvalPoint1: *const fn (i: int) callconv(APIENTRY) void,
   EvalMesh2: *const fn (mode: @"enum", i1: int, i2: int, j1: int, j2: int) callconv(APIENTRY) void,
   EvalPoint2: *const fn (i: int, j: int) callconv(APIENTRY) void,
   AlphaFunc: *const fn (func: @"enum", ref: float) callconv(APIENTRY) void,
   PixelZoom: *const fn (xfactor: float, yfactor: float) callconv(APIENTRY) void,
   PixelTransferf: *const fn (pname: @"enum", param: float) callconv(APIENTRY) void,
   PixelTransferi: *const fn (pname: @"enum", param: int) callconv(APIENTRY) void,
   PixelMapfv: *const fn (map: @"enum", mapsize: sizei, values: [*c]const float) callconv(APIENTRY) void,
   PixelMapuiv: *const fn (map: @"enum", mapsize: sizei, values: [*c]const uint) callconv(APIENTRY) void,
   PixelMapusv: *const fn (map: @"enum", mapsize: sizei, values: [*c]const ushort) callconv(APIENTRY) void,
   CopyPixels: *const fn (x: int, y: int, width: sizei, height: sizei, @"type": @"enum") callconv(APIENTRY) void,
   DrawPixels: *const fn (width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetClipPlane: *const fn (plane: @"enum", equation: double) callconv(APIENTRY) void,
   GetLightfv: *const fn (light: @"enum", pname: @"enum", params: float) callconv(APIENTRY) void,
   GetLightiv: *const fn (light: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetMapdv: *const fn (target: @"enum", query: @"enum", v: double) callconv(APIENTRY) void,
   GetMapfv: *const fn (target: @"enum", query: @"enum", v: float) callconv(APIENTRY) void,
   GetMapiv: *const fn (target: @"enum", query: @"enum", v: int) callconv(APIENTRY) void,
   GetMaterialfv: *const fn (face: @"enum", pname: @"enum", params: float) callconv(APIENTRY) void,
   GetMaterialiv: *const fn (face: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetPixelMapfv: *const fn (map: @"enum", values: float) callconv(APIENTRY) void,
   GetPixelMapuiv: *const fn (map: @"enum", values: uint) callconv(APIENTRY) void,
   GetPixelMapusv: *const fn (map: @"enum", values: ushort) callconv(APIENTRY) void,
   GetPolygonStipple: *const fn (mask: ubyte) callconv(APIENTRY) void,
   GetTexEnvfv: *const fn (target: @"enum", pname: @"enum", params: float) callconv(APIENTRY) void,
   GetTexEnviv: *const fn (target: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetTexGendv: *const fn (coord: @"enum", pname: @"enum", params: double) callconv(APIENTRY) void,
   GetTexGenfv: *const fn (coord: @"enum", pname: @"enum", params: float) callconv(APIENTRY) void,
   GetTexGeniv: *const fn (coord: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   IsList: *const fn (list: uint) callconv(APIENTRY) boolean,
   Frustum: *const fn (left: double, right: double, bottom: double, top: double, zNear: double, zFar: double) callconv(APIENTRY) void,
   LoadIdentity: *const fn () callconv(APIENTRY) void,
   LoadMatrixf: *const fn (m: [*c]const float) callconv(APIENTRY) void,
   LoadMatrixd: *const fn (m: [*c]const double) callconv(APIENTRY) void,
   MatrixMode: *const fn (mode: @"enum") callconv(APIENTRY) void,
   MultMatrixf: *const fn (m: [*c]const float) callconv(APIENTRY) void,
   MultMatrixd: *const fn (m: [*c]const double) callconv(APIENTRY) void,
   Ortho: *const fn (left: double, right: double, bottom: double, top: double, zNear: double, zFar: double) callconv(APIENTRY) void,
   PopMatrix: *const fn () callconv(APIENTRY) void,
   PushMatrix: *const fn () callconv(APIENTRY) void,
   Rotated: *const fn (angle: double, x: double, y: double, z: double) callconv(APIENTRY) void,
   Rotatef: *const fn (angle: float, x: float, y: float, z: float) callconv(APIENTRY) void,
   Scaled: *const fn (x: double, y: double, z: double) callconv(APIENTRY) void,
   Scalef: *const fn (x: float, y: float, z: float) callconv(APIENTRY) void,
   Translated: *const fn (x: double, y: double, z: double) callconv(APIENTRY) void,
   Translatef: *const fn (x: float, y: float, z: float) callconv(APIENTRY) void,
   DrawArrays: *const fn (mode: @"enum", first: int, count: sizei) callconv(APIENTRY) void,
   DrawElements: *const fn (mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque) callconv(APIENTRY) void,
   PolygonOffset: *const fn (factor: float, units: float) callconv(APIENTRY) void,
   CopyTexImage1D: *const fn (target: @"enum", level: int, internalformat: @"enum", x: int, y: int, width: sizei, border: int) callconv(APIENTRY) void,
   CopyTexImage2D: *const fn (target: @"enum", level: int, internalformat: @"enum", x: int, y: int, width: sizei, height: sizei, border: int) callconv(APIENTRY) void,
   CopyTexSubImage1D: *const fn (target: @"enum", level: int, xoffset: int, x: int, y: int, width: sizei) callconv(APIENTRY) void,
   CopyTexSubImage2D: *const fn (target: @"enum", level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   TexSubImage1D: *const fn (target: @"enum", level: int, xoffset: int, width: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   TexSubImage2D: *const fn (target: @"enum", level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   BindTexture: *const fn (target: @"enum", texture: uint) callconv(APIENTRY) void,
   DeleteTextures: *const fn (n: sizei, textures: [*c]const uint) callconv(APIENTRY) void,
   GenTextures: *const fn (n: sizei, textures: uint) callconv(APIENTRY) void,
   IsTexture: *const fn (texture: uint) callconv(APIENTRY) boolean,
   ArrayElement: *const fn (i: int) callconv(APIENTRY) void,
   ColorPointer: *const fn (size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   DisableClientState: *const fn (array: @"enum") callconv(APIENTRY) void,
   EdgeFlagPointer: *const fn (stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   EnableClientState: *const fn (array: @"enum") callconv(APIENTRY) void,
   IndexPointer: *const fn (@"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   InterleavedArrays: *const fn (format: @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   NormalPointer: *const fn (@"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   TexCoordPointer: *const fn (size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   VertexPointer: *const fn (size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   AreTexturesResident: *const fn (n: sizei, textures: [*c]const uint, residences: boolean) callconv(APIENTRY) boolean,
   PrioritizeTextures: *const fn (n: sizei, textures: [*c]const uint, priorities: [*c]const float) callconv(APIENTRY) void,
   Indexub: *const fn (c: ubyte) callconv(APIENTRY) void,
   Indexubv: *const fn (c: [*c]const ubyte) callconv(APIENTRY) void,
   PopClientAttrib: *const fn () callconv(APIENTRY) void,
   PushClientAttrib: *const fn (mask: bitfield) callconv(APIENTRY) void,
   DrawRangeElements: *const fn (mode: @"enum", start: uint, end: uint, count: sizei, @"type": @"enum", indices: ?*const anyopaque) callconv(APIENTRY) void,
   TexImage3D: *const fn (target: @"enum", level: int, internalformat: int, width: sizei, height: sizei, depth: sizei, border: int, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   TexSubImage3D: *const fn (target: @"enum", level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   CopyTexSubImage3D: *const fn (target: @"enum", level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   ActiveTexture: *const fn (texture: @"enum") callconv(APIENTRY) void,
   SampleCoverage: *const fn (value: float, invert: boolean) callconv(APIENTRY) void,
   CompressedTexImage3D: *const fn (target: @"enum", level: int, internalformat: @"enum", width: sizei, height: sizei, depth: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   CompressedTexImage2D: *const fn (target: @"enum", level: int, internalformat: @"enum", width: sizei, height: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   CompressedTexImage1D: *const fn (target: @"enum", level: int, internalformat: @"enum", width: sizei, border: int, imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   CompressedTexSubImage3D: *const fn (target: @"enum", level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   CompressedTexSubImage2D: *const fn (target: @"enum", level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   CompressedTexSubImage1D: *const fn (target: @"enum", level: int, xoffset: int, width: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   GetCompressedTexImage: *const fn (target: @"enum", level: int, img: ?*const anyopaque) callconv(APIENTRY) void,
   ClientActiveTexture: *const fn (texture: @"enum") callconv(APIENTRY) void,
   MultiTexCoord1d: *const fn (target: @"enum", s: double) callconv(APIENTRY) void,
   MultiTexCoord1dv: *const fn (target: @"enum", v: [*c]const double) callconv(APIENTRY) void,
   MultiTexCoord1f: *const fn (target: @"enum", s: float) callconv(APIENTRY) void,
   MultiTexCoord1fv: *const fn (target: @"enum", v: [*c]const float) callconv(APIENTRY) void,
   MultiTexCoord1i: *const fn (target: @"enum", s: int) callconv(APIENTRY) void,
   MultiTexCoord1iv: *const fn (target: @"enum", v: [*c]const int) callconv(APIENTRY) void,
   MultiTexCoord1s: *const fn (target: @"enum", s: short) callconv(APIENTRY) void,
   MultiTexCoord1sv: *const fn (target: @"enum", v: [*c]const short) callconv(APIENTRY) void,
   MultiTexCoord2d: *const fn (target: @"enum", s: double, t: double) callconv(APIENTRY) void,
   MultiTexCoord2dv: *const fn (target: @"enum", v: [*c]const double) callconv(APIENTRY) void,
   MultiTexCoord2f: *const fn (target: @"enum", s: float, t: float) callconv(APIENTRY) void,
   MultiTexCoord2fv: *const fn (target: @"enum", v: [*c]const float) callconv(APIENTRY) void,
   MultiTexCoord2i: *const fn (target: @"enum", s: int, t: int) callconv(APIENTRY) void,
   MultiTexCoord2iv: *const fn (target: @"enum", v: [*c]const int) callconv(APIENTRY) void,
   MultiTexCoord2s: *const fn (target: @"enum", s: short, t: short) callconv(APIENTRY) void,
   MultiTexCoord2sv: *const fn (target: @"enum", v: [*c]const short) callconv(APIENTRY) void,
   MultiTexCoord3d: *const fn (target: @"enum", s: double, t: double, r: double) callconv(APIENTRY) void,
   MultiTexCoord3dv: *const fn (target: @"enum", v: [*c]const double) callconv(APIENTRY) void,
   MultiTexCoord3f: *const fn (target: @"enum", s: float, t: float, r: float) callconv(APIENTRY) void,
   MultiTexCoord3fv: *const fn (target: @"enum", v: [*c]const float) callconv(APIENTRY) void,
   MultiTexCoord3i: *const fn (target: @"enum", s: int, t: int, r: int) callconv(APIENTRY) void,
   MultiTexCoord3iv: *const fn (target: @"enum", v: [*c]const int) callconv(APIENTRY) void,
   MultiTexCoord3s: *const fn (target: @"enum", s: short, t: short, r: short) callconv(APIENTRY) void,
   MultiTexCoord3sv: *const fn (target: @"enum", v: [*c]const short) callconv(APIENTRY) void,
   MultiTexCoord4d: *const fn (target: @"enum", s: double, t: double, r: double, q: double) callconv(APIENTRY) void,
   MultiTexCoord4dv: *const fn (target: @"enum", v: [*c]const double) callconv(APIENTRY) void,
   MultiTexCoord4f: *const fn (target: @"enum", s: float, t: float, r: float, q: float) callconv(APIENTRY) void,
   MultiTexCoord4fv: *const fn (target: @"enum", v: [*c]const float) callconv(APIENTRY) void,
   MultiTexCoord4i: *const fn (target: @"enum", s: int, t: int, r: int, q: int) callconv(APIENTRY) void,
   MultiTexCoord4iv: *const fn (target: @"enum", v: [*c]const int) callconv(APIENTRY) void,
   MultiTexCoord4s: *const fn (target: @"enum", s: short, t: short, r: short, q: short) callconv(APIENTRY) void,
   MultiTexCoord4sv: *const fn (target: @"enum", v: [*c]const short) callconv(APIENTRY) void,
   LoadTransposeMatrixf: *const fn (m: [*c]const float) callconv(APIENTRY) void,
   LoadTransposeMatrixd: *const fn (m: [*c]const double) callconv(APIENTRY) void,
   MultTransposeMatrixf: *const fn (m: [*c]const float) callconv(APIENTRY) void,
   MultTransposeMatrixd: *const fn (m: [*c]const double) callconv(APIENTRY) void,
   BlendFuncSeparate: *const fn (sfactorRGB: @"enum", dfactorRGB: @"enum", sfactorAlpha: @"enum", dfactorAlpha: @"enum") callconv(APIENTRY) void,
   MultiDrawArrays: *const fn (mode: @"enum", first: [*c]const int, count: [*c]const sizei, drawcount: sizei) callconv(APIENTRY) void,
   MultiDrawElements: *const fn (mode: @"enum", count: [*c]const sizei, @"type": @"enum", indices: ?*const anyopaque, drawcount: sizei) callconv(APIENTRY) void,
   PointParameterf: *const fn (pname: @"enum", param: float) callconv(APIENTRY) void,
   PointParameterfv: *const fn (pname: @"enum", params: [*c]const float) callconv(APIENTRY) void,
   PointParameteri: *const fn (pname: @"enum", param: int) callconv(APIENTRY) void,
   PointParameteriv: *const fn (pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   FogCoordf: *const fn (coord: float) callconv(APIENTRY) void,
   FogCoordfv: *const fn (coord: [*c]const float) callconv(APIENTRY) void,
   FogCoordd: *const fn (coord: double) callconv(APIENTRY) void,
   FogCoorddv: *const fn (coord: [*c]const double) callconv(APIENTRY) void,
   FogCoordPointer: *const fn (@"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   SecondaryColor3b: *const fn (red: byte, green: byte, blue: byte) callconv(APIENTRY) void,
   SecondaryColor3bv: *const fn (v: [*c]const byte) callconv(APIENTRY) void,
   SecondaryColor3d: *const fn (red: double, green: double, blue: double) callconv(APIENTRY) void,
   SecondaryColor3dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   SecondaryColor3f: *const fn (red: float, green: float, blue: float) callconv(APIENTRY) void,
   SecondaryColor3fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   SecondaryColor3i: *const fn (red: int, green: int, blue: int) callconv(APIENTRY) void,
   SecondaryColor3iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   SecondaryColor3s: *const fn (red: short, green: short, blue: short) callconv(APIENTRY) void,
   SecondaryColor3sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   SecondaryColor3ub: *const fn (red: ubyte, green: ubyte, blue: ubyte) callconv(APIENTRY) void,
   SecondaryColor3ubv: *const fn (v: [*c]const ubyte) callconv(APIENTRY) void,
   SecondaryColor3ui: *const fn (red: uint, green: uint, blue: uint) callconv(APIENTRY) void,
   SecondaryColor3uiv: *const fn (v: [*c]const uint) callconv(APIENTRY) void,
   SecondaryColor3us: *const fn (red: ushort, green: ushort, blue: ushort) callconv(APIENTRY) void,
   SecondaryColor3usv: *const fn (v: [*c]const ushort) callconv(APIENTRY) void,
   SecondaryColorPointer: *const fn (size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   WindowPos2d: *const fn (x: double, y: double) callconv(APIENTRY) void,
   WindowPos2dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   WindowPos2f: *const fn (x: float, y: float) callconv(APIENTRY) void,
   WindowPos2fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   WindowPos2i: *const fn (x: int, y: int) callconv(APIENTRY) void,
   WindowPos2iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   WindowPos2s: *const fn (x: short, y: short) callconv(APIENTRY) void,
   WindowPos2sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   WindowPos3d: *const fn (x: double, y: double, z: double) callconv(APIENTRY) void,
   WindowPos3dv: *const fn (v: [*c]const double) callconv(APIENTRY) void,
   WindowPos3f: *const fn (x: float, y: float, z: float) callconv(APIENTRY) void,
   WindowPos3fv: *const fn (v: [*c]const float) callconv(APIENTRY) void,
   WindowPos3i: *const fn (x: int, y: int, z: int) callconv(APIENTRY) void,
   WindowPos3iv: *const fn (v: [*c]const int) callconv(APIENTRY) void,
   WindowPos3s: *const fn (x: short, y: short, z: short) callconv(APIENTRY) void,
   WindowPos3sv: *const fn (v: [*c]const short) callconv(APIENTRY) void,
   BlendColor: *const fn (red: float, green: float, blue: float, alpha: float) callconv(APIENTRY) void,
   BlendEquation: *const fn (mode: @"enum") callconv(APIENTRY) void,
   GenQueries: *const fn (n: sizei, ids: uint) callconv(APIENTRY) void,
   DeleteQueries: *const fn (n: sizei, ids: [*c]const uint) callconv(APIENTRY) void,
   IsQuery: *const fn (id: uint) callconv(APIENTRY) boolean,
   BeginQuery: *const fn (target: @"enum", id: uint) callconv(APIENTRY) void,
   EndQuery: *const fn (target: @"enum") callconv(APIENTRY) void,
   GetQueryiv: *const fn (target: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetQueryObjectiv: *const fn (id: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetQueryObjectuiv: *const fn (id: uint, pname: @"enum", params: uint) callconv(APIENTRY) void,
   BindBuffer: *const fn (target: @"enum", buffer: uint) callconv(APIENTRY) void,
   DeleteBuffers: *const fn (n: sizei, buffers: [*]uint) callconv(APIENTRY) void,
   GenBuffers: *const fn (n: sizei, buffers: uint) callconv(APIENTRY) void,
   IsBuffer: *const fn (buffer: uint) callconv(APIENTRY) boolean,
   BufferData: *const fn (target: @"enum", size: sizeiptr, data: ?*const anyopaque, usage: @"enum") callconv(APIENTRY) void,
   BufferSubData: *const fn (target: @"enum", offset: intptr, size: sizeiptr, data: ?*const anyopaque) callconv(APIENTRY) void,
   GetBufferSubData: *const fn (target: @"enum", offset: intptr, size: sizeiptr, data: ?*const anyopaque) callconv(APIENTRY) void,
   MapBuffer: *const fn (target: @"enum", access: @"enum") callconv(APIENTRY) void,
   UnmapBuffer: *const fn (target: @"enum") callconv(APIENTRY) boolean,
   GetBufferParameteriv: *const fn (target: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetBufferPointerv: *const fn (target: @"enum", pname: @"enum", params: ?*const anyopaque) callconv(APIENTRY) void,
   BlendEquationSeparate: *const fn (modeRGB: @"enum", modeAlpha: @"enum") callconv(APIENTRY) void,
   DrawBuffers: *const fn (n: sizei, bufs: [*c]const @"enum") callconv(APIENTRY) void,
   StencilOpSeparate: *const fn (face: @"enum", sfail: @"enum", dpfail: @"enum", dppass: @"enum") callconv(APIENTRY) void,
   StencilFuncSeparate: *const fn (face: @"enum", func: @"enum", ref: int, mask: uint) callconv(APIENTRY) void,
   StencilMaskSeparate: *const fn (face: @"enum", mask: uint) callconv(APIENTRY) void,
   AttachShader: *const fn (program: uint, shader: uint) callconv(APIENTRY) void,
   BindAttribLocation: *const fn (program: uint, index: uint, name: [*c]const char) callconv(APIENTRY) void,
   CompileShader: *const fn (shader: uint) callconv(APIENTRY) void,
   CreateProgram: *const fn () callconv(APIENTRY) uint,
   CreateShader: *const fn (@"type": @"enum") callconv(APIENTRY) uint,
   DeleteProgram: *const fn (program: uint) callconv(APIENTRY) void,
   DeleteShader: *const fn (shader: uint) callconv(APIENTRY) void,
   DetachShader: *const fn (program: uint, shader: uint) callconv(APIENTRY) void,
   DisableVertexAttribArray: *const fn (index: uint) callconv(APIENTRY) void,
   EnableVertexAttribArray: *const fn (index: uint) callconv(APIENTRY) void,
   GetActiveAttrib: *const fn (program: uint, index: uint, bufSize: sizei, length: sizei, size: int, @"type": @"enum", name: char) callconv(APIENTRY) void,
   GetActiveUniform: *const fn (program: uint, index: uint, bufSize: sizei, length: sizei, size: int, @"type": @"enum", name: char) callconv(APIENTRY) void,
   GetAttachedShaders: *const fn (program: uint, maxCount: sizei, count: sizei, shaders: uint) callconv(APIENTRY) void,
   GetAttribLocation: *const fn (program: uint, name: [*c]const char) callconv(APIENTRY) int,
   GetProgramiv: *const fn (program: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetProgramInfoLog: *const fn (program: uint, bufSize: sizei, length: sizei, infoLog: char) callconv(APIENTRY) void,
   GetShaderiv: *const fn (shader: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetShaderInfoLog: *const fn (shader: uint, bufSize: sizei, length: sizei, infoLog: char) callconv(APIENTRY) void,
   GetShaderSource: *const fn (shader: uint, bufSize: sizei, length: sizei, source: char) callconv(APIENTRY) void,
   GetUniformLocation: *const fn (program: uint, name: [*c]const char) callconv(APIENTRY) int,
   GetUniformfv: *const fn (program: uint, location: int, params: float) callconv(APIENTRY) void,
   GetUniformiv: *const fn (program: uint, location: int, params: int) callconv(APIENTRY) void,
   GetVertexAttribdv: *const fn (index: uint, pname: @"enum", params: double) callconv(APIENTRY) void,
   GetVertexAttribfv: *const fn (index: uint, pname: @"enum", params: float) callconv(APIENTRY) void,
   GetVertexAttribiv: *const fn (index: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetVertexAttribPointerv: *const fn (index: uint, pname: @"enum", pointer: ?*const anyopaque) callconv(APIENTRY) void,
   IsProgram: *const fn (program: uint) callconv(APIENTRY) boolean,
   IsShader: *const fn (shader: uint) callconv(APIENTRY) boolean,
   LinkProgram: *const fn (program: uint) callconv(APIENTRY) void,
   ShaderSource: *const fn (shader: uint, count: sizei, string: [*c]const [*c]const char, length: [*c]const int) callconv(APIENTRY) void,
   UseProgram: *const fn (program: uint) callconv(APIENTRY) void,
   Uniform1f: *const fn (location: int, v0: float) callconv(APIENTRY) void,
   Uniform2f: *const fn (location: int, v0: float, v1: float) callconv(APIENTRY) void,
   Uniform3f: *const fn (location: int, v0: float, v1: float, v2: float) callconv(APIENTRY) void,
   Uniform4f: *const fn (location: int, v0: float, v1: float, v2: float, v3: float) callconv(APIENTRY) void,
   Uniform1i: *const fn (location: int, v0: int) callconv(APIENTRY) void,
   Uniform2i: *const fn (location: int, v0: int, v1: int) callconv(APIENTRY) void,
   Uniform3i: *const fn (location: int, v0: int, v1: int, v2: int) callconv(APIENTRY) void,
   Uniform4i: *const fn (location: int, v0: int, v1: int, v2: int, v3: int) callconv(APIENTRY) void,
   Uniform1fv: *const fn (location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void,
   Uniform2fv: *const fn (location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void,
   Uniform3fv: *const fn (location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void,
   Uniform4fv: *const fn (location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void,
   Uniform1iv: *const fn (location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void,
   Uniform2iv: *const fn (location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void,
   Uniform3iv: *const fn (location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void,
   Uniform4iv: *const fn (location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void,
   UniformMatrix2fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   UniformMatrix3fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   UniformMatrix4fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ValidateProgram: *const fn (program: uint) callconv(APIENTRY) void,
   VertexAttrib1d: *const fn (index: uint, x: double) callconv(APIENTRY) void,
   VertexAttrib1dv: *const fn (index: uint, v: [*c]const double) callconv(APIENTRY) void,
   VertexAttrib1f: *const fn (index: uint, x: float) callconv(APIENTRY) void,
   VertexAttrib1fv: *const fn (index: uint, v: [*c]const float) callconv(APIENTRY) void,
   VertexAttrib1s: *const fn (index: uint, x: short) callconv(APIENTRY) void,
   VertexAttrib1sv: *const fn (index: uint, v: [*c]const short) callconv(APIENTRY) void,
   VertexAttrib2d: *const fn (index: uint, x: double, y: double) callconv(APIENTRY) void,
   VertexAttrib2dv: *const fn (index: uint, v: [*c]const double) callconv(APIENTRY) void,
   VertexAttrib2f: *const fn (index: uint, x: float, y: float) callconv(APIENTRY) void,
   VertexAttrib2fv: *const fn (index: uint, v: [*c]const float) callconv(APIENTRY) void,
   VertexAttrib2s: *const fn (index: uint, x: short, y: short) callconv(APIENTRY) void,
   VertexAttrib2sv: *const fn (index: uint, v: [*c]const short) callconv(APIENTRY) void,
   VertexAttrib3d: *const fn (index: uint, x: double, y: double, z: double) callconv(APIENTRY) void,
   VertexAttrib3dv: *const fn (index: uint, v: [*c]const double) callconv(APIENTRY) void,
   VertexAttrib3f: *const fn (index: uint, x: float, y: float, z: float) callconv(APIENTRY) void,
   VertexAttrib3fv: *const fn (index: uint, v: [*c]const float) callconv(APIENTRY) void,
   VertexAttrib3s: *const fn (index: uint, x: short, y: short, z: short) callconv(APIENTRY) void,
   VertexAttrib3sv: *const fn (index: uint, v: [*c]const short) callconv(APIENTRY) void,
   VertexAttrib4Nbv: *const fn (index: uint, v: [*c]const byte) callconv(APIENTRY) void,
   VertexAttrib4Niv: *const fn (index: uint, v: [*c]const int) callconv(APIENTRY) void,
   VertexAttrib4Nsv: *const fn (index: uint, v: [*c]const short) callconv(APIENTRY) void,
   VertexAttrib4Nub: *const fn (index: uint, x: ubyte, y: ubyte, z: ubyte, w: ubyte) callconv(APIENTRY) void,
   VertexAttrib4Nubv: *const fn (index: uint, v: [*c]const ubyte) callconv(APIENTRY) void,
   VertexAttrib4Nuiv: *const fn (index: uint, v: [*c]const uint) callconv(APIENTRY) void,
   VertexAttrib4Nusv: *const fn (index: uint, v: [*c]const ushort) callconv(APIENTRY) void,
   VertexAttrib4bv: *const fn (index: uint, v: [*c]const byte) callconv(APIENTRY) void,
   VertexAttrib4d: *const fn (index: uint, x: double, y: double, z: double, w: double) callconv(APIENTRY) void,
   VertexAttrib4dv: *const fn (index: uint, v: [*c]const double) callconv(APIENTRY) void,
   VertexAttrib4f: *const fn (index: uint, x: float, y: float, z: float, w: float) callconv(APIENTRY) void,
   VertexAttrib4fv: *const fn (index: uint, v: [*c]const float) callconv(APIENTRY) void,
   VertexAttrib4iv: *const fn (index: uint, v: [*c]const int) callconv(APIENTRY) void,
   VertexAttrib4s: *const fn (index: uint, x: short, y: short, z: short, w: short) callconv(APIENTRY) void,
   VertexAttrib4sv: *const fn (index: uint, v: [*c]const short) callconv(APIENTRY) void,
   VertexAttrib4ubv: *const fn (index: uint, v: [*c]const ubyte) callconv(APIENTRY) void,
   VertexAttrib4uiv: *const fn (index: uint, v: [*c]const uint) callconv(APIENTRY) void,
   VertexAttrib4usv: *const fn (index: uint, v: [*c]const ushort) callconv(APIENTRY) void,
   VertexAttribPointer: *const fn (index: uint, size: int, @"type": @"enum", normalized: boolean, stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   UniformMatrix2x3fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   UniformMatrix3x2fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   UniformMatrix2x4fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   UniformMatrix4x2fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   UniformMatrix3x4fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   UniformMatrix4x3fv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ColorMaski: *const fn (index: uint, r: boolean, g: boolean, b: boolean, a: boolean) callconv(APIENTRY) void,
   GetBooleani_v: *const fn (target: @"enum", index: uint, data: boolean) callconv(APIENTRY) void,
   Enablei: *const fn (target: @"enum", index: uint) callconv(APIENTRY) void,
   Disablei: *const fn (target: @"enum", index: uint) callconv(APIENTRY) void,
   IsEnabledi: *const fn (target: @"enum", index: uint) callconv(APIENTRY) boolean,
   BeginTransformFeedback: *const fn (primitiveMode: @"enum") callconv(APIENTRY) void,
   EndTransformFeedback: *const fn () callconv(APIENTRY) void,
   TransformFeedbackVaryings: *const fn (program: uint, count: sizei, varyings: [*c]const [*c]const char, bufferMode: @"enum") callconv(APIENTRY) void,
   GetTransformFeedbackVarying: *const fn (program: uint, index: uint, bufSize: sizei, length: sizei, size: sizei, @"type": @"enum", name: char) callconv(APIENTRY) void,
   ClampColor: *const fn (target: @"enum", clamp: @"enum") callconv(APIENTRY) void,
   BeginConditionalRender: *const fn (id: uint, mode: @"enum") callconv(APIENTRY) void,
   EndConditionalRender: *const fn () callconv(APIENTRY) void,
   VertexAttribIPointer: *const fn (index: uint, size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   GetVertexAttribIiv: *const fn (index: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetVertexAttribIuiv: *const fn (index: uint, pname: @"enum", params: uint) callconv(APIENTRY) void,
   VertexAttribI1i: *const fn (index: uint, x: int) callconv(APIENTRY) void,
   VertexAttribI2i: *const fn (index: uint, x: int, y: int) callconv(APIENTRY) void,
   VertexAttribI3i: *const fn (index: uint, x: int, y: int, z: int) callconv(APIENTRY) void,
   VertexAttribI4i: *const fn (index: uint, x: int, y: int, z: int, w: int) callconv(APIENTRY) void,
   VertexAttribI1ui: *const fn (index: uint, x: uint) callconv(APIENTRY) void,
   VertexAttribI2ui: *const fn (index: uint, x: uint, y: uint) callconv(APIENTRY) void,
   VertexAttribI3ui: *const fn (index: uint, x: uint, y: uint, z: uint) callconv(APIENTRY) void,
   VertexAttribI4ui: *const fn (index: uint, x: uint, y: uint, z: uint, w: uint) callconv(APIENTRY) void,
   VertexAttribI1iv: *const fn (index: uint, v: [*c]const int) callconv(APIENTRY) void,
   VertexAttribI2iv: *const fn (index: uint, v: [*c]const int) callconv(APIENTRY) void,
   VertexAttribI3iv: *const fn (index: uint, v: [*c]const int) callconv(APIENTRY) void,
   VertexAttribI4iv: *const fn (index: uint, v: [*c]const int) callconv(APIENTRY) void,
   VertexAttribI1uiv: *const fn (index: uint, v: [*c]const uint) callconv(APIENTRY) void,
   VertexAttribI2uiv: *const fn (index: uint, v: [*c]const uint) callconv(APIENTRY) void,
   VertexAttribI3uiv: *const fn (index: uint, v: [*c]const uint) callconv(APIENTRY) void,
   VertexAttribI4uiv: *const fn (index: uint, v: [*c]const uint) callconv(APIENTRY) void,
   VertexAttribI4bv: *const fn (index: uint, v: [*c]const byte) callconv(APIENTRY) void,
   VertexAttribI4sv: *const fn (index: uint, v: [*c]const short) callconv(APIENTRY) void,
   VertexAttribI4ubv: *const fn (index: uint, v: [*c]const ubyte) callconv(APIENTRY) void,
   VertexAttribI4usv: *const fn (index: uint, v: [*c]const ushort) callconv(APIENTRY) void,
   GetUniformuiv: *const fn (program: uint, location: int, params: uint) callconv(APIENTRY) void,
   BindFragDataLocation: *const fn (program: uint, color: uint, name: [*c]const char) callconv(APIENTRY) void,
   GetFragDataLocation: *const fn (program: uint, name: [*c]const char) callconv(APIENTRY) int,
   Uniform1ui: *const fn (location: int, v0: uint) callconv(APIENTRY) void,
   Uniform2ui: *const fn (location: int, v0: uint, v1: uint) callconv(APIENTRY) void,
   Uniform3ui: *const fn (location: int, v0: uint, v1: uint, v2: uint) callconv(APIENTRY) void,
   Uniform4ui: *const fn (location: int, v0: uint, v1: uint, v2: uint, v3: uint) callconv(APIENTRY) void,
   Uniform1uiv: *const fn (location: int, count: sizei, value: [*c]const uint) callconv(APIENTRY) void,
   Uniform2uiv: *const fn (location: int, count: sizei, value: [*c]const uint) callconv(APIENTRY) void,
   Uniform3uiv: *const fn (location: int, count: sizei, value: [*c]const uint) callconv(APIENTRY) void,
   Uniform4uiv: *const fn (location: int, count: sizei, value: [*c]const uint) callconv(APIENTRY) void,
   TexParameterIiv: *const fn (target: @"enum", pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   TexParameterIuiv: *const fn (target: @"enum", pname: @"enum", params: [*c]const uint) callconv(APIENTRY) void,
   GetTexParameterIiv: *const fn (target: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetTexParameterIuiv: *const fn (target: @"enum", pname: @"enum", params: uint) callconv(APIENTRY) void,
   ClearBufferiv: *const fn (buffer: @"enum", drawbuffer: int, value: [*c]const int) callconv(APIENTRY) void,
   ClearBufferuiv: *const fn (buffer: @"enum", drawbuffer: int, value: [*c]const uint) callconv(APIENTRY) void,
   ClearBufferfv: *const fn (buffer: @"enum", drawbuffer: int, value: [*c]const float) callconv(APIENTRY) void,
   ClearBufferfi: *const fn (buffer: @"enum", drawbuffer: int, depth: float, stencil: int) callconv(APIENTRY) void,
   GetStringi: *const fn (name: @"enum", index: uint) callconv(APIENTRY) ubyte,
   IsRenderbuffer: *const fn (renderbuffer: uint) callconv(APIENTRY) boolean,
   BindRenderbuffer: *const fn (target: @"enum", renderbuffer: uint) callconv(APIENTRY) void,
   DeleteRenderbuffers: *const fn (n: sizei, renderbuffers: [*c]const uint) callconv(APIENTRY) void,
   GenRenderbuffers: *const fn (n: sizei, renderbuffers: uint) callconv(APIENTRY) void,
   RenderbufferStorage: *const fn (target: @"enum", internalformat: @"enum", width: sizei, height: sizei) callconv(APIENTRY) void,
   GetRenderbufferParameteriv: *const fn (target: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   IsFramebuffer: *const fn (framebuffer: uint) callconv(APIENTRY) boolean,
   BindFramebuffer: *const fn (target: @"enum", framebuffer: uint) callconv(APIENTRY) void,
   DeleteFramebuffers: *const fn (n: sizei, framebuffers: [*c]const uint) callconv(APIENTRY) void,
   GenFramebuffers: *const fn (n: sizei, framebuffers: uint) callconv(APIENTRY) void,
   CheckFramebufferStatus: *const fn (target: @"enum") callconv(APIENTRY) @"enum",
   FramebufferTexture1D: *const fn (target: @"enum", attachment: @"enum", textarget: @"enum", texture: uint, level: int) callconv(APIENTRY) void,
   FramebufferTexture2D: *const fn (target: @"enum", attachment: @"enum", textarget: @"enum", texture: uint, level: int) callconv(APIENTRY) void,
   FramebufferTexture3D: *const fn (target: @"enum", attachment: @"enum", textarget: @"enum", texture: uint, level: int, zoffset: int) callconv(APIENTRY) void,
   FramebufferRenderbuffer: *const fn (target: @"enum", attachment: @"enum", renderbuffertarget: @"enum", renderbuffer: uint) callconv(APIENTRY) void,
   GetFramebufferAttachmentParameteriv: *const fn (target: @"enum", attachment: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GenerateMipmap: *const fn (target: @"enum") callconv(APIENTRY) void,
   BlitFramebuffer: *const fn (srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: @"enum") callconv(APIENTRY) void,
   RenderbufferStorageMultisample: *const fn (target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei) callconv(APIENTRY) void,
   FramebufferTextureLayer: *const fn (target: @"enum", attachment: @"enum", texture: uint, level: int, layer: int) callconv(APIENTRY) void,
   MapBufferRange: *const fn (target: @"enum", offset: intptr, length: sizeiptr, access: bitfield) callconv(APIENTRY) void,
   FlushMappedBufferRange: *const fn (target: @"enum", offset: intptr, length: sizeiptr) callconv(APIENTRY) void,
   BindVertexArray: *const fn (array: uint) callconv(APIENTRY) void,
   DeleteVertexArrays: *const fn (n: sizei, arrays: [*c]const uint) callconv(APIENTRY) void,
   GenVertexArrays: *const fn (n: sizei, arrays: uint) callconv(APIENTRY) void,
   IsVertexArray: *const fn (array: uint) callconv(APIENTRY) boolean,
   DrawArraysInstanced: *const fn (mode: @"enum", first: int, count: sizei, instancecount: sizei) callconv(APIENTRY) void,
   DrawElementsInstanced: *const fn (mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, instancecount: sizei) callconv(APIENTRY) void,
   TexBuffer: *const fn (target: @"enum", internalformat: @"enum", buffer: uint) callconv(APIENTRY) void,
   PrimitiveRestartIndex: *const fn (index: uint) callconv(APIENTRY) void,
   CopyBufferSubData: *const fn (readTarget: @"enum", writeTarget: @"enum", readOffset: intptr, writeOffset: intptr, size: sizeiptr) callconv(APIENTRY) void,
   GetUniformIndices: *const fn (program: uint, uniformCount: sizei, uniformNames: [*c]const [*c]const char, uniformIndices: uint) callconv(APIENTRY) void,
   GetActiveUniformsiv: *const fn (program: uint, uniformCount: sizei, uniformIndices: [*c]const uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetActiveUniformName: *const fn (program: uint, uniformIndex: uint, bufSize: sizei, length: sizei, uniformName: char) callconv(APIENTRY) void,
   GetUniformBlockIndex: *const fn (program: uint, uniformBlockName: [*c]const char) callconv(APIENTRY) uint,
   GetActiveUniformBlockiv: *const fn (program: uint, uniformBlockIndex: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetActiveUniformBlockName: *const fn (program: uint, uniformBlockIndex: uint, bufSize: sizei, length: sizei, uniformBlockName: char) callconv(APIENTRY) void,
   UniformBlockBinding: *const fn (program: uint, uniformBlockIndex: uint, uniformBlockBinding: uint) callconv(APIENTRY) void,
   DrawElementsBaseVertex: *const fn (mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, basevertex: int) callconv(APIENTRY) void,
   DrawRangeElementsBaseVertex: *const fn (mode: @"enum", start: uint, end: uint, count: sizei, @"type": @"enum", indices: ?*const anyopaque, basevertex: int) callconv(APIENTRY) void,
   DrawElementsInstancedBaseVertex: *const fn (mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, instancecount: sizei, basevertex: int) callconv(APIENTRY) void,
   MultiDrawElementsBaseVertex: *const fn (mode: @"enum", count: [*c]const sizei, @"type": @"enum", indices: ?*const anyopaque, drawcount: sizei, basevertex: [*c]const int) callconv(APIENTRY) void,
   ProvokingVertex: *const fn (mode: @"enum") callconv(APIENTRY) void,
   FenceSync: *const fn (condition: @"enum", flags: bitfield) callconv(APIENTRY) sync,
   IsSync: *const fn (_sync: sync) callconv(APIENTRY) boolean,
   DeleteSync: *const fn (_sync: sync) callconv(APIENTRY) void,
   ClientWaitSync: *const fn (_sync: sync, flags: bitfield, timeout: uint64) callconv(APIENTRY) @"enum",
   WaitSync: *const fn (_sync: sync, flags: bitfield, timeout: uint64) callconv(APIENTRY) void,
   GetInteger64v: *const fn (pname: @"enum", data: int64) callconv(APIENTRY) void,
   GetSynciv: *const fn (_sync: sync, pname: @"enum", count: sizei, length: sizei, values: int) callconv(APIENTRY) void,
   GetInteger64i_v: *const fn (target: @"enum", index: uint, data: int64) callconv(APIENTRY) void,
   GetBufferParameteri64v: *const fn (target: @"enum", pname: @"enum", params: int64) callconv(APIENTRY) void,
   FramebufferTexture: *const fn (target: @"enum", attachment: @"enum", texture: uint, level: int) callconv(APIENTRY) void,
   TexImage2DMultisample: *const fn (target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei, fixedsamplelocations: boolean) callconv(APIENTRY) void,
   TexImage3DMultisample: *const fn (target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) callconv(APIENTRY) void,
   GetMultisamplefv: *const fn (pname: @"enum", index: uint, val: float) callconv(APIENTRY) void,
   SampleMaski: *const fn (maskNumber: uint, mask: bitfield) callconv(APIENTRY) void,
   BindFragDataLocationIndexed: *const fn (program: uint, colorNumber: uint, index: uint, name: [*c]const char) callconv(APIENTRY) void,
   GetFragDataIndex: *const fn (program: uint, name: [*c]const char) callconv(APIENTRY) int,
   GenSamplers: *const fn (count: sizei, samplers: uint) callconv(APIENTRY) void,
   DeleteSamplers: *const fn (count: sizei, samplers: [*c]const uint) callconv(APIENTRY) void,
   IsSampler: *const fn (sampler: uint) callconv(APIENTRY) boolean,
   BindSampler: *const fn (unit: uint, sampler: uint) callconv(APIENTRY) void,
   SamplerParameteri: *const fn (sampler: uint, pname: @"enum", param: int) callconv(APIENTRY) void,
   SamplerParameteriv: *const fn (sampler: uint, pname: @"enum", param: [*c]const int) callconv(APIENTRY) void,
   SamplerParameterf: *const fn (sampler: uint, pname: @"enum", param: float) callconv(APIENTRY) void,
   SamplerParameterfv: *const fn (sampler: uint, pname: @"enum", param: [*c]const float) callconv(APIENTRY) void,
   SamplerParameterIiv: *const fn (sampler: uint, pname: @"enum", param: [*c]const int) callconv(APIENTRY) void,
   SamplerParameterIuiv: *const fn (sampler: uint, pname: @"enum", param: [*c]const uint) callconv(APIENTRY) void,
   GetSamplerParameteriv: *const fn (sampler: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetSamplerParameterIiv: *const fn (sampler: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetSamplerParameterfv: *const fn (sampler: uint, pname: @"enum", params: float) callconv(APIENTRY) void,
   GetSamplerParameterIuiv: *const fn (sampler: uint, pname: @"enum", params: uint) callconv(APIENTRY) void,
   QueryCounter: *const fn (id: uint, target: @"enum") callconv(APIENTRY) void,
   GetQueryObjecti64v: *const fn (id: uint, pname: @"enum", params: int64) callconv(APIENTRY) void,
   GetQueryObjectui64v: *const fn (id: uint, pname: @"enum", params: uint64) callconv(APIENTRY) void,
   VertexAttribDivisor: *const fn (index: uint, divisor: uint) callconv(APIENTRY) void,
   VertexAttribP1ui: *const fn (index: uint, @"type": @"enum", normalized: boolean, value: uint) callconv(APIENTRY) void,
   VertexAttribP1uiv: *const fn (index: uint, @"type": @"enum", normalized: boolean, value: [*c]const uint) callconv(APIENTRY) void,
   VertexAttribP2ui: *const fn (index: uint, @"type": @"enum", normalized: boolean, value: uint) callconv(APIENTRY) void,
   VertexAttribP2uiv: *const fn (index: uint, @"type": @"enum", normalized: boolean, value: [*c]const uint) callconv(APIENTRY) void,
   VertexAttribP3ui: *const fn (index: uint, @"type": @"enum", normalized: boolean, value: uint) callconv(APIENTRY) void,
   VertexAttribP3uiv: *const fn (index: uint, @"type": @"enum", normalized: boolean, value: [*c]const uint) callconv(APIENTRY) void,
   VertexAttribP4ui: *const fn (index: uint, @"type": @"enum", normalized: boolean, value: uint) callconv(APIENTRY) void,
   VertexAttribP4uiv: *const fn (index: uint, @"type": @"enum", normalized: boolean, value: [*c]const uint) callconv(APIENTRY) void,
   MinSampleShading: *const fn (value: float) callconv(APIENTRY) void,
   BlendEquationi: *const fn (buf: uint, mode: @"enum") callconv(APIENTRY) void,
   BlendEquationSeparatei: *const fn (buf: uint, modeRGB: @"enum", modeAlpha: @"enum") callconv(APIENTRY) void,
   BlendFunci: *const fn (buf: uint, src: @"enum", dst: @"enum") callconv(APIENTRY) void,
   BlendFuncSeparatei: *const fn (buf: uint, srcRGB: @"enum", dstRGB: @"enum", srcAlpha: @"enum", dstAlpha: @"enum") callconv(APIENTRY) void,
   DrawArraysIndirect: *const fn (mode: @"enum", indirect: ?*const anyopaque) callconv(APIENTRY) void,
   DrawElementsIndirect: *const fn (mode: @"enum", @"type": @"enum", indirect: ?*const anyopaque) callconv(APIENTRY) void,
   Uniform1d: *const fn (location: int, x: double) callconv(APIENTRY) void,
   Uniform2d: *const fn (location: int, x: double, y: double) callconv(APIENTRY) void,
   Uniform3d: *const fn (location: int, x: double, y: double, z: double) callconv(APIENTRY) void,
   Uniform4d: *const fn (location: int, x: double, y: double, z: double, w: double) callconv(APIENTRY) void,
   Uniform1dv: *const fn (location: int, count: sizei, value: [*c]const double) callconv(APIENTRY) void,
   Uniform2dv: *const fn (location: int, count: sizei, value: [*c]const double) callconv(APIENTRY) void,
   Uniform3dv: *const fn (location: int, count: sizei, value: [*c]const double) callconv(APIENTRY) void,
   Uniform4dv: *const fn (location: int, count: sizei, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix2dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix3dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix4dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix2x3dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix2x4dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix3x2dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix3x4dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix4x2dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   UniformMatrix4x3dv: *const fn (location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   GetUniformdv: *const fn (program: uint, location: int, params: double) callconv(APIENTRY) void,
   GetSubroutineUniformLocation: *const fn (program: uint, shadertype: @"enum", name: [*c]const char) callconv(APIENTRY) int,
   GetSubroutineIndex: *const fn (program: uint, shadertype: @"enum", name: [*c]const char) callconv(APIENTRY) uint,
   GetActiveSubroutineUniformiv: *const fn (program: uint, shadertype: @"enum", index: uint, pname: @"enum", values: int) callconv(APIENTRY) void,
   GetActiveSubroutineUniformName: *const fn (program: uint, shadertype: @"enum", index: uint, bufSize: sizei, length: sizei, name: char) callconv(APIENTRY) void,
   GetActiveSubroutineName: *const fn (program: uint, shadertype: @"enum", index: uint, bufSize: sizei, length: sizei, name: char) callconv(APIENTRY) void,
   UniformSubroutinesuiv: *const fn (shadertype: @"enum", count: sizei, indices: [*c]const uint) callconv(APIENTRY) void,
   GetUniformSubroutineuiv: *const fn (shadertype: @"enum", location: int, params: uint) callconv(APIENTRY) void,
   GetProgramStageiv: *const fn (program: uint, shadertype: @"enum", pname: @"enum", values: int) callconv(APIENTRY) void,
   PatchParameteri: *const fn (pname: @"enum", value: int) callconv(APIENTRY) void,
   PatchParameterfv: *const fn (pname: @"enum", values: [*c]const float) callconv(APIENTRY) void,
   BindTransformFeedback: *const fn (target: @"enum", id: uint) callconv(APIENTRY) void,
   DeleteTransformFeedbacks: *const fn (n: sizei, ids: [*c]const uint) callconv(APIENTRY) void,
   GenTransformFeedbacks: *const fn (n: sizei, ids: uint) callconv(APIENTRY) void,
   IsTransformFeedback: *const fn (id: uint) callconv(APIENTRY) boolean,
   PauseTransformFeedback: *const fn () callconv(APIENTRY) void,
   ResumeTransformFeedback: *const fn () callconv(APIENTRY) void,
   DrawTransformFeedback: *const fn (mode: @"enum", id: uint) callconv(APIENTRY) void,
   DrawTransformFeedbackStream: *const fn (mode: @"enum", id: uint, stream: uint) callconv(APIENTRY) void,
   BeginQueryIndexed: *const fn (target: @"enum", index: uint, id: uint) callconv(APIENTRY) void,
   EndQueryIndexed: *const fn (target: @"enum", index: uint) callconv(APIENTRY) void,
   GetQueryIndexediv: *const fn (target: @"enum", index: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   ReleaseShaderCompiler: *const fn () callconv(APIENTRY) void,
   ShaderBinary: *const fn (count: sizei, shaders: [*c]const uint, binaryFormat: @"enum", binary: ?*const anyopaque, length: sizei) callconv(APIENTRY) void,
   GetShaderPrecisionFormat: *const fn (shadertype: @"enum", precisiontype: @"enum", range: int, precision: int) callconv(APIENTRY) void,
   DepthRangef: *const fn (n: float, f: float) callconv(APIENTRY) void,
   ClearDepthf: *const fn (d: float) callconv(APIENTRY) void,
   GetProgramBinary: *const fn (program: uint, bufSize: sizei, length: sizei, binaryFormat: @"enum", binary: ?*const anyopaque) callconv(APIENTRY) void,
   ProgramBinary: *const fn (program: uint, binaryFormat: @"enum", binary: ?*const anyopaque, length: sizei) callconv(APIENTRY) void,
   UseProgramStages: *const fn (pipeline: uint, stages: bitfield, program: uint) callconv(APIENTRY) void,
   ActiveShaderProgram: *const fn (pipeline: uint, program: uint) callconv(APIENTRY) void,
   CreateShaderProgramv: *const fn (@"type": @"enum", count: sizei, strings: [*c]const [*c]const char) callconv(APIENTRY) uint,
   BindProgramPipeline: *const fn (pipeline: uint) callconv(APIENTRY) void,
   DeleteProgramPipelines: *const fn (n: sizei, pipelines: [*c]const uint) callconv(APIENTRY) void,
   GenProgramPipelines: *const fn (n: sizei, pipelines: uint) callconv(APIENTRY) void,
   IsProgramPipeline: *const fn (pipeline: uint) callconv(APIENTRY) boolean,
   GetProgramPipelineiv: *const fn (pipeline: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   ProgramUniform1i: *const fn (program: uint, location: int, v0: int) callconv(APIENTRY) void,
   ProgramUniform1iv: *const fn (program: uint, location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void,
   ProgramUniform1f: *const fn (program: uint, location: int, v0: float) callconv(APIENTRY) void,
   ProgramUniform1fv: *const fn (program: uint, location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniform1d: *const fn (program: uint, location: int, v0: double) callconv(APIENTRY) void,
   ProgramUniform1dv: *const fn (program: uint, location: int, count: sizei, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniform1ui: *const fn (program: uint, location: int, v0: uint) callconv(APIENTRY) void,
   ProgramUniform1uiv: *const fn (program: uint, location: int, count: sizei, value: [*c]const uint) callconv(APIENTRY) void,
   ProgramUniform2i: *const fn (program: uint, location: int, v0: int, v1: int) callconv(APIENTRY) void,
   ProgramUniform2iv: *const fn (program: uint, location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void,
   ProgramUniform2f: *const fn (program: uint, location: int, v0: float, v1: float) callconv(APIENTRY) void,
   ProgramUniform2fv: *const fn (program: uint, location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniform2d: *const fn (program: uint, location: int, v0: double, v1: double) callconv(APIENTRY) void,
   ProgramUniform2dv: *const fn (program: uint, location: int, count: sizei, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniform2ui: *const fn (program: uint, location: int, v0: uint, v1: uint) callconv(APIENTRY) void,
   ProgramUniform2uiv: *const fn (program: uint, location: int, count: sizei, value: [*c]const uint) callconv(APIENTRY) void,
   ProgramUniform3i: *const fn (program: uint, location: int, v0: int, v1: int, v2: int) callconv(APIENTRY) void,
   ProgramUniform3iv: *const fn (program: uint, location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void,
   ProgramUniform3f: *const fn (program: uint, location: int, v0: float, v1: float, v2: float) callconv(APIENTRY) void,
   ProgramUniform3fv: *const fn (program: uint, location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniform3d: *const fn (program: uint, location: int, v0: double, v1: double, v2: double) callconv(APIENTRY) void,
   ProgramUniform3dv: *const fn (program: uint, location: int, count: sizei, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniform3ui: *const fn (program: uint, location: int, v0: uint, v1: uint, v2: uint) callconv(APIENTRY) void,
   ProgramUniform3uiv: *const fn (program: uint, location: int, count: sizei, value: [*c]const uint) callconv(APIENTRY) void,
   ProgramUniform4i: *const fn (program: uint, location: int, v0: int, v1: int, v2: int, v3: int) callconv(APIENTRY) void,
   ProgramUniform4iv: *const fn (program: uint, location: int, count: sizei, value: [*c]const int) callconv(APIENTRY) void,
   ProgramUniform4f: *const fn (program: uint, location: int, v0: float, v1: float, v2: float, v3: float) callconv(APIENTRY) void,
   ProgramUniform4fv: *const fn (program: uint, location: int, count: sizei, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniform4d: *const fn (program: uint, location: int, v0: double, v1: double, v2: double, v3: double) callconv(APIENTRY) void,
   ProgramUniform4dv: *const fn (program: uint, location: int, count: sizei, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniform4ui: *const fn (program: uint, location: int, v0: uint, v1: uint, v2: uint, v3: uint) callconv(APIENTRY) void,
   ProgramUniform4uiv: *const fn (program: uint, location: int, count: sizei, value: [*c]const uint) callconv(APIENTRY) void,
   ProgramUniformMatrix2fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix3fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix4fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix2dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniformMatrix3dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniformMatrix4dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniformMatrix2x3fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix3x2fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix2x4fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix4x2fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix3x4fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix4x3fv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const float) callconv(APIENTRY) void,
   ProgramUniformMatrix2x3dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniformMatrix3x2dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniformMatrix2x4dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniformMatrix4x2dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniformMatrix3x4dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ProgramUniformMatrix4x3dv: *const fn (program: uint, location: int, count: sizei, transpose: boolean, value: [*c]const double) callconv(APIENTRY) void,
   ValidateProgramPipeline: *const fn (pipeline: uint) callconv(APIENTRY) void,
   GetProgramPipelineInfoLog: *const fn (pipeline: uint, bufSize: sizei, length: sizei, infoLog: char) callconv(APIENTRY) void,
   VertexAttribL1d: *const fn (index: uint, x: double) callconv(APIENTRY) void,
   VertexAttribL2d: *const fn (index: uint, x: double, y: double) callconv(APIENTRY) void,
   VertexAttribL3d: *const fn (index: uint, x: double, y: double, z: double) callconv(APIENTRY) void,
   VertexAttribL4d: *const fn (index: uint, x: double, y: double, z: double, w: double) callconv(APIENTRY) void,
   VertexAttribL1dv: *const fn (index: uint, v: [*c]const double) callconv(APIENTRY) void,
   VertexAttribL2dv: *const fn (index: uint, v: [*c]const double) callconv(APIENTRY) void,
   VertexAttribL3dv: *const fn (index: uint, v: [*c]const double) callconv(APIENTRY) void,
   VertexAttribL4dv: *const fn (index: uint, v: [*c]const double) callconv(APIENTRY) void,
   VertexAttribLPointer: *const fn (index: uint, size: int, @"type": @"enum", stride: sizei, pointer: ?*const anyopaque) callconv(APIENTRY) void,
   GetVertexAttribLdv: *const fn (index: uint, pname: @"enum", params: double) callconv(APIENTRY) void,
   ViewportArrayv: *const fn (first: uint, count: sizei, v: [*c]const float) callconv(APIENTRY) void,
   ViewportIndexedf: *const fn (index: uint, x: float, y: float, w: float, h: float) callconv(APIENTRY) void,
   ViewportIndexedfv: *const fn (index: uint, v: [*c]const float) callconv(APIENTRY) void,
   ScissorArrayv: *const fn (first: uint, count: sizei, v: [*c]const int) callconv(APIENTRY) void,
   ScissorIndexed: *const fn (index: uint, left: int, bottom: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   ScissorIndexedv: *const fn (index: uint, v: [*c]const int) callconv(APIENTRY) void,
   DepthRangeArrayv: *const fn (first: uint, count: sizei, v: [*c]const double) callconv(APIENTRY) void,
   DepthRangeIndexed: *const fn (index: uint, n: double, f: double) callconv(APIENTRY) void,
   GetFloati_v: *const fn (target: @"enum", index: uint, data: float) callconv(APIENTRY) void,
   GetDoublei_v: *const fn (target: @"enum", index: uint, data: double) callconv(APIENTRY) void,
   DrawArraysInstancedBaseInstance: *const fn (mode: @"enum", first: int, count: sizei, instancecount: sizei, baseinstance: uint) callconv(APIENTRY) void,
   DrawElementsInstancedBaseInstance: *const fn (mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, instancecount: sizei, baseinstance: uint) callconv(APIENTRY) void,
   DrawElementsInstancedBaseVertexBaseInstance: *const fn (mode: @"enum", count: sizei, @"type": @"enum", indices: ?*const anyopaque, instancecount: sizei, basevertex: int, baseinstance: uint) callconv(APIENTRY) void,
   GetInternalformativ: *const fn (target: @"enum", internalformat: @"enum", pname: @"enum", count: sizei, params: int) callconv(APIENTRY) void,
   GetActiveAtomicCounterBufferiv: *const fn (program: uint, bufferIndex: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   BindImageTexture: *const fn (unit: uint, texture: uint, level: int, layered: boolean, layer: int, access: @"enum", format: @"enum") callconv(APIENTRY) void,
   MemoryBarrier: *const fn (barriers: bitfield) callconv(APIENTRY) void,
   TexStorage1D: *const fn (target: @"enum", levels: sizei, internalformat: @"enum", width: sizei) callconv(APIENTRY) void,
   TexStorage2D: *const fn (target: @"enum", levels: sizei, internalformat: @"enum", width: sizei, height: sizei) callconv(APIENTRY) void,
   TexStorage3D: *const fn (target: @"enum", levels: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei) callconv(APIENTRY) void,
   DrawTransformFeedbackInstanced: *const fn (mode: @"enum", id: uint, instancecount: sizei) callconv(APIENTRY) void,
   DrawTransformFeedbackStreamInstanced: *const fn (mode: @"enum", id: uint, stream: uint, instancecount: sizei) callconv(APIENTRY) void,
   ClearBufferData: *const fn (target: @"enum", internalformat: @"enum", format: @"enum", @"type": @"enum", data: ?*const anyopaque) callconv(APIENTRY) void,
   ClearBufferSubData: *const fn (target: @"enum", internalformat: @"enum", offset: intptr, size: sizeiptr, format: @"enum", @"type": @"enum", data: ?*const anyopaque) callconv(APIENTRY) void,
   DispatchCompute: *const fn (num_groups_x: uint, num_groups_y: uint, num_groups_z: uint) callconv(APIENTRY) void,
   DispatchComputeIndirect: *const fn (indirect: intptr) callconv(APIENTRY) void,
   CopyImageSubData: *const fn (srcName: uint, srcTarget: @"enum", srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: uint, dstTarget: @"enum", dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: sizei, srcHeight: sizei, srcDepth: sizei) callconv(APIENTRY) void,
   FramebufferParameteri: *const fn (target: @"enum", pname: @"enum", param: int) callconv(APIENTRY) void,
   GetFramebufferParameteriv: *const fn (target: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetInternalformati64v: *const fn (target: @"enum", internalformat: @"enum", pname: @"enum", count: sizei, params: int64) callconv(APIENTRY) void,
   InvalidateTexSubImage: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei) callconv(APIENTRY) void,
   InvalidateTexImage: *const fn (texture: uint, level: int) callconv(APIENTRY) void,
   InvalidateBufferSubData: *const fn (buffer: uint, offset: intptr, length: sizeiptr) callconv(APIENTRY) void,
   InvalidateBufferData: *const fn (buffer: uint) callconv(APIENTRY) void,
   InvalidateFramebuffer: *const fn (target: @"enum", numAttachments: sizei, attachments: [*c]const @"enum") callconv(APIENTRY) void,
   InvalidateSubFramebuffer: *const fn (target: @"enum", numAttachments: sizei, attachments: [*c]const @"enum", x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   MultiDrawArraysIndirect: *const fn (mode: @"enum", indirect: ?*const anyopaque, drawcount: sizei, stride: sizei) callconv(APIENTRY) void,
   MultiDrawElementsIndirect: *const fn (mode: @"enum", @"type": @"enum", indirect: ?*const anyopaque, drawcount: sizei, stride: sizei) callconv(APIENTRY) void,
   GetProgramInterfaceiv: *const fn (program: uint, programInterface: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   GetProgramResourceIndex: *const fn (program: uint, programInterface: @"enum", name: [*c]const char) callconv(APIENTRY) uint,
   GetProgramResourceName: *const fn (program: uint, programInterface: @"enum", index: uint, bufSize: sizei, length: sizei, name: char) callconv(APIENTRY) void,
   GetProgramResourceiv: *const fn (program: uint, programInterface: @"enum", index: uint, propCount: sizei, props: [*c]const @"enum", count: sizei, length: sizei, params: int) callconv(APIENTRY) void,
   GetProgramResourceLocation: *const fn (program: uint, programInterface: @"enum", name: [*c]const char) callconv(APIENTRY) int,
   GetProgramResourceLocationIndex: *const fn (program: uint, programInterface: @"enum", name: [*c]const char) callconv(APIENTRY) int,
   ShaderStorageBlockBinding: *const fn (program: uint, storageBlockIndex: uint, storageBlockBinding: uint) callconv(APIENTRY) void,
   TexBufferRange: *const fn (target: @"enum", internalformat: @"enum", buffer: uint, offset: intptr, size: sizeiptr) callconv(APIENTRY) void,
   TexStorage2DMultisample: *const fn (target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei, fixedsamplelocations: boolean) callconv(APIENTRY) void,
   TexStorage3DMultisample: *const fn (target: @"enum", samples: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) callconv(APIENTRY) void,
   TextureView: *const fn (texture: uint, target: @"enum", origtexture: uint, internalformat: @"enum", minlevel: uint, numlevels: uint, minlayer: uint, numlayers: uint) callconv(APIENTRY) void,
   BindVertexBuffer: *const fn (bindingindex: uint, buffer: uint, offset: intptr, stride: sizei) callconv(APIENTRY) void,
   VertexAttribFormat: *const fn (attribindex: uint, size: int, @"type": @"enum", normalized: boolean, relativeoffset: uint) callconv(APIENTRY) void,
   VertexAttribIFormat: *const fn (attribindex: uint, size: int, @"type": @"enum", relativeoffset: uint) callconv(APIENTRY) void,
   VertexAttribLFormat: *const fn (attribindex: uint, size: int, @"type": @"enum", relativeoffset: uint) callconv(APIENTRY) void,
   VertexAttribBinding: *const fn (attribindex: uint, bindingindex: uint) callconv(APIENTRY) void,
   VertexBindingDivisor: *const fn (bindingindex: uint, divisor: uint) callconv(APIENTRY) void,
   DebugMessageControl: *const fn (source: @"enum", @"type": @"enum", severity: @"enum", count: sizei, ids: [*c]const uint, enabled: boolean) callconv(APIENTRY) void,
   DebugMessageInsert: *const fn (source: @"enum", @"type": @"enum", id: uint, severity: @"enum", length: sizei, buf: [*c]const char) callconv(APIENTRY) void,
   DebugMessageCallback: *const fn (callback: ?DEBUGPROC, userParam: ?*const anyopaque) callconv(APIENTRY) void,
   GetDebugMessageLog: *const fn (count: uint, bufSize: sizei, sources: @"enum", types: @"enum", ids: uint, severities: @"enum", lengths: sizei, messageLog: char) callconv(APIENTRY) uint,
   PushDebugGroup: *const fn (source: @"enum", id: uint, length: sizei, message: [*c]const char) callconv(APIENTRY) void,
   PopDebugGroup: *const fn () callconv(APIENTRY) void,
   ObjectLabel: *const fn (identifier: @"enum", name: uint, length: sizei, label: [*c]const char) callconv(APIENTRY) void,
   GetObjectLabel: *const fn (identifier: @"enum", name: uint, bufSize: sizei, length: sizei, label: char) callconv(APIENTRY) void,
   ObjectPtrLabel: *const fn (ptr: ?*const anyopaque, length: sizei, label: [*c]const char) callconv(APIENTRY) void,
   GetObjectPtrLabel: *const fn (ptr: ?*const anyopaque, bufSize: sizei, length: sizei, label: char) callconv(APIENTRY) void,
   BufferStorage: *const fn (target: @"enum", size: sizeiptr, data: ?*const anyopaque, flags: bitfield) callconv(APIENTRY) void,
   ClearTexImage: *const fn (texture: uint, level: int, format: @"enum", @"type": @"enum", data: ?*const anyopaque) callconv(APIENTRY) void,
   ClearTexSubImage: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", @"type": @"enum", data: ?*const anyopaque) callconv(APIENTRY) void,
   BindBuffersBase: *const fn (target: @"enum", first: uint, count: sizei, buffers: [*]uint) callconv(APIENTRY) void,
   BindBuffersRange: *const fn (target: @"enum", first: uint, count: sizei, buffers: [*]uint, offsets: [*c]const intptr, sizes: [*c]const sizeiptr) callconv(APIENTRY) void,
   BindTextures: *const fn (first: uint, count: sizei, textures: [*c]const uint) callconv(APIENTRY) void,
   BindSamplers: *const fn (first: uint, count: sizei, samplers: [*c]const uint) callconv(APIENTRY) void,
   BindImageTextures: *const fn (first: uint, count: sizei, textures: [*c]const uint) callconv(APIENTRY) void,
   BindVertexBuffers: *const fn (first: uint, count: sizei, buffers: [*]uint, offsets: [*c]const intptr, strides: [*c]const sizei) callconv(APIENTRY) void,
   ClipControl: *const fn (origin: @"enum", depth: @"enum") callconv(APIENTRY) void,
   CreateTransformFeedbacks: *const fn (n: sizei, ids: uint) callconv(APIENTRY) void,
   TransformFeedbackBufferBase: *const fn (xfb: uint, index: uint, buffer: uint) callconv(APIENTRY) void,
   TransformFeedbackBufferRange: *const fn (xfb: uint, index: uint, buffer: uint, offset: intptr, size: sizeiptr) callconv(APIENTRY) void,
   GetTransformFeedbackiv: *const fn (xfb: uint, pname: @"enum", param: int) callconv(APIENTRY) void,
   GetTransformFeedbacki_v: *const fn (xfb: uint, pname: @"enum", index: uint, param: int) callconv(APIENTRY) void,
   GetTransformFeedbacki64_v: *const fn (xfb: uint, pname: @"enum", index: uint, param: int64) callconv(APIENTRY) void,
   CreateBuffers: *const fn (n: sizei, buffers: uint) callconv(APIENTRY) void,
   NamedBufferStorage: *const fn (buffer: uint, size: sizeiptr, data: ?*const anyopaque, flags: bitfield) callconv(APIENTRY) void,
   NamedBufferData: *const fn (buffer: uint, size: sizeiptr, data: ?*const anyopaque, usage: @"enum") callconv(APIENTRY) void,
   NamedBufferSubData: *const fn (buffer: uint, offset: intptr, size: sizeiptr, data: ?*const anyopaque) callconv(APIENTRY) void,
   CopyNamedBufferSubData: *const fn (readBuffer: uint, writeBuffer: uint, readOffset: intptr, writeOffset: intptr, size: sizeiptr) callconv(APIENTRY) void,
   ClearNamedBufferData: *const fn (buffer: uint, internalformat: @"enum", format: @"enum", @"type": @"enum", data: ?*const anyopaque) callconv(APIENTRY) void,
   ClearNamedBufferSubData: *const fn (buffer: uint, internalformat: @"enum", offset: intptr, size: sizeiptr, format: @"enum", @"type": @"enum", data: ?*const anyopaque) callconv(APIENTRY) void,
   MapNamedBuffer: *const fn (buffer: uint, access: @"enum") callconv(APIENTRY) void,
   MapNamedBufferRange: *const fn (buffer: uint, offset: intptr, length: sizeiptr, access: bitfield) callconv(APIENTRY) void,
   UnmapNamedBuffer: *const fn (buffer: uint) callconv(APIENTRY) boolean,
   FlushMappedNamedBufferRange: *const fn (buffer: uint, offset: intptr, length: sizeiptr) callconv(APIENTRY) void,
   GetNamedBufferParameteriv: *const fn (buffer: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetNamedBufferParameteri64v: *const fn (buffer: uint, pname: @"enum", params: int64) callconv(APIENTRY) void,
   GetNamedBufferPointerv: *const fn (buffer: uint, pname: @"enum", params: ?*const anyopaque) callconv(APIENTRY) void,
   GetNamedBufferSubData: *const fn (buffer: uint, offset: intptr, size: sizeiptr, data: ?*const anyopaque) callconv(APIENTRY) void,
   CreateFramebuffers: *const fn (n: sizei, framebuffers: uint) callconv(APIENTRY) void,
   NamedFramebufferRenderbuffer: *const fn (framebuffer: uint, attachment: @"enum", renderbuffertarget: @"enum", renderbuffer: uint) callconv(APIENTRY) void,
   NamedFramebufferParameteri: *const fn (framebuffer: uint, pname: @"enum", param: int) callconv(APIENTRY) void,
   NamedFramebufferTexture: *const fn (framebuffer: uint, attachment: @"enum", texture: uint, level: int) callconv(APIENTRY) void,
   NamedFramebufferTextureLayer: *const fn (framebuffer: uint, attachment: @"enum", texture: uint, level: int, layer: int) callconv(APIENTRY) void,
   NamedFramebufferDrawBuffer: *const fn (framebuffer: uint, buf: @"enum") callconv(APIENTRY) void,
   NamedFramebufferDrawBuffers: *const fn (framebuffer: uint, n: sizei, bufs: [*c]const @"enum") callconv(APIENTRY) void,
   NamedFramebufferReadBuffer: *const fn (framebuffer: uint, src: @"enum") callconv(APIENTRY) void,
   InvalidateNamedFramebufferData: *const fn (framebuffer: uint, numAttachments: sizei, attachments: [*c]const @"enum") callconv(APIENTRY) void,
   InvalidateNamedFramebufferSubData: *const fn (framebuffer: uint, numAttachments: sizei, attachments: [*c]const @"enum", x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   ClearNamedFramebufferiv: *const fn (framebuffer: uint, buffer: @"enum", drawbuffer: int, value: [*c]const int) callconv(APIENTRY) void,
   ClearNamedFramebufferuiv: *const fn (framebuffer: uint, buffer: @"enum", drawbuffer: int, value: [*c]const uint) callconv(APIENTRY) void,
   ClearNamedFramebufferfv: *const fn (framebuffer: uint, buffer: @"enum", drawbuffer: int, value: [*c]const float) callconv(APIENTRY) void,
   ClearNamedFramebufferfi: *const fn (framebuffer: uint, buffer: @"enum", drawbuffer: int, depth: float, stencil: int) callconv(APIENTRY) void,
   BlitNamedFramebuffer: *const fn (readFramebuffer: uint, drawFramebuffer: uint, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: @"enum") callconv(APIENTRY) void,
   CheckNamedFramebufferStatus: *const fn (framebuffer: uint, target: @"enum") callconv(APIENTRY) @"enum",
   GetNamedFramebufferParameteriv: *const fn (framebuffer: uint, pname: @"enum", param: int) callconv(APIENTRY) void,
   GetNamedFramebufferAttachmentParameteriv: *const fn (framebuffer: uint, attachment: @"enum", pname: @"enum", params: int) callconv(APIENTRY) void,
   CreateRenderbuffers: *const fn (n: sizei, renderbuffers: uint) callconv(APIENTRY) void,
   NamedRenderbufferStorage: *const fn (renderbuffer: uint, internalformat: @"enum", width: sizei, height: sizei) callconv(APIENTRY) void,
   NamedRenderbufferStorageMultisample: *const fn (renderbuffer: uint, samples: sizei, internalformat: @"enum", width: sizei, height: sizei) callconv(APIENTRY) void,
   GetNamedRenderbufferParameteriv: *const fn (renderbuffer: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   CreateTextures: *const fn (target: @"enum", n: sizei, textures: uint) callconv(APIENTRY) void,
   TextureBuffer: *const fn (texture: uint, internalformat: @"enum", buffer: uint) callconv(APIENTRY) void,
   TextureBufferRange: *const fn (texture: uint, internalformat: @"enum", buffer: uint, offset: intptr, size: sizeiptr) callconv(APIENTRY) void,
   TextureStorage1D: *const fn (texture: uint, levels: sizei, internalformat: @"enum", width: sizei) callconv(APIENTRY) void,
   TextureStorage2D: *const fn (texture: uint, levels: sizei, internalformat: @"enum", width: sizei, height: sizei) callconv(APIENTRY) void,
   TextureStorage3D: *const fn (texture: uint, levels: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei) callconv(APIENTRY) void,
   TextureStorage2DMultisample: *const fn (texture: uint, samples: sizei, internalformat: @"enum", width: sizei, height: sizei, fixedsamplelocations: boolean) callconv(APIENTRY) void,
   TextureStorage3DMultisample: *const fn (texture: uint, samples: sizei, internalformat: @"enum", width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) callconv(APIENTRY) void,
   TextureSubImage1D: *const fn (texture: uint, level: int, xoffset: int, width: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   TextureSubImage2D: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   TextureSubImage3D: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", @"type": @"enum", pixels: ?*const anyopaque) callconv(APIENTRY) void,
   CompressedTextureSubImage1D: *const fn (texture: uint, level: int, xoffset: int, width: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   CompressedTextureSubImage2D: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   CompressedTextureSubImage3D: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", imageSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   CopyTextureSubImage1D: *const fn (texture: uint, level: int, xoffset: int, x: int, y: int, width: sizei) callconv(APIENTRY) void,
   CopyTextureSubImage2D: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   CopyTextureSubImage3D: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei) callconv(APIENTRY) void,
   TextureParameterf: *const fn (texture: uint, pname: @"enum", param: float) callconv(APIENTRY) void,
   TextureParameterfv: *const fn (texture: uint, pname: @"enum", param: [*c]const float) callconv(APIENTRY) void,
   TextureParameteri: *const fn (texture: uint, pname: @"enum", param: int) callconv(APIENTRY) void,
   TextureParameterIiv: *const fn (texture: uint, pname: @"enum", params: [*c]const int) callconv(APIENTRY) void,
   TextureParameterIuiv: *const fn (texture: uint, pname: @"enum", params: [*c]const uint) callconv(APIENTRY) void,
   TextureParameteriv: *const fn (texture: uint, pname: @"enum", param: [*c]const int) callconv(APIENTRY) void,
   GenerateTextureMipmap: *const fn (texture: uint) callconv(APIENTRY) void,
   BindTextureUnit: *const fn (unit: uint, texture: uint) callconv(APIENTRY) void,
   GetTextureImage: *const fn (texture: uint, level: int, format: @"enum", @"type": @"enum", bufSize: sizei, pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetCompressedTextureImage: *const fn (texture: uint, level: int, bufSize: sizei, pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetTextureLevelParameterfv: *const fn (texture: uint, level: int, pname: @"enum", params: float) callconv(APIENTRY) void,
   GetTextureLevelParameteriv: *const fn (texture: uint, level: int, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetTextureParameterfv: *const fn (texture: uint, pname: @"enum", params: float) callconv(APIENTRY) void,
   GetTextureParameterIiv: *const fn (texture: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   GetTextureParameterIuiv: *const fn (texture: uint, pname: @"enum", params: uint) callconv(APIENTRY) void,
   GetTextureParameteriv: *const fn (texture: uint, pname: @"enum", params: int) callconv(APIENTRY) void,
   CreateVertexArrays: *const fn (n: sizei, arrays: uint) callconv(APIENTRY) void,
   DisableVertexArrayAttrib: *const fn (vaobj: uint, index: uint) callconv(APIENTRY) void,
   EnableVertexArrayAttrib: *const fn (vaobj: uint, index: uint) callconv(APIENTRY) void,
   VertexArrayElementBuffer: *const fn (vaobj: uint, buffer: uint) callconv(APIENTRY) void,
   VertexArrayVertexBuffer: *const fn (vaobj: uint, bindingindex: uint, buffer: uint, offset: intptr, stride: sizei) callconv(APIENTRY) void,
   VertexArrayVertexBuffers: *const fn (vaobj: uint, first: uint, count: sizei, buffers: [*]uint, offsets: [*c]const intptr, strides: [*c]const sizei) callconv(APIENTRY) void,
   VertexArrayAttribBinding: *const fn (vaobj: uint, attribindex: uint, bindingindex: uint) callconv(APIENTRY) void,
   VertexArrayAttribFormat: *const fn (vaobj: uint, attribindex: uint, size: int, @"type": @"enum", normalized: boolean, relativeoffset: uint) callconv(APIENTRY) void,
   VertexArrayAttribIFormat: *const fn (vaobj: uint, attribindex: uint, size: int, @"type": @"enum", relativeoffset: uint) callconv(APIENTRY) void,
   VertexArrayAttribLFormat: *const fn (vaobj: uint, attribindex: uint, size: int, @"type": @"enum", relativeoffset: uint) callconv(APIENTRY) void,
   VertexArrayBindingDivisor: *const fn (vaobj: uint, bindingindex: uint, divisor: uint) callconv(APIENTRY) void,
   GetVertexArrayiv: *const fn (vaobj: uint, pname: @"enum", param: int) callconv(APIENTRY) void,
   GetVertexArrayIndexediv: *const fn (vaobj: uint, index: uint, pname: @"enum", param: int) callconv(APIENTRY) void,
   GetVertexArrayIndexed64iv: *const fn (vaobj: uint, index: uint, pname: @"enum", param: int64) callconv(APIENTRY) void,
   CreateSamplers: *const fn (n: sizei, samplers: uint) callconv(APIENTRY) void,
   CreateProgramPipelines: *const fn (n: sizei, pipelines: uint) callconv(APIENTRY) void,
   CreateQueries: *const fn (target: @"enum", n: sizei, ids: uint) callconv(APIENTRY) void,
   GetQueryBufferObjecti64v: *const fn (id: uint, buffer: uint, pname: @"enum", offset: intptr) callconv(APIENTRY) void,
   GetQueryBufferObjectiv: *const fn (id: uint, buffer: uint, pname: @"enum", offset: intptr) callconv(APIENTRY) void,
   GetQueryBufferObjectui64v: *const fn (id: uint, buffer: uint, pname: @"enum", offset: intptr) callconv(APIENTRY) void,
   GetQueryBufferObjectuiv: *const fn (id: uint, buffer: uint, pname: @"enum", offset: intptr) callconv(APIENTRY) void,
   MemoryBarrierByRegion: *const fn (barriers: bitfield) callconv(APIENTRY) void,
   GetTextureSubImage: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: @"enum", @"type": @"enum", bufSize: sizei, pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetCompressedTextureSubImage: *const fn (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, bufSize: sizei, pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetGraphicsResetStatus: *const fn () callconv(APIENTRY) @"enum",
   GetnCompressedTexImage: *const fn (target: @"enum", lod: int, bufSize: sizei, pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetnTexImage: *const fn (target: @"enum", level: int, format: @"enum", @"type": @"enum", bufSize: sizei, pixels: ?*const anyopaque) callconv(APIENTRY) void,
   GetnUniformdv: *const fn (program: uint, location: int, bufSize: sizei, params: double) callconv(APIENTRY) void,
   GetnUniformfv: *const fn (program: uint, location: int, bufSize: sizei, params: float) callconv(APIENTRY) void,
   GetnUniformiv: *const fn (program: uint, location: int, bufSize: sizei, params: int) callconv(APIENTRY) void,
   GetnUniformuiv: *const fn (program: uint, location: int, bufSize: sizei, params: uint) callconv(APIENTRY) void,
   ReadnPixels: *const fn (x: int, y: int, width: sizei, height: sizei, format: @"enum", @"type": @"enum", bufSize: sizei, data: ?*const anyopaque) callconv(APIENTRY) void,
   TextureBarrier: *const fn () callconv(APIENTRY) void,
   SpecializeShader: *const fn (shader: uint, pEntryPoint: [*c]const char, numSpecializationConstants: uint, pConstantIndex: [*c]const uint, pConstantValue: [*c]const uint) callconv(APIENTRY) void,
   MultiDrawArraysIndirectCount: *const fn (mode: @"enum", indirect: ?*const anyopaque, drawcount: intptr, maxdrawcount: sizei, stride: sizei) callconv(APIENTRY) void,
   MultiDrawElementsIndirectCount: *const fn (mode: @"enum", @"type": @"enum", indirect: ?*const anyopaque, drawcount: intptr, maxdrawcount: sizei, stride: sizei) callconv(APIENTRY) void,
   PolygonOffsetClamp: *const fn (factor: float, units: float, clamp: float) callconv(APIENTRY) void,
   pub fn init(procs: *FuncTable, loader: anytype) bool {
      @setEvalBranchQuota(1_000_000);
      var success: u1 = 1;
      inline for (@typeInfo(FuncTable).Struct.fields) |field_info| {
          switch (@typeInfo(field_info.type)) {
              .Pointer => |ptr_info| switch (@typeInfo(ptr_info.child)) {
                  .Fn => {
                      success &= @intFromBool(procs.initCommand(loader, field_info.name));
                  },
                  else => comptime unreachable,
              },
              else => comptime unreachable,
          }
      }
      return success != 0;
   }

   fn initCommand(procs: *FuncTable, loader: anytype, comptime name: [:0]const u8) bool {
      if (getProcAddress(loader, "gl" ++ name)) |proc| {
          @field(procs, name) = @ptrCast(proc);
          return true;
      } else {
          return @typeInfo(@TypeOf(@field(procs, name))) == .Optional;
      }
   }

   fn getProcAddress(loader: anytype, prefixed_name: [:0]const u8) ?PROC {
      const loader_info = @typeInfo(@TypeOf(loader));
      const loader_is_fn =
          loader_info == .Fn or
          loader_info == .Pointer and @typeInfo(loader_info.Pointer.child) == .Fn;
      if (loader_is_fn) {
          return @as(?PROC, loader(@as([*:0]const u8, prefixed_name)));
      } else {
          return @as(?PROC, loader.getProcAddress(@as([*:0]const u8, prefixed_name)));
      }
   }
};